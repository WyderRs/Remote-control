
Work 3 oled.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f470  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000133c  0800f610  0800f610  0001f610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801094c  0801094c  00030470  2**0
                  CONTENTS
  4 .ARM          00000008  0801094c  0801094c  0002094c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010954  08010954  00030470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010954  08010954  00020954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010958  08010958  00020958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000470  20000000  0801095c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003280  20000470  08010dcc  00030470  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200036f0  08010dcc  000336f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030470  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018b04  00000000  00000000  000304a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000340c  00000000  00000000  00048fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  0004c3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001428  00000000  00000000  0004d958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b165  00000000  00000000  0004ed80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c208  00000000  00000000  00069ee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009faec  00000000  00000000  000860ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00125bd9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c7c  00000000  00000000  00125c2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000470 	.word	0x20000470
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f5f8 	.word	0x0800f5f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000474 	.word	0x20000474
 80001dc:	0800f5f8 	.word	0x0800f5f8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <drawPixel>:
#include <ST7735.h>
#include "stdint.h"
#include "stdlib.h"

void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	80fb      	strh	r3, [r7, #6]
 8000f66:	460b      	mov	r3, r1
 8000f68:	80bb      	strh	r3, [r7, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	807b      	strh	r3, [r7, #2]
	ST7735_DrawPixel(x, y, color);
 8000f6e:	88fb      	ldrh	r3, [r7, #6]
 8000f70:	88b9      	ldrh	r1, [r7, #4]
 8000f72:	887a      	ldrh	r2, [r7, #2]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 fc7d 	bl	8001874 <ST7735_DrawPixel>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <fillRect>:

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8000f82:	b590      	push	{r4, r7, lr}
 8000f84:	b085      	sub	sp, #20
 8000f86:	af02      	add	r7, sp, #8
 8000f88:	4604      	mov	r4, r0
 8000f8a:	4608      	mov	r0, r1
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	461a      	mov	r2, r3
 8000f90:	4623      	mov	r3, r4
 8000f92:	80fb      	strh	r3, [r7, #6]
 8000f94:	4603      	mov	r3, r0
 8000f96:	80bb      	strh	r3, [r7, #4]
 8000f98:	460b      	mov	r3, r1
 8000f9a:	807b      	strh	r3, [r7, #2]
 8000f9c:	4613      	mov	r3, r2
 8000f9e:	803b      	strh	r3, [r7, #0]
	ST7735_FillRectangle(x, y, w, h, color);
 8000fa0:	88f8      	ldrh	r0, [r7, #6]
 8000fa2:	88b9      	ldrh	r1, [r7, #4]
 8000fa4:	887a      	ldrh	r2, [r7, #2]
 8000fa6:	883c      	ldrh	r4, [r7, #0]
 8000fa8:	8b3b      	ldrh	r3, [r7, #24]
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	4623      	mov	r3, r4
 8000fae:	f000 fd6b 	bl	8001a88 <ST7735_FillRectangle>
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd90      	pop	{r4, r7, pc}

08000fba <writePixel>:

#define min(a, b) (((a) < (b)) ? (a) : (b))


void writePixel(int16_t x, int16_t y, uint16_t color)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	80fb      	strh	r3, [r7, #6]
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	80bb      	strh	r3, [r7, #4]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	807b      	strh	r3, [r7, #2]
    drawPixel(x, y, color);
 8000fcc:	887a      	ldrh	r2, [r7, #2]
 8000fce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000fd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff ffc0 	bl	8000f5c <drawPixel>
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4604      	mov	r4, r0
 8000fec:	4608      	mov	r0, r1
 8000fee:	4611      	mov	r1, r2
 8000ff0:	461a      	mov	r2, r3
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	80fb      	strh	r3, [r7, #6]
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80bb      	strh	r3, [r7, #4]
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	807b      	strh	r3, [r7, #2]
 8000ffe:	4613      	mov	r3, r2
 8001000:	803b      	strh	r3, [r7, #0]
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001002:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001006:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001010:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001014:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001018:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800101c:	1acb      	subs	r3, r1, r3
 800101e:	2b00      	cmp	r3, #0
 8001020:	bfb8      	it	lt
 8001022:	425b      	neglt	r3, r3
 8001024:	429a      	cmp	r2, r3
 8001026:	bfcc      	ite	gt
 8001028:	2301      	movgt	r3, #1
 800102a:	2300      	movle	r3, #0
 800102c:	b2db      	uxtb	r3, r3
 800102e:	837b      	strh	r3, [r7, #26]
    if (steep) {
 8001030:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d00b      	beq.n	8001050 <writeLine+0x6c>
        _swap_int16_t(x0, y0);
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	833b      	strh	r3, [r7, #24]
 800103c:	88bb      	ldrh	r3, [r7, #4]
 800103e:	80fb      	strh	r3, [r7, #6]
 8001040:	8b3b      	ldrh	r3, [r7, #24]
 8001042:	80bb      	strh	r3, [r7, #4]
        _swap_int16_t(x1, y1);
 8001044:	887b      	ldrh	r3, [r7, #2]
 8001046:	82fb      	strh	r3, [r7, #22]
 8001048:	883b      	ldrh	r3, [r7, #0]
 800104a:	807b      	strh	r3, [r7, #2]
 800104c:	8afb      	ldrh	r3, [r7, #22]
 800104e:	803b      	strh	r3, [r7, #0]
    }

    if (x0 > x1) {
 8001050:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001054:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001058:	429a      	cmp	r2, r3
 800105a:	dd0b      	ble.n	8001074 <writeLine+0x90>
        _swap_int16_t(x0, x1);
 800105c:	88fb      	ldrh	r3, [r7, #6]
 800105e:	82bb      	strh	r3, [r7, #20]
 8001060:	887b      	ldrh	r3, [r7, #2]
 8001062:	80fb      	strh	r3, [r7, #6]
 8001064:	8abb      	ldrh	r3, [r7, #20]
 8001066:	807b      	strh	r3, [r7, #2]
        _swap_int16_t(y0, y1);
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	827b      	strh	r3, [r7, #18]
 800106c:	883b      	ldrh	r3, [r7, #0]
 800106e:	80bb      	strh	r3, [r7, #4]
 8001070:	8a7b      	ldrh	r3, [r7, #18]
 8001072:	803b      	strh	r3, [r7, #0]
    }

    int16_t dx, dy;
    dx = x1 - x0;
 8001074:	887a      	ldrh	r2, [r7, #2]
 8001076:	88fb      	ldrh	r3, [r7, #6]
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	b29b      	uxth	r3, r3
 800107c:	823b      	strh	r3, [r7, #16]
    dy = abs(y1 - y0);
 800107e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001082:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b00      	cmp	r3, #0
 800108a:	bfb8      	it	lt
 800108c:	425b      	neglt	r3, r3
 800108e:	81fb      	strh	r3, [r7, #14]

    int16_t err = dx / 2;
 8001090:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001094:	0fda      	lsrs	r2, r3, #31
 8001096:	4413      	add	r3, r2
 8001098:	105b      	asrs	r3, r3, #1
 800109a:	83fb      	strh	r3, [r7, #30]
    int16_t ystep;

    if (y0 < y1) {
 800109c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	da02      	bge.n	80010ae <writeLine+0xca>
        ystep = 1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	83bb      	strh	r3, [r7, #28]
 80010ac:	e031      	b.n	8001112 <writeLine+0x12e>
    } else {
        ystep = -1;
 80010ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b2:	83bb      	strh	r3, [r7, #28]
    }

    for (; x0<=x1; x0++) {
 80010b4:	e02d      	b.n	8001112 <writeLine+0x12e>
        if (steep) {
 80010b6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d008      	beq.n	80010d0 <writeLine+0xec>
            writePixel(y0, x0, color);
 80010be:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80010c0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80010c4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff76 	bl	8000fba <writePixel>
 80010ce:	e007      	b.n	80010e0 <writeLine+0xfc>
        } else {
            writePixel(x0, y0, color);
 80010d0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80010d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80010d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff ff6d 	bl	8000fba <writePixel>
        }
        err -= dy;
 80010e0:	8bfa      	ldrh	r2, [r7, #30]
 80010e2:	89fb      	ldrh	r3, [r7, #14]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	83fb      	strh	r3, [r7, #30]
        if (err < 0) {
 80010ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	da09      	bge.n	8001106 <writeLine+0x122>
            y0 += ystep;
 80010f2:	88ba      	ldrh	r2, [r7, #4]
 80010f4:	8bbb      	ldrh	r3, [r7, #28]
 80010f6:	4413      	add	r3, r2
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80010fc:	8bfa      	ldrh	r2, [r7, #30]
 80010fe:	8a3b      	ldrh	r3, [r7, #16]
 8001100:	4413      	add	r3, r2
 8001102:	b29b      	uxth	r3, r3
 8001104:	83fb      	strh	r3, [r7, #30]
    for (; x0<=x1; x0++) {
 8001106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800110a:	b29b      	uxth	r3, r3
 800110c:	3301      	adds	r3, #1
 800110e:	b29b      	uxth	r3, r3
 8001110:	80fb      	strh	r3, [r7, #6]
 8001112:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001116:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800111a:	429a      	cmp	r2, r3
 800111c:	ddcb      	ble.n	80010b6 <writeLine+0xd2>
        }
    }
}
 800111e:	bf00      	nop
 8001120:	bf00      	nop
 8001122:	3724      	adds	r7, #36	; 0x24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd90      	pop	{r4, r7, pc}

08001128 <drawFastVLine>:

void  drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b085      	sub	sp, #20
 800112c:	af02      	add	r7, sp, #8
 800112e:	4604      	mov	r4, r0
 8001130:	4608      	mov	r0, r1
 8001132:	4611      	mov	r1, r2
 8001134:	461a      	mov	r2, r3
 8001136:	4623      	mov	r3, r4
 8001138:	80fb      	strh	r3, [r7, #6]
 800113a:	4603      	mov	r3, r0
 800113c:	80bb      	strh	r3, [r7, #4]
 800113e:	460b      	mov	r3, r1
 8001140:	807b      	strh	r3, [r7, #2]
 8001142:	4613      	mov	r3, r2
 8001144:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x, y + h - 1, color);
 8001146:	88ba      	ldrh	r2, [r7, #4]
 8001148:	887b      	ldrh	r3, [r7, #2]
 800114a:	4413      	add	r3, r2
 800114c:	b29b      	uxth	r3, r3
 800114e:	3b01      	subs	r3, #1
 8001150:	b29b      	uxth	r3, r3
 8001152:	b21c      	sxth	r4, r3
 8001154:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001158:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800115c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001160:	883b      	ldrh	r3, [r7, #0]
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	4623      	mov	r3, r4
 8001166:	f7ff ff3d 	bl	8000fe4 <writeLine>
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bd90      	pop	{r4, r7, pc}

08001172 <drawFastHLine>:
void  drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8001172:	b590      	push	{r4, r7, lr}
 8001174:	b085      	sub	sp, #20
 8001176:	af02      	add	r7, sp, #8
 8001178:	4604      	mov	r4, r0
 800117a:	4608      	mov	r0, r1
 800117c:	4611      	mov	r1, r2
 800117e:	461a      	mov	r2, r3
 8001180:	4623      	mov	r3, r4
 8001182:	80fb      	strh	r3, [r7, #6]
 8001184:	4603      	mov	r3, r0
 8001186:	80bb      	strh	r3, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
 800118c:	4613      	mov	r3, r2
 800118e:	803b      	strh	r3, [r7, #0]
	writeLine(x, y, x + w - 1, y, color);
 8001190:	88fa      	ldrh	r2, [r7, #6]
 8001192:	887b      	ldrh	r3, [r7, #2]
 8001194:	4413      	add	r3, r2
 8001196:	b29b      	uxth	r3, r3
 8001198:	3b01      	subs	r3, #1
 800119a:	b29b      	uxth	r3, r3
 800119c:	b21a      	sxth	r2, r3
 800119e:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80011a2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80011a6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80011aa:	883b      	ldrh	r3, [r7, #0]
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	4623      	mov	r3, r4
 80011b0:	f7ff ff18 	bl	8000fe4 <writeLine>
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd90      	pop	{r4, r7, pc}

080011bc <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b087      	sub	sp, #28
 80011c0:	af02      	add	r7, sp, #8
 80011c2:	4604      	mov	r4, r0
 80011c4:	4608      	mov	r0, r1
 80011c6:	4611      	mov	r1, r2
 80011c8:	461a      	mov	r2, r3
 80011ca:	4623      	mov	r3, r4
 80011cc:	80fb      	strh	r3, [r7, #6]
 80011ce:	4603      	mov	r3, r0
 80011d0:	80bb      	strh	r3, [r7, #4]
 80011d2:	460b      	mov	r3, r1
 80011d4:	807b      	strh	r3, [r7, #2]
 80011d6:	4613      	mov	r3, r2
 80011d8:	803b      	strh	r3, [r7, #0]
    if(x0 == x1){
 80011da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d11a      	bne.n	800121c <drawLine+0x60>
        if(y0 > y1) _swap_int16_t(y0, y1);
 80011e6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011ea:	f9b7 3000 	ldrsh.w	r3, [r7]
 80011ee:	429a      	cmp	r2, r3
 80011f0:	dd05      	ble.n	80011fe <drawLine+0x42>
 80011f2:	88bb      	ldrh	r3, [r7, #4]
 80011f4:	81bb      	strh	r3, [r7, #12]
 80011f6:	883b      	ldrh	r3, [r7, #0]
 80011f8:	80bb      	strh	r3, [r7, #4]
 80011fa:	89bb      	ldrh	r3, [r7, #12]
 80011fc:	803b      	strh	r3, [r7, #0]
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 80011fe:	883a      	ldrh	r2, [r7, #0]
 8001200:	88bb      	ldrh	r3, [r7, #4]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	b29b      	uxth	r3, r3
 8001206:	3301      	adds	r3, #1
 8001208:	b29b      	uxth	r3, r3
 800120a:	b21a      	sxth	r2, r3
 800120c:	8c3b      	ldrh	r3, [r7, #32]
 800120e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001212:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001216:	f7ff ff87 	bl	8001128 <drawFastVLine>
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
    } else {
        writeLine(x0, y0, x1, y1, color);
    }
}
 800121a:	e02d      	b.n	8001278 <drawLine+0xbc>
    } else if(y0 == y1){
 800121c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001220:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001224:	429a      	cmp	r2, r3
 8001226:	d11a      	bne.n	800125e <drawLine+0xa2>
        if(x0 > x1) _swap_int16_t(x0, x1);
 8001228:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800122c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001230:	429a      	cmp	r2, r3
 8001232:	dd05      	ble.n	8001240 <drawLine+0x84>
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	81fb      	strh	r3, [r7, #14]
 8001238:	887b      	ldrh	r3, [r7, #2]
 800123a:	80fb      	strh	r3, [r7, #6]
 800123c:	89fb      	ldrh	r3, [r7, #14]
 800123e:	807b      	strh	r3, [r7, #2]
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 8001240:	887a      	ldrh	r2, [r7, #2]
 8001242:	88fb      	ldrh	r3, [r7, #6]
 8001244:	1ad3      	subs	r3, r2, r3
 8001246:	b29b      	uxth	r3, r3
 8001248:	3301      	adds	r3, #1
 800124a:	b29b      	uxth	r3, r3
 800124c:	b21a      	sxth	r2, r3
 800124e:	8c3b      	ldrh	r3, [r7, #32]
 8001250:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001254:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001258:	f7ff ff8b 	bl	8001172 <drawFastHLine>
}
 800125c:	e00c      	b.n	8001278 <drawLine+0xbc>
        writeLine(x0, y0, x1, y1, color);
 800125e:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001262:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001266:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800126a:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800126e:	8c3b      	ldrh	r3, [r7, #32]
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	4623      	mov	r3, r4
 8001274:	f7ff feb6 	bl	8000fe4 <writeLine>
}
 8001278:	bf00      	nop
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	bd90      	pop	{r4, r7, pc}

08001280 <fillCircleHelper>:
        }
    }
}

void fillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t corners, int16_t delta, uint16_t color)
{
 8001280:	b590      	push	{r4, r7, lr}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	4604      	mov	r4, r0
 8001288:	4608      	mov	r0, r1
 800128a:	4611      	mov	r1, r2
 800128c:	461a      	mov	r2, r3
 800128e:	4623      	mov	r3, r4
 8001290:	80fb      	strh	r3, [r7, #6]
 8001292:	4603      	mov	r3, r0
 8001294:	80bb      	strh	r3, [r7, #4]
 8001296:	460b      	mov	r3, r1
 8001298:	807b      	strh	r3, [r7, #2]
 800129a:	4613      	mov	r3, r2
 800129c:	707b      	strb	r3, [r7, #1]

    int16_t f     = 1 - r;
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	f1c3 0301 	rsb	r3, r3, #1
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 80012a8:	2301      	movs	r3, #1
 80012aa:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 80012ac:	887b      	ldrh	r3, [r7, #2]
 80012ae:	461a      	mov	r2, r3
 80012b0:	03d2      	lsls	r2, r2, #15
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	827b      	strh	r3, [r7, #18]
    int16_t x     = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	823b      	strh	r3, [r7, #16]
    int16_t y     = r;
 80012be:	887b      	ldrh	r3, [r7, #2]
 80012c0:	81fb      	strh	r3, [r7, #14]
    int16_t px    = x;
 80012c2:	8a3b      	ldrh	r3, [r7, #16]
 80012c4:	81bb      	strh	r3, [r7, #12]
    int16_t py    = y;
 80012c6:	89fb      	ldrh	r3, [r7, #14]
 80012c8:	817b      	strh	r3, [r7, #10]

    delta++; // Avoid some +1's in the loop
 80012ca:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	3301      	adds	r3, #1
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	853b      	strh	r3, [r7, #40]	; 0x28

    while(x < y) {
 80012d6:	e095      	b.n	8001404 <fillCircleHelper+0x184>
        if (f >= 0) {
 80012d8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0e      	blt.n	80012fe <fillCircleHelper+0x7e>
            y--;
 80012e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	3b01      	subs	r3, #1
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80012ec:	8a7b      	ldrh	r3, [r7, #18]
 80012ee:	3302      	adds	r3, #2
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	827b      	strh	r3, [r7, #18]
            f     += ddF_y;
 80012f4:	8afa      	ldrh	r2, [r7, #22]
 80012f6:	8a7b      	ldrh	r3, [r7, #18]
 80012f8:	4413      	add	r3, r2
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80012fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001302:	b29b      	uxth	r3, r3
 8001304:	3301      	adds	r3, #1
 8001306:	b29b      	uxth	r3, r3
 8001308:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 800130a:	8abb      	ldrh	r3, [r7, #20]
 800130c:	3302      	adds	r3, #2
 800130e:	b29b      	uxth	r3, r3
 8001310:	82bb      	strh	r3, [r7, #20]
        f     += ddF_x;
 8001312:	8afa      	ldrh	r2, [r7, #22]
 8001314:	8abb      	ldrh	r3, [r7, #20]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	82fb      	strh	r3, [r7, #22]
        // These checks avoid double-drawing certain lines, important
        // for the SSD1306 library which has an INVERT drawing mode.
        if(x < (y + 1)) {
 800131c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001320:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001324:	429a      	cmp	r2, r3
 8001326:	db31      	blt.n	800138c <fillCircleHelper+0x10c>
            if(corners & 1) drawFastVLine(x0+x, y0-y, 2*y+delta, color);
 8001328:	787b      	ldrb	r3, [r7, #1]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	2b00      	cmp	r3, #0
 8001330:	d013      	beq.n	800135a <fillCircleHelper+0xda>
 8001332:	88fa      	ldrh	r2, [r7, #6]
 8001334:	8a3b      	ldrh	r3, [r7, #16]
 8001336:	4413      	add	r3, r2
 8001338:	b29b      	uxth	r3, r3
 800133a:	b218      	sxth	r0, r3
 800133c:	88ba      	ldrh	r2, [r7, #4]
 800133e:	89fb      	ldrh	r3, [r7, #14]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	b29b      	uxth	r3, r3
 8001344:	b219      	sxth	r1, r3
 8001346:	89fb      	ldrh	r3, [r7, #14]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	b29a      	uxth	r2, r3
 800134c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800134e:	4413      	add	r3, r2
 8001350:	b29b      	uxth	r3, r3
 8001352:	b21a      	sxth	r2, r3
 8001354:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001356:	f7ff fee7 	bl	8001128 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-x, y0-y, 2*y+delta, color);
 800135a:	787b      	ldrb	r3, [r7, #1]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d013      	beq.n	800138c <fillCircleHelper+0x10c>
 8001364:	88fa      	ldrh	r2, [r7, #6]
 8001366:	8a3b      	ldrh	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	b29b      	uxth	r3, r3
 800136c:	b218      	sxth	r0, r3
 800136e:	88ba      	ldrh	r2, [r7, #4]
 8001370:	89fb      	ldrh	r3, [r7, #14]
 8001372:	1ad3      	subs	r3, r2, r3
 8001374:	b29b      	uxth	r3, r3
 8001376:	b219      	sxth	r1, r3
 8001378:	89fb      	ldrh	r3, [r7, #14]
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	b29a      	uxth	r2, r3
 800137e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001380:	4413      	add	r3, r2
 8001382:	b29b      	uxth	r3, r3
 8001384:	b21a      	sxth	r2, r3
 8001386:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001388:	f7ff fece 	bl	8001128 <drawFastVLine>
        }
        if(y != py) {
 800138c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001390:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001394:	429a      	cmp	r2, r3
 8001396:	d033      	beq.n	8001400 <fillCircleHelper+0x180>
            if(corners & 1) drawFastVLine(x0+py, y0-px, 2*px+delta, color);
 8001398:	787b      	ldrb	r3, [r7, #1]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d013      	beq.n	80013ca <fillCircleHelper+0x14a>
 80013a2:	88fa      	ldrh	r2, [r7, #6]
 80013a4:	897b      	ldrh	r3, [r7, #10]
 80013a6:	4413      	add	r3, r2
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	b218      	sxth	r0, r3
 80013ac:	88ba      	ldrh	r2, [r7, #4]
 80013ae:	89bb      	ldrh	r3, [r7, #12]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	b219      	sxth	r1, r3
 80013b6:	89bb      	ldrh	r3, [r7, #12]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013be:	4413      	add	r3, r2
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013c6:	f7ff feaf 	bl	8001128 <drawFastVLine>
            if(corners & 2) drawFastVLine(x0-py, y0-px, 2*px+delta, color);
 80013ca:	787b      	ldrb	r3, [r7, #1]
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d013      	beq.n	80013fc <fillCircleHelper+0x17c>
 80013d4:	88fa      	ldrh	r2, [r7, #6]
 80013d6:	897b      	ldrh	r3, [r7, #10]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	b29b      	uxth	r3, r3
 80013dc:	b218      	sxth	r0, r3
 80013de:	88ba      	ldrh	r2, [r7, #4]
 80013e0:	89bb      	ldrh	r3, [r7, #12]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	b219      	sxth	r1, r3
 80013e8:	89bb      	ldrh	r3, [r7, #12]
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	b29a      	uxth	r2, r3
 80013ee:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013f0:	4413      	add	r3, r2
 80013f2:	b29b      	uxth	r3, r3
 80013f4:	b21a      	sxth	r2, r3
 80013f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013f8:	f7ff fe96 	bl	8001128 <drawFastVLine>
            py = y;
 80013fc:	89fb      	ldrh	r3, [r7, #14]
 80013fe:	817b      	strh	r3, [r7, #10]
        }
        px = x;
 8001400:	8a3b      	ldrh	r3, [r7, #16]
 8001402:	81bb      	strh	r3, [r7, #12]
    while(x < y) {
 8001404:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001408:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800140c:	429a      	cmp	r2, r3
 800140e:	f6ff af63 	blt.w	80012d8 <fillCircleHelper+0x58>
    }
}
 8001412:	bf00      	nop
 8001414:	bf00      	nop
 8001416:	371c      	adds	r7, #28
 8001418:	46bd      	mov	sp, r7
 800141a:	bd90      	pop	{r4, r7, pc}

0800141c <fillCircle>:

void fillCircle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b085      	sub	sp, #20
 8001420:	af02      	add	r7, sp, #8
 8001422:	4604      	mov	r4, r0
 8001424:	4608      	mov	r0, r1
 8001426:	4611      	mov	r1, r2
 8001428:	461a      	mov	r2, r3
 800142a:	4623      	mov	r3, r4
 800142c:	80fb      	strh	r3, [r7, #6]
 800142e:	4603      	mov	r3, r0
 8001430:	80bb      	strh	r3, [r7, #4]
 8001432:	460b      	mov	r3, r1
 8001434:	807b      	strh	r3, [r7, #2]
 8001436:	4613      	mov	r3, r2
 8001438:	803b      	strh	r3, [r7, #0]
    drawFastVLine(x0, y0-r, 2*r+1, color);
 800143a:	88ba      	ldrh	r2, [r7, #4]
 800143c:	887b      	ldrh	r3, [r7, #2]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	b29b      	uxth	r3, r3
 8001442:	b219      	sxth	r1, r3
 8001444:	887b      	ldrh	r3, [r7, #2]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	b29b      	uxth	r3, r3
 800144a:	3301      	adds	r3, #1
 800144c:	b29b      	uxth	r3, r3
 800144e:	b21a      	sxth	r2, r3
 8001450:	883b      	ldrh	r3, [r7, #0]
 8001452:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001456:	f7ff fe67 	bl	8001128 <drawFastVLine>
    fillCircleHelper(x0, y0, r, 3, 0, color);
 800145a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800145e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001462:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001466:	883b      	ldrh	r3, [r7, #0]
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	2300      	movs	r3, #0
 800146c:	9300      	str	r3, [sp, #0]
 800146e:	2303      	movs	r3, #3
 8001470:	f7ff ff06 	bl	8001280 <fillCircleHelper>
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	bd90      	pop	{r4, r7, pc}

0800147c <drawRect>:



void drawRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800147c:	b590      	push	{r4, r7, lr}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4604      	mov	r4, r0
 8001484:	4608      	mov	r0, r1
 8001486:	4611      	mov	r1, r2
 8001488:	461a      	mov	r2, r3
 800148a:	4623      	mov	r3, r4
 800148c:	80fb      	strh	r3, [r7, #6]
 800148e:	4603      	mov	r3, r0
 8001490:	80bb      	strh	r3, [r7, #4]
 8001492:	460b      	mov	r3, r1
 8001494:	807b      	strh	r3, [r7, #2]
 8001496:	4613      	mov	r3, r2
 8001498:	803b      	strh	r3, [r7, #0]
    drawFastHLine(x, y, w, color);
 800149a:	8b3b      	ldrh	r3, [r7, #24]
 800149c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014a0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014a4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80014a8:	f7ff fe63 	bl	8001172 <drawFastHLine>
    drawFastHLine(x, y+h-1, w, color);
 80014ac:	88ba      	ldrh	r2, [r7, #4]
 80014ae:	883b      	ldrh	r3, [r7, #0]
 80014b0:	4413      	add	r3, r2
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	3b01      	subs	r3, #1
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	b219      	sxth	r1, r3
 80014ba:	8b3b      	ldrh	r3, [r7, #24]
 80014bc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014c0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80014c4:	f7ff fe55 	bl	8001172 <drawFastHLine>
    drawFastVLine(x, y, h, color);
 80014c8:	8b3b      	ldrh	r3, [r7, #24]
 80014ca:	f9b7 2000 	ldrsh.w	r2, [r7]
 80014ce:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014d2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80014d6:	f7ff fe27 	bl	8001128 <drawFastVLine>
    drawFastVLine(x+w-1, y, h, color);
 80014da:	88fa      	ldrh	r2, [r7, #6]
 80014dc:	887b      	ldrh	r3, [r7, #2]
 80014de:	4413      	add	r3, r2
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	3b01      	subs	r3, #1
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	b218      	sxth	r0, r3
 80014e8:	8b3b      	ldrh	r3, [r7, #24]
 80014ea:	f9b7 2000 	ldrsh.w	r2, [r7]
 80014ee:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80014f2:	f7ff fe19 	bl	8001128 <drawFastVLine>
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd90      	pop	{r4, r7, pc}
	...

08001500 <fillScreen>:
        if(a > b) _swap_int16_t(a,b);
        drawFastHLine(a, y, b-a+1, color);
    }
}

void fillScreen(uint16_t color) {
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af02      	add	r7, sp, #8
 8001506:	4603      	mov	r3, r0
 8001508:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <fillScreen+0x2c>)
 800150c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001510:	4b07      	ldr	r3, [pc, #28]	; (8001530 <fillScreen+0x30>)
 8001512:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	460b      	mov	r3, r1
 800151c:	2100      	movs	r1, #0
 800151e:	2000      	movs	r0, #0
 8001520:	f7ff fd2f 	bl	8000f82 <fillRect>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	2000048c 	.word	0x2000048c
 8001530:	2000048e 	.word	0x2000048e

08001534 <ST7735_Select>:
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

void ST7735_Select()
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8001538:	2200      	movs	r2, #0
 800153a:	2102      	movs	r1, #2
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <ST7735_Select+0x14>)
 800153e:	f004 fe47 	bl	80061d0 <HAL_GPIO_WritePin>
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	40020400 	.word	0x40020400

0800154c <ST7735_Unselect>:

void ST7735_Unselect()
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8001550:	2201      	movs	r2, #1
 8001552:	2102      	movs	r1, #2
 8001554:	4802      	ldr	r0, [pc, #8]	; (8001560 <ST7735_Unselect+0x14>)
 8001556:	f004 fe3b 	bl	80061d0 <HAL_GPIO_WritePin>
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40020400 	.word	0x40020400

08001564 <ST7735_Reset>:

void ST7735_Reset()
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	2104      	movs	r1, #4
 800156c:	4806      	ldr	r0, [pc, #24]	; (8001588 <ST7735_Reset+0x24>)
 800156e:	f004 fe2f 	bl	80061d0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001572:	2005      	movs	r0, #5
 8001574:	f003 faa2 	bl	8004abc <HAL_Delay>
    HAL_GPIO_WritePin(RST_PORT, RST_PIN, GPIO_PIN_SET);
 8001578:	2201      	movs	r2, #1
 800157a:	2104      	movs	r1, #4
 800157c:	4802      	ldr	r0, [pc, #8]	; (8001588 <ST7735_Reset+0x24>)
 800157e:	f004 fe27 	bl	80061d0 <HAL_GPIO_WritePin>
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40020400 	.word	0x40020400

0800158c <ST7735_WriteCommand>:

  void ST7735_WriteCommand(uint8_t cmd)
  {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	4603      	mov	r3, r0
 8001594:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_RESET);
 8001596:	2200      	movs	r2, #0
 8001598:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800159c:	4806      	ldr	r0, [pc, #24]	; (80015b8 <ST7735_WriteCommand+0x2c>)
 800159e:	f004 fe17 	bl	80061d0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80015a2:	1df9      	adds	r1, r7, #7
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	2201      	movs	r2, #1
 80015aa:	4804      	ldr	r0, [pc, #16]	; (80015bc <ST7735_WriteCommand+0x30>)
 80015ac:	f005 fb25 	bl	8006bfa <HAL_SPI_Transmit>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40020400 	.word	0x40020400
 80015bc:	20000540 	.word	0x20000540

080015c0 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t* buff, size_t buff_size)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015d0:	4807      	ldr	r0, [pc, #28]	; (80015f0 <ST7735_WriteData+0x30>)
 80015d2:	f004 fdfd 	bl	80061d0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	b29a      	uxth	r2, r3
 80015da:	f04f 33ff 	mov.w	r3, #4294967295
 80015de:	6879      	ldr	r1, [r7, #4]
 80015e0:	4804      	ldr	r0, [pc, #16]	; (80015f4 <ST7735_WriteData+0x34>)
 80015e2:	f005 fb0a 	bl	8006bfa <HAL_SPI_Transmit>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40020400 	.word	0x40020400
 80015f4:	20000540 	.word	0x20000540

080015f8 <DisplayInit>:

void DisplayInit(const uint8_t *addr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800160a:	e034      	b.n	8001676 <DisplayInit+0x7e>
        uint8_t cmd = *addr++;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	1c5a      	adds	r2, r3, #1
 8001610:	607a      	str	r2, [r7, #4]
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001616:	7afb      	ldrb	r3, [r7, #11]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff ffb7 	bl	800158c <ST7735_WriteCommand>

        numArgs = *addr++;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	607a      	str	r2, [r7, #4]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001628:	7abb      	ldrb	r3, [r7, #10]
 800162a:	b29b      	uxth	r3, r3
 800162c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001630:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001632:	7abb      	ldrb	r3, [r7, #10]
 8001634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001638:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800163a:	7abb      	ldrb	r3, [r7, #10]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d008      	beq.n	8001652 <DisplayInit+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001640:	7abb      	ldrb	r3, [r7, #10]
 8001642:	4619      	mov	r1, r3
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ffbb 	bl	80015c0 <ST7735_WriteData>
            addr += numArgs;
 800164a:	7abb      	ldrb	r3, [r7, #10]
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	4413      	add	r3, r2
 8001650:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001652:	89bb      	ldrh	r3, [r7, #12]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d00e      	beq.n	8001676 <DisplayInit+0x7e>
            ms = *addr++;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	1c5a      	adds	r2, r3, #1
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001662:	89bb      	ldrh	r3, [r7, #12]
 8001664:	2bff      	cmp	r3, #255	; 0xff
 8001666:	d102      	bne.n	800166e <DisplayInit+0x76>
 8001668:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800166c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800166e:	89bb      	ldrh	r3, [r7, #12]
 8001670:	4618      	mov	r0, r3
 8001672:	f003 fa23 	bl	8004abc <HAL_Delay>
    while(numCommands--) {
 8001676:	7bfb      	ldrb	r3, [r7, #15]
 8001678:	1e5a      	subs	r2, r3, #1
 800167a:	73fa      	strb	r2, [r7, #15]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1c5      	bne.n	800160c <DisplayInit+0x14>
        }
    }
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	4604      	mov	r4, r0
 8001694:	4608      	mov	r0, r1
 8001696:	4611      	mov	r1, r2
 8001698:	461a      	mov	r2, r3
 800169a:	4623      	mov	r3, r4
 800169c:	71fb      	strb	r3, [r7, #7]
 800169e:	4603      	mov	r3, r0
 80016a0:	71bb      	strb	r3, [r7, #6]
 80016a2:	460b      	mov	r3, r1
 80016a4:	717b      	strb	r3, [r7, #5]
 80016a6:	4613      	mov	r3, r2
 80016a8:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80016aa:	202a      	movs	r0, #42	; 0x2a
 80016ac:	f7ff ff6e 	bl	800158c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + _xstart, 0x00, x1 + _xstart };
 80016b0:	2300      	movs	r3, #0
 80016b2:	733b      	strb	r3, [r7, #12]
 80016b4:	4b17      	ldr	r3, [pc, #92]	; (8001714 <ST7735_SetAddressWindow+0x88>)
 80016b6:	781a      	ldrb	r2, [r3, #0]
 80016b8:	79fb      	ldrb	r3, [r7, #7]
 80016ba:	4413      	add	r3, r2
 80016bc:	b2db      	uxtb	r3, r3
 80016be:	737b      	strb	r3, [r7, #13]
 80016c0:	2300      	movs	r3, #0
 80016c2:	73bb      	strb	r3, [r7, #14]
 80016c4:	4b13      	ldr	r3, [pc, #76]	; (8001714 <ST7735_SetAddressWindow+0x88>)
 80016c6:	781a      	ldrb	r2, [r3, #0]
 80016c8:	797b      	ldrb	r3, [r7, #5]
 80016ca:	4413      	add	r3, r2
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80016d0:	f107 030c 	add.w	r3, r7, #12
 80016d4:	2104      	movs	r1, #4
 80016d6:	4618      	mov	r0, r3
 80016d8:	f7ff ff72 	bl	80015c0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80016dc:	202b      	movs	r0, #43	; 0x2b
 80016de:	f7ff ff55 	bl	800158c <ST7735_WriteCommand>
    data[1] = y0 + _ystart;
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <ST7735_SetAddressWindow+0x8c>)
 80016e4:	781a      	ldrb	r2, [r3, #0]
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	4413      	add	r3, r2
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + _ystart;
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <ST7735_SetAddressWindow+0x8c>)
 80016f0:	781a      	ldrb	r2, [r3, #0]
 80016f2:	793b      	ldrb	r3, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80016fa:	f107 030c 	add.w	r3, r7, #12
 80016fe:	2104      	movs	r1, #4
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff5d 	bl	80015c0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001706:	202c      	movs	r0, #44	; 0x2c
 8001708:	f7ff ff40 	bl	800158c <ST7735_WriteCommand>
}
 800170c:	bf00      	nop
 800170e:	3714      	adds	r7, #20
 8001710:	46bd      	mov	sp, r7
 8001712:	bd90      	pop	{r4, r7, pc}
 8001714:	20000493 	.word	0x20000493
 8001718:	20000494 	.word	0x20000494

0800171c <ST7735_Init>:

void ST7735_Init(uint8_t rotation)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
    ST7735_Select();
 8001726:	f7ff ff05 	bl	8001534 <ST7735_Select>
    ST7735_Reset();
 800172a:	f7ff ff1b 	bl	8001564 <ST7735_Reset>
    DisplayInit(init_cmds1);
 800172e:	480c      	ldr	r0, [pc, #48]	; (8001760 <ST7735_Init+0x44>)
 8001730:	f7ff ff62 	bl	80015f8 <DisplayInit>
    DisplayInit(init_cmds2);
 8001734:	480b      	ldr	r0, [pc, #44]	; (8001764 <ST7735_Init+0x48>)
 8001736:	f7ff ff5f 	bl	80015f8 <DisplayInit>
    DisplayInit(init_cmds3);
 800173a:	480b      	ldr	r0, [pc, #44]	; (8001768 <ST7735_Init+0x4c>)
 800173c:	f7ff ff5c 	bl	80015f8 <DisplayInit>

#elif ST7735_IS_128X128
    _colstart = 2;
    _rowstart = 3;
#else
    _colstart = 0;
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <ST7735_Init+0x50>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
    _rowstart = 0;
 8001746:	4b0a      	ldr	r3, [pc, #40]	; (8001770 <ST7735_Init+0x54>)
 8001748:	2200      	movs	r2, #0
 800174a:	701a      	strb	r2, [r3, #0]
#endif
    ST7735_SetRotation (rotation);
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f810 	bl	8001774 <ST7735_SetRotation>
    ST7735_Unselect();
 8001754:	f7ff fefa 	bl	800154c <ST7735_Unselect>

}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	0800f930 	.word	0x0800f930
 8001764:	0800f968 	.word	0x0800f968
 8001768:	0800f978 	.word	0x0800f978
 800176c:	20000491 	.word	0x20000491
 8001770:	20000492 	.word	0x20000492

08001774 <ST7735_SetRotation>:

void ST7735_SetRotation(uint8_t m)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	4603      	mov	r3, r0
 800177c:	71fb      	strb	r3, [r7, #7]

  uint8_t madctl = 0;
 800177e:	2300      	movs	r3, #0
 8001780:	73fb      	strb	r3, [r7, #15]

  rotation = m % 4; // can't be higher than 3
 8001782:	79fb      	ldrb	r3, [r7, #7]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	b2da      	uxtb	r2, r3
 800178a:	4b33      	ldr	r3, [pc, #204]	; (8001858 <ST7735_SetRotation+0xe4>)
 800178c:	701a      	strb	r2, [r3, #0]

  switch (rotation)
 800178e:	4b32      	ldr	r3, [pc, #200]	; (8001858 <ST7735_SetRotation+0xe4>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b03      	cmp	r3, #3
 8001794:	d84e      	bhi.n	8001834 <ST7735_SetRotation+0xc0>
 8001796:	a201      	add	r2, pc, #4	; (adr r2, 800179c <ST7735_SetRotation+0x28>)
 8001798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800179c:	080017ad 	.word	0x080017ad
 80017a0:	080017cf 	.word	0x080017cf
 80017a4:	080017f1 	.word	0x080017f1
 80017a8:	08001813 	.word	0x08001813
  {
  case 0:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 80017ac:	23c0      	movs	r3, #192	; 0xc0
 80017ae:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80017b0:	4b2a      	ldr	r3, [pc, #168]	; (800185c <ST7735_SetRotation+0xe8>)
 80017b2:	22a0      	movs	r2, #160	; 0xa0
 80017b4:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80017b6:	4b2a      	ldr	r3, [pc, #168]	; (8001860 <ST7735_SetRotation+0xec>)
 80017b8:	2280      	movs	r2, #128	; 0x80
 80017ba:	801a      	strh	r2, [r3, #0]
      _xstart = _colstart;
 80017bc:	4b29      	ldr	r3, [pc, #164]	; (8001864 <ST7735_SetRotation+0xf0>)
 80017be:	781a      	ldrb	r2, [r3, #0]
 80017c0:	4b29      	ldr	r3, [pc, #164]	; (8001868 <ST7735_SetRotation+0xf4>)
 80017c2:	701a      	strb	r2, [r3, #0]
      _ystart = _rowstart;
 80017c4:	4b29      	ldr	r3, [pc, #164]	; (800186c <ST7735_SetRotation+0xf8>)
 80017c6:	781a      	ldrb	r2, [r3, #0]
 80017c8:	4b29      	ldr	r3, [pc, #164]	; (8001870 <ST7735_SetRotation+0xfc>)
 80017ca:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80017cc:	e032      	b.n	8001834 <ST7735_SetRotation+0xc0>
  case 1:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 80017ce:	23a0      	movs	r3, #160	; 0xa0
 80017d0:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <ST7735_SetRotation+0xec>)
 80017d4:	22a0      	movs	r2, #160	; 0xa0
 80017d6:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 80017d8:	4b20      	ldr	r3, [pc, #128]	; (800185c <ST7735_SetRotation+0xe8>)
 80017da:	2280      	movs	r2, #128	; 0x80
 80017dc:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 80017de:	4b21      	ldr	r3, [pc, #132]	; (8001864 <ST7735_SetRotation+0xf0>)
 80017e0:	781a      	ldrb	r2, [r3, #0]
 80017e2:	4b23      	ldr	r3, [pc, #140]	; (8001870 <ST7735_SetRotation+0xfc>)
 80017e4:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <ST7735_SetRotation+0xf8>)
 80017e8:	781a      	ldrb	r2, [r3, #0]
 80017ea:	4b1f      	ldr	r3, [pc, #124]	; (8001868 <ST7735_SetRotation+0xf4>)
 80017ec:	701a      	strb	r2, [r3, #0]
#endif
    break;
 80017ee:	e021      	b.n	8001834 <ST7735_SetRotation+0xc0>
  case 2:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_RGB;
 80017f0:	2300      	movs	r3, #0
 80017f2:	73fb      	strb	r3, [r7, #15]
      _height = ST7735_HEIGHT;
 80017f4:	4b19      	ldr	r3, [pc, #100]	; (800185c <ST7735_SetRotation+0xe8>)
 80017f6:	22a0      	movs	r2, #160	; 0xa0
 80017f8:	801a      	strh	r2, [r3, #0]
      _width = ST7735_WIDTH;
 80017fa:	4b19      	ldr	r3, [pc, #100]	; (8001860 <ST7735_SetRotation+0xec>)
 80017fc:	2280      	movs	r2, #128	; 0x80
 80017fe:	801a      	strh	r2, [r3, #0]
    _xstart = _colstart;
 8001800:	4b18      	ldr	r3, [pc, #96]	; (8001864 <ST7735_SetRotation+0xf0>)
 8001802:	781a      	ldrb	r2, [r3, #0]
 8001804:	4b18      	ldr	r3, [pc, #96]	; (8001868 <ST7735_SetRotation+0xf4>)
 8001806:	701a      	strb	r2, [r3, #0]
    _ystart = _rowstart;
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <ST7735_SetRotation+0xf8>)
 800180a:	781a      	ldrb	r2, [r3, #0]
 800180c:	4b18      	ldr	r3, [pc, #96]	; (8001870 <ST7735_SetRotation+0xfc>)
 800180e:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001810:	e010      	b.n	8001834 <ST7735_SetRotation+0xc0>
  case 3:
#if ST7735_IS_160X80
	  madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_BGR;
#else
      madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 8001812:	2360      	movs	r3, #96	; 0x60
 8001814:	73fb      	strb	r3, [r7, #15]
      _width = ST7735_HEIGHT;
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <ST7735_SetRotation+0xec>)
 8001818:	22a0      	movs	r2, #160	; 0xa0
 800181a:	801a      	strh	r2, [r3, #0]
      _height = ST7735_WIDTH;
 800181c:	4b0f      	ldr	r3, [pc, #60]	; (800185c <ST7735_SetRotation+0xe8>)
 800181e:	2280      	movs	r2, #128	; 0x80
 8001820:	801a      	strh	r2, [r3, #0]
    _ystart = _colstart;
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <ST7735_SetRotation+0xf0>)
 8001824:	781a      	ldrb	r2, [r3, #0]
 8001826:	4b12      	ldr	r3, [pc, #72]	; (8001870 <ST7735_SetRotation+0xfc>)
 8001828:	701a      	strb	r2, [r3, #0]
    _xstart = _rowstart;
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <ST7735_SetRotation+0xf8>)
 800182c:	781a      	ldrb	r2, [r3, #0]
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <ST7735_SetRotation+0xf4>)
 8001830:	701a      	strb	r2, [r3, #0]
#endif
    break;
 8001832:	bf00      	nop
  }
  ST7735_Select();
 8001834:	f7ff fe7e 	bl	8001534 <ST7735_Select>
  ST7735_WriteCommand(ST7735_MADCTL);
 8001838:	2036      	movs	r0, #54	; 0x36
 800183a:	f7ff fea7 	bl	800158c <ST7735_WriteCommand>
  ST7735_WriteData(&madctl,1);
 800183e:	f107 030f 	add.w	r3, r7, #15
 8001842:	2101      	movs	r1, #1
 8001844:	4618      	mov	r0, r3
 8001846:	f7ff febb 	bl	80015c0 <ST7735_WriteData>
  ST7735_Unselect();
 800184a:	f7ff fe7f 	bl	800154c <ST7735_Unselect>
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000490 	.word	0x20000490
 800185c:	2000048e 	.word	0x2000048e
 8001860:	2000048c 	.word	0x2000048c
 8001864:	20000491 	.word	0x20000491
 8001868:	20000493 	.word	0x20000493
 800186c:	20000492 	.word	0x20000492
 8001870:	20000494 	.word	0x20000494

08001874 <ST7735_DrawPixel>:

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	80fb      	strh	r3, [r7, #6]
 800187e:	460b      	mov	r3, r1
 8001880:	80bb      	strh	r3, [r7, #4]
 8001882:	4613      	mov	r3, r2
 8001884:	807b      	strh	r3, [r7, #2]
    if((x >= _width) || (y >= _height))
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	4a17      	ldr	r2, [pc, #92]	; (80018e8 <ST7735_DrawPixel+0x74>)
 800188a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800188e:	4293      	cmp	r3, r2
 8001890:	da26      	bge.n	80018e0 <ST7735_DrawPixel+0x6c>
 8001892:	88bb      	ldrh	r3, [r7, #4]
 8001894:	4a15      	ldr	r2, [pc, #84]	; (80018ec <ST7735_DrawPixel+0x78>)
 8001896:	f9b2 2000 	ldrsh.w	r2, [r2]
 800189a:	4293      	cmp	r3, r2
 800189c:	da20      	bge.n	80018e0 <ST7735_DrawPixel+0x6c>
        return;

    ST7735_Select();
 800189e:	f7ff fe49 	bl	8001534 <ST7735_Select>

    ST7735_SetAddressWindow(x, y, x+1, y+1);
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	b2d8      	uxtb	r0, r3
 80018a6:	88bb      	ldrh	r3, [r7, #4]
 80018a8:	b2d9      	uxtb	r1, r3
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	3301      	adds	r3, #1
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	88bb      	ldrh	r3, [r7, #4]
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	3301      	adds	r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	f7ff fee7 	bl	800168c <ST7735_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80018be:	887b      	ldrh	r3, [r7, #2]
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	733b      	strb	r3, [r7, #12]
 80018c8:	887b      	ldrh	r3, [r7, #2]
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	737b      	strb	r3, [r7, #13]
    ST7735_WriteData(data, sizeof(data));
 80018ce:	f107 030c 	add.w	r3, r7, #12
 80018d2:	2102      	movs	r1, #2
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7ff fe73 	bl	80015c0 <ST7735_WriteData>

    ST7735_Unselect();
 80018da:	f7ff fe37 	bl	800154c <ST7735_Unselect>
 80018de:	e000      	b.n	80018e2 <ST7735_DrawPixel+0x6e>
        return;
 80018e0:	bf00      	nop
}
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	2000048c 	.word	0x2000048c
 80018ec:	2000048e 	.word	0x2000048e

080018f0 <ST7735_WriteChar>:

void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80018f0:	b082      	sub	sp, #8
 80018f2:	b590      	push	{r4, r7, lr}
 80018f4:	b089      	sub	sp, #36	; 0x24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	637b      	str	r3, [r7, #52]	; 0x34
 80018fa:	4603      	mov	r3, r0
 80018fc:	80fb      	strh	r3, [r7, #6]
 80018fe:	460b      	mov	r3, r1
 8001900:	80bb      	strh	r3, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	b2d8      	uxtb	r0, r3
 800190a:	88bb      	ldrh	r3, [r7, #4]
 800190c:	b2d9      	uxtb	r1, r3
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001916:	4413      	add	r3, r2
 8001918:	b2db      	uxtb	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	b2dc      	uxtb	r4, r3
 800191e:	88bb      	ldrh	r3, [r7, #4]
 8001920:	b2da      	uxtb	r2, r3
 8001922:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001926:	4413      	add	r3, r2
 8001928:	b2db      	uxtb	r3, r3
 800192a:	3b01      	subs	r3, #1
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4622      	mov	r2, r4
 8001930:	f7ff feac 	bl	800168c <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001934:	2300      	movs	r3, #0
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	e043      	b.n	80019c2 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800193a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	3b20      	subs	r3, #32
 8001940:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8001944:	fb01 f303 	mul.w	r3, r1, r3
 8001948:	4619      	mov	r1, r3
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	440b      	add	r3, r1
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8001956:	2300      	movs	r3, #0
 8001958:	61bb      	str	r3, [r7, #24]
 800195a:	e029      	b.n	80019b0 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800195c:	697a      	ldr	r2, [r7, #20]
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d00e      	beq.n	800198a <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800196c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800196e:	0a1b      	lsrs	r3, r3, #8
 8001970:	b29b      	uxth	r3, r3
 8001972:	b2db      	uxtb	r3, r3
 8001974:	743b      	strb	r3, [r7, #16]
 8001976:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001978:	b2db      	uxtb	r3, r3
 800197a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800197c:	f107 0310 	add.w	r3, r7, #16
 8001980:	2102      	movs	r1, #2
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff fe1c 	bl	80015c0 <ST7735_WriteData>
 8001988:	e00f      	b.n	80019aa <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800198a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800198e:	0a1b      	lsrs	r3, r3, #8
 8001990:	b29b      	uxth	r3, r3
 8001992:	b2db      	uxtb	r3, r3
 8001994:	733b      	strb	r3, [r7, #12]
 8001996:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800199a:	b2db      	uxtb	r3, r3
 800199c:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 800199e:	f107 030c 	add.w	r3, r7, #12
 80019a2:	2102      	movs	r1, #2
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7ff fe0b 	bl	80015c0 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	3301      	adds	r3, #1
 80019ae:	61bb      	str	r3, [r7, #24]
 80019b0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80019b4:	461a      	mov	r2, r3
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d3cf      	bcc.n	800195c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	3301      	adds	r3, #1
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80019c6:	461a      	mov	r2, r3
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d3b5      	bcc.n	800193a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
 80019d2:	3724      	adds	r7, #36	; 0x24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80019da:	b002      	add	sp, #8
 80019dc:	4770      	bx	lr
	...

080019e0 <ST7735_WriteString>:

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80019e0:	b082      	sub	sp, #8
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b086      	sub	sp, #24
 80019e6:	af04      	add	r7, sp, #16
 80019e8:	603a      	str	r2, [r7, #0]
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	4603      	mov	r3, r0
 80019ee:	80fb      	strh	r3, [r7, #6]
 80019f0:	460b      	mov	r3, r1
 80019f2:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 80019f4:	f7ff fd9e 	bl	8001534 <ST7735_Select>

    while(*str) {
 80019f8:	e033      	b.n	8001a62 <ST7735_WriteString+0x82>
        if(x + font.width >= _width) {
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	7d3a      	ldrb	r2, [r7, #20]
 80019fe:	4413      	add	r3, r2
 8001a00:	4a1f      	ldr	r2, [pc, #124]	; (8001a80 <ST7735_WriteString+0xa0>)
 8001a02:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a06:	4293      	cmp	r3, r2
 8001a08:	db16      	blt.n	8001a38 <ST7735_WriteString+0x58>
            x = 0;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001a0e:	7d7b      	ldrb	r3, [r7, #21]
 8001a10:	b29a      	uxth	r2, r3
 8001a12:	88bb      	ldrh	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= _height) {
 8001a18:	88bb      	ldrh	r3, [r7, #4]
 8001a1a:	7d7a      	ldrb	r2, [r7, #21]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	4a19      	ldr	r2, [pc, #100]	; (8001a84 <ST7735_WriteString+0xa4>)
 8001a20:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a24:	4293      	cmp	r3, r2
 8001a26:	da21      	bge.n	8001a6c <ST7735_WriteString+0x8c>
                break;
            }

            if(*str == ' ') {
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b20      	cmp	r3, #32
 8001a2e:	d103      	bne.n	8001a38 <ST7735_WriteString+0x58>
                // skip spaces in the beginning of the new line
                str++;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	3301      	adds	r3, #1
 8001a34:	603b      	str	r3, [r7, #0]
                continue;
 8001a36:	e014      	b.n	8001a62 <ST7735_WriteString+0x82>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	781a      	ldrb	r2, [r3, #0]
 8001a3c:	88b9      	ldrh	r1, [r7, #4]
 8001a3e:	88f8      	ldrh	r0, [r7, #6]
 8001a40:	8c3b      	ldrh	r3, [r7, #32]
 8001a42:	9302      	str	r3, [sp, #8]
 8001a44:	8bbb      	ldrh	r3, [r7, #28]
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f7ff ff4f 	bl	80018f0 <ST7735_WriteChar>
        x += font.width;
 8001a52:	7d3b      	ldrb	r3, [r7, #20]
 8001a54:	b29a      	uxth	r2, r3
 8001a56:	88fb      	ldrh	r3, [r7, #6]
 8001a58:	4413      	add	r3, r2
 8001a5a:	80fb      	strh	r3, [r7, #6]
        str++;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1c7      	bne.n	80019fa <ST7735_WriteString+0x1a>
 8001a6a:	e000      	b.n	8001a6e <ST7735_WriteString+0x8e>
                break;
 8001a6c:	bf00      	nop
    }

    ST7735_Unselect();
 8001a6e:	f7ff fd6d 	bl	800154c <ST7735_Unselect>
}
 8001a72:	bf00      	nop
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001a7c:	b002      	add	sp, #8
 8001a7e:	4770      	bx	lr
 8001a80:	2000048c 	.word	0x2000048c
 8001a84:	2000048e 	.word	0x2000048e

08001a88 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4604      	mov	r4, r0
 8001a90:	4608      	mov	r0, r1
 8001a92:	4611      	mov	r1, r2
 8001a94:	461a      	mov	r2, r3
 8001a96:	4623      	mov	r3, r4
 8001a98:	80fb      	strh	r3, [r7, #6]
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	80bb      	strh	r3, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	807b      	strh	r3, [r7, #2]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8001aa6:	88fb      	ldrh	r3, [r7, #6]
 8001aa8:	4a38      	ldr	r2, [pc, #224]	; (8001b8c <ST7735_FillRectangle+0x104>)
 8001aaa:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	da67      	bge.n	8001b82 <ST7735_FillRectangle+0xfa>
 8001ab2:	88bb      	ldrh	r3, [r7, #4]
 8001ab4:	4a36      	ldr	r2, [pc, #216]	; (8001b90 <ST7735_FillRectangle+0x108>)
 8001ab6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001aba:	4293      	cmp	r3, r2
 8001abc:	da61      	bge.n	8001b82 <ST7735_FillRectangle+0xfa>
    if((x + w - 1) >= _width) w = _width - x;
 8001abe:	88fa      	ldrh	r2, [r7, #6]
 8001ac0:	887b      	ldrh	r3, [r7, #2]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	4a31      	ldr	r2, [pc, #196]	; (8001b8c <ST7735_FillRectangle+0x104>)
 8001ac6:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001aca:	4293      	cmp	r3, r2
 8001acc:	dd06      	ble.n	8001adc <ST7735_FillRectangle+0x54>
 8001ace:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <ST7735_FillRectangle+0x104>)
 8001ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	88fb      	ldrh	r3, [r7, #6]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= _height) h = _height - y;
 8001adc:	88ba      	ldrh	r2, [r7, #4]
 8001ade:	883b      	ldrh	r3, [r7, #0]
 8001ae0:	4413      	add	r3, r2
 8001ae2:	4a2b      	ldr	r2, [pc, #172]	; (8001b90 <ST7735_FillRectangle+0x108>)
 8001ae4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	dd06      	ble.n	8001afa <ST7735_FillRectangle+0x72>
 8001aec:	4b28      	ldr	r3, [pc, #160]	; (8001b90 <ST7735_FillRectangle+0x108>)
 8001aee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	88bb      	ldrh	r3, [r7, #4]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8001afa:	f7ff fd1b 	bl	8001534 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001afe:	88fb      	ldrh	r3, [r7, #6]
 8001b00:	b2d8      	uxtb	r0, r3
 8001b02:	88bb      	ldrh	r3, [r7, #4]
 8001b04:	b2d9      	uxtb	r1, r3
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	887b      	ldrh	r3, [r7, #2]
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	4413      	add	r3, r2
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b2dc      	uxtb	r4, r3
 8001b16:	88bb      	ldrh	r3, [r7, #4]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	883b      	ldrh	r3, [r7, #0]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	4413      	add	r3, r2
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	3b01      	subs	r3, #1
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	4622      	mov	r2, r4
 8001b28:	f7ff fdb0 	bl	800168c <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001b2c:	8c3b      	ldrh	r3, [r7, #32]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	b29b      	uxth	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	733b      	strb	r3, [r7, #12]
 8001b36:	8c3b      	ldrh	r3, [r7, #32]
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(DC_PORT, DC_PIN, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b42:	4814      	ldr	r0, [pc, #80]	; (8001b94 <ST7735_FillRectangle+0x10c>)
 8001b44:	f004 fb44 	bl	80061d0 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001b48:	883b      	ldrh	r3, [r7, #0]
 8001b4a:	80bb      	strh	r3, [r7, #4]
 8001b4c:	e013      	b.n	8001b76 <ST7735_FillRectangle+0xee>
        for(x = w; x > 0; x--) {
 8001b4e:	887b      	ldrh	r3, [r7, #2]
 8001b50:	80fb      	strh	r3, [r7, #6]
 8001b52:	e00a      	b.n	8001b6a <ST7735_FillRectangle+0xe2>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001b54:	f107 010c 	add.w	r1, r7, #12
 8001b58:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	480e      	ldr	r0, [pc, #56]	; (8001b98 <ST7735_FillRectangle+0x110>)
 8001b60:	f005 f84b 	bl	8006bfa <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001b64:	88fb      	ldrh	r3, [r7, #6]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	80fb      	strh	r3, [r7, #6]
 8001b6a:	88fb      	ldrh	r3, [r7, #6]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f1      	bne.n	8001b54 <ST7735_FillRectangle+0xcc>
    for(y = h; y > 0; y--) {
 8001b70:	88bb      	ldrh	r3, [r7, #4]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	80bb      	strh	r3, [r7, #4]
 8001b76:	88bb      	ldrh	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1e8      	bne.n	8001b4e <ST7735_FillRectangle+0xc6>
        }
    }

    ST7735_Unselect();
 8001b7c:	f7ff fce6 	bl	800154c <ST7735_Unselect>
 8001b80:	e000      	b.n	8001b84 <ST7735_FillRectangle+0xfc>
    if((x >= _width) || (y >= _height)) return;
 8001b82:	bf00      	nop
}
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd90      	pop	{r4, r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	2000048c 	.word	0x2000048c
 8001b90:	2000048e 	.word	0x2000048e
 8001b94:	40020400 	.word	0x40020400
 8001b98:	20000540 	.word	0x20000540

08001b9c <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4604      	mov	r4, r0
 8001ba4:	4608      	mov	r0, r1
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4623      	mov	r3, r4
 8001bac:	80fb      	strh	r3, [r7, #6]
 8001bae:	4603      	mov	r3, r0
 8001bb0:	80bb      	strh	r3, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	807b      	strh	r3, [r7, #2]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	803b      	strh	r3, [r7, #0]
    if((x >= _width) || (y >= _height)) return;
 8001bba:	88fb      	ldrh	r3, [r7, #6]
 8001bbc:	4a23      	ldr	r2, [pc, #140]	; (8001c4c <ST7735_DrawImage+0xb0>)
 8001bbe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	da3a      	bge.n	8001c3c <ST7735_DrawImage+0xa0>
 8001bc6:	88bb      	ldrh	r3, [r7, #4]
 8001bc8:	4a21      	ldr	r2, [pc, #132]	; (8001c50 <ST7735_DrawImage+0xb4>)
 8001bca:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	da34      	bge.n	8001c3c <ST7735_DrawImage+0xa0>
    if((x + w - 1) >= _width) return;
 8001bd2:	88fa      	ldrh	r2, [r7, #6]
 8001bd4:	887b      	ldrh	r3, [r7, #2]
 8001bd6:	4413      	add	r3, r2
 8001bd8:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <ST7735_DrawImage+0xb0>)
 8001bda:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001bde:	4293      	cmp	r3, r2
 8001be0:	dc2e      	bgt.n	8001c40 <ST7735_DrawImage+0xa4>
    if((y + h - 1) >= _height) return;
 8001be2:	88ba      	ldrh	r2, [r7, #4]
 8001be4:	883b      	ldrh	r3, [r7, #0]
 8001be6:	4413      	add	r3, r2
 8001be8:	4a19      	ldr	r2, [pc, #100]	; (8001c50 <ST7735_DrawImage+0xb4>)
 8001bea:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	dc28      	bgt.n	8001c44 <ST7735_DrawImage+0xa8>

    ST7735_Select();
 8001bf2:	f7ff fc9f 	bl	8001534 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	b2d8      	uxtb	r0, r3
 8001bfa:	88bb      	ldrh	r3, [r7, #4]
 8001bfc:	b2d9      	uxtb	r1, r3
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	b2da      	uxtb	r2, r3
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	b2dc      	uxtb	r4, r3
 8001c0e:	88bb      	ldrh	r3, [r7, #4]
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	883b      	ldrh	r3, [r7, #0]
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	4413      	add	r3, r2
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	4622      	mov	r2, r4
 8001c20:	f7ff fd34 	bl	800168c <ST7735_SetAddressWindow>
    ST7735_WriteData((uint8_t*)data, sizeof(uint16_t)*w*h);
 8001c24:	887b      	ldrh	r3, [r7, #2]
 8001c26:	883a      	ldrh	r2, [r7, #0]
 8001c28:	fb02 f303 	mul.w	r3, r2, r3
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	4619      	mov	r1, r3
 8001c30:	69b8      	ldr	r0, [r7, #24]
 8001c32:	f7ff fcc5 	bl	80015c0 <ST7735_WriteData>
    ST7735_Unselect();
 8001c36:	f7ff fc89 	bl	800154c <ST7735_Unselect>
 8001c3a:	e004      	b.n	8001c46 <ST7735_DrawImage+0xaa>
    if((x >= _width) || (y >= _height)) return;
 8001c3c:	bf00      	nop
 8001c3e:	e002      	b.n	8001c46 <ST7735_DrawImage+0xaa>
    if((x + w - 1) >= _width) return;
 8001c40:	bf00      	nop
 8001c42:	e000      	b.n	8001c46 <ST7735_DrawImage+0xaa>
    if((y + h - 1) >= _height) return;
 8001c44:	bf00      	nop
}
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd90      	pop	{r4, r7, pc}
 8001c4c:	2000048c 	.word	0x2000048c
 8001c50:	2000048e 	.word	0x2000048e

08001c54 <indicator>:
		  0x0000, 0x0000, 0x0000, 0x1d05, 0x0000, 0x0000, 0x0000
};


void indicator(_Bool a)
	{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af02      	add	r7, sp, #8
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
		if(flag_punkt == 1)
 8001c5e:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <indicator+0x13c>)
 8001c60:	f993 3000 	ldrsb.w	r3, [r3]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d11f      	bne.n	8001ca8 <indicator+0x54>
		{
			ST7735_DrawImage(3, 16, 7, 10, Strel); // движение указателя
 8001c68:	4b4a      	ldr	r3, [pc, #296]	; (8001d94 <indicator+0x140>)
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	230a      	movs	r3, #10
 8001c6e:	2207      	movs	r2, #7
 8001c70:	2110      	movs	r1, #16
 8001c72:	2003      	movs	r0, #3
 8001c74:	f7ff ff92 	bl	8001b9c <ST7735_DrawImage>
			ST7735_FillRectangle(3, 28, 7, 10, BLACK);
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	230a      	movs	r3, #10
 8001c7e:	2207      	movs	r2, #7
 8001c80:	211c      	movs	r1, #28
 8001c82:	2003      	movs	r0, #3
 8001c84:	f7ff ff00 	bl	8001a88 <ST7735_FillRectangle>
			ST7735_FillRectangle(3, 40, 7, 10, BLACK);
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	230a      	movs	r3, #10
 8001c8e:	2207      	movs	r2, #7
 8001c90:	2128      	movs	r1, #40	; 0x28
 8001c92:	2003      	movs	r0, #3
 8001c94:	f7ff fef8 	bl	8001a88 <ST7735_FillRectangle>
			ST7735_FillRectangle(3, 52, 7, 10, BLACK);
 8001c98:	2300      	movs	r3, #0
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	230a      	movs	r3, #10
 8001c9e:	2207      	movs	r2, #7
 8001ca0:	2134      	movs	r1, #52	; 0x34
 8001ca2:	2003      	movs	r0, #3
 8001ca4:	f7ff fef0 	bl	8001a88 <ST7735_FillRectangle>
		}
		if(flag_punkt == 2)
 8001ca8:	4b39      	ldr	r3, [pc, #228]	; (8001d90 <indicator+0x13c>)
 8001caa:	f993 3000 	ldrsb.w	r3, [r3]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d11f      	bne.n	8001cf2 <indicator+0x9e>
		{
			ST7735_FillRectangle(3, 16, 7, 10, BLACK);
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	9300      	str	r3, [sp, #0]
 8001cb6:	230a      	movs	r3, #10
 8001cb8:	2207      	movs	r2, #7
 8001cba:	2110      	movs	r1, #16
 8001cbc:	2003      	movs	r0, #3
 8001cbe:	f7ff fee3 	bl	8001a88 <ST7735_FillRectangle>
			ST7735_DrawImage(3, 28, 7, 10, Strel);
 8001cc2:	4b34      	ldr	r3, [pc, #208]	; (8001d94 <indicator+0x140>)
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	230a      	movs	r3, #10
 8001cc8:	2207      	movs	r2, #7
 8001cca:	211c      	movs	r1, #28
 8001ccc:	2003      	movs	r0, #3
 8001cce:	f7ff ff65 	bl	8001b9c <ST7735_DrawImage>
			ST7735_FillRectangle(3, 40, 7, 10, BLACK);
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	230a      	movs	r3, #10
 8001cd8:	2207      	movs	r2, #7
 8001cda:	2128      	movs	r1, #40	; 0x28
 8001cdc:	2003      	movs	r0, #3
 8001cde:	f7ff fed3 	bl	8001a88 <ST7735_FillRectangle>
			ST7735_FillRectangle(3, 52, 7, 10, BLACK);
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	230a      	movs	r3, #10
 8001ce8:	2207      	movs	r2, #7
 8001cea:	2134      	movs	r1, #52	; 0x34
 8001cec:	2003      	movs	r0, #3
 8001cee:	f7ff fecb 	bl	8001a88 <ST7735_FillRectangle>
		}
		if(flag_punkt == 3)
 8001cf2:	4b27      	ldr	r3, [pc, #156]	; (8001d90 <indicator+0x13c>)
 8001cf4:	f993 3000 	ldrsb.w	r3, [r3]
 8001cf8:	2b03      	cmp	r3, #3
 8001cfa:	d11f      	bne.n	8001d3c <indicator+0xe8>
		{
			ST7735_FillRectangle(3, 16, 7, 10, BLACK);
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	230a      	movs	r3, #10
 8001d02:	2207      	movs	r2, #7
 8001d04:	2110      	movs	r1, #16
 8001d06:	2003      	movs	r0, #3
 8001d08:	f7ff febe 	bl	8001a88 <ST7735_FillRectangle>
			ST7735_FillRectangle(3, 28, 7, 10, BLACK);
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	230a      	movs	r3, #10
 8001d12:	2207      	movs	r2, #7
 8001d14:	211c      	movs	r1, #28
 8001d16:	2003      	movs	r0, #3
 8001d18:	f7ff feb6 	bl	8001a88 <ST7735_FillRectangle>
			ST7735_DrawImage(3, 40, 7, 10, Strel);
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <indicator+0x140>)
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	230a      	movs	r3, #10
 8001d22:	2207      	movs	r2, #7
 8001d24:	2128      	movs	r1, #40	; 0x28
 8001d26:	2003      	movs	r0, #3
 8001d28:	f7ff ff38 	bl	8001b9c <ST7735_DrawImage>
			ST7735_FillRectangle(3, 52, 7, 10, BLACK);
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	9300      	str	r3, [sp, #0]
 8001d30:	230a      	movs	r3, #10
 8001d32:	2207      	movs	r2, #7
 8001d34:	2134      	movs	r1, #52	; 0x34
 8001d36:	2003      	movs	r0, #3
 8001d38:	f7ff fea6 	bl	8001a88 <ST7735_FillRectangle>
		}
		if(flag_punkt == 4)
 8001d3c:	4b14      	ldr	r3, [pc, #80]	; (8001d90 <indicator+0x13c>)
 8001d3e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d11f      	bne.n	8001d86 <indicator+0x132>
		{
			ST7735_FillRectangle(3, 16, 7, 10, BLACK);
 8001d46:	2300      	movs	r3, #0
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	230a      	movs	r3, #10
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	2110      	movs	r1, #16
 8001d50:	2003      	movs	r0, #3
 8001d52:	f7ff fe99 	bl	8001a88 <ST7735_FillRectangle>
			ST7735_FillRectangle(3, 28, 7, 10, BLACK);
 8001d56:	2300      	movs	r3, #0
 8001d58:	9300      	str	r3, [sp, #0]
 8001d5a:	230a      	movs	r3, #10
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	211c      	movs	r1, #28
 8001d60:	2003      	movs	r0, #3
 8001d62:	f7ff fe91 	bl	8001a88 <ST7735_FillRectangle>
			ST7735_FillRectangle(3, 40, 7, 10, BLACK);
 8001d66:	2300      	movs	r3, #0
 8001d68:	9300      	str	r3, [sp, #0]
 8001d6a:	230a      	movs	r3, #10
 8001d6c:	2207      	movs	r2, #7
 8001d6e:	2128      	movs	r1, #40	; 0x28
 8001d70:	2003      	movs	r0, #3
 8001d72:	f7ff fe89 	bl	8001a88 <ST7735_FillRectangle>
			ST7735_DrawImage(3, 52, 7, 10, Strel);
 8001d76:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <indicator+0x140>)
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	230a      	movs	r3, #10
 8001d7c:	2207      	movs	r2, #7
 8001d7e:	2134      	movs	r1, #52	; 0x34
 8001d80:	2003      	movs	r0, #3
 8001d82:	f7ff ff0b 	bl	8001b9c <ST7735_DrawImage>
		}
	}
 8001d86:	bf00      	nop
 8001d88:	3708      	adds	r7, #8
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	2000000a 	.word	0x2000000a
 8001d94:	200001f4 	.word	0x200001f4

08001d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d9c:	b0d7      	sub	sp, #348	; 0x15c
 8001d9e:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001da0:	f002 fe1a 	bl	80049d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001da4:	f001 fa40 	bl	8003228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da8:	f001 fcde 	bl	8003768 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dac:	f001 fcbc 	bl	8003728 <MX_DMA_Init>
  MX_ADC1_Init();
 8001db0:	f001 faa2 	bl	80032f8 <MX_ADC1_Init>
  MX_TIM9_Init();
 8001db4:	f001 fbca 	bl	800354c <MX_TIM9_Init>
  MX_SPI1_Init();
 8001db8:	f001 fb0e 	bl	80033d8 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001dbc:	f007 fc64 	bl	8009688 <MX_FATFS_Init>
  MX_SPI3_Init();
 8001dc0:	f001 fb40 	bl	8003444 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8001dc4:	f001 fc86 	bl	80036d4 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8001dc8:	f001 fb72 	bl	80034b0 <MX_TIM4_Init>
  MX_TIM10_Init();
 8001dcc:	f001 fc10 	bl	80035f0 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001dd0:	f001 fc32 	bl	8003638 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim9);
 8001dd4:	4895      	ldr	r0, [pc, #596]	; (800202c <main+0x294>)
 8001dd6:	f005 fc27 	bl	8007628 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8001dda:	4895      	ldr	r0, [pc, #596]	; (8002030 <main+0x298>)
 8001ddc:	f005 fc24 	bl	8007628 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim10);
 8001de0:	4894      	ldr	r0, [pc, #592]	; (8002034 <main+0x29c>)
 8001de2:	f005 fc21 	bl	8007628 <HAL_TIM_Base_Start_IT>
  FATFS_UnLinkDriver(USERPath);
  */
  //////////////////////////////////////////////////	////////////////////////////


  ST7735_Init(0);
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7ff fc98 	bl	800171c <ST7735_Init>


  HAL_TIM_PWM_Start_IT(&htim9, TIM_CHANNEL_1);
 8001dec:	2100      	movs	r1, #0
 8001dee:	488f      	ldr	r0, [pc, #572]	; (800202c <main+0x294>)
 8001df0:	f005 fccc 	bl	800778c <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim9, TIM_CHANNEL_2);
 8001df4:	2104      	movs	r1, #4
 8001df6:	488d      	ldr	r0, [pc, #564]	; (800202c <main+0x294>)
 8001df8:	f005 fcc8 	bl	800778c <HAL_TIM_PWM_Start_IT>

  HAL_TIM_PWM_Start_IT(&htim11, TIM_CHANNEL_1);
 8001dfc:	2100      	movs	r1, #0
 8001dfe:	488e      	ldr	r0, [pc, #568]	; (8002038 <main+0x2a0>)
 8001e00:	f005 fcc4 	bl	800778c <HAL_TIM_PWM_Start_IT>
  TIM11->CCR1 = 65535;
 8001e04:	4b8d      	ldr	r3, [pc, #564]	; (800203c <main+0x2a4>)
 8001e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e0a:	635a      	str	r2, [r3, #52]	; 0x34
  sost = TIM11->CCR1;
 8001e0c:	4b8b      	ldr	r3, [pc, #556]	; (800203c <main+0x2a4>)
 8001e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4b8b      	ldr	r3, [pc, #556]	; (8002040 <main+0x2a8>)
 8001e14:	701a      	strb	r2, [r3, #0]
  pers = 100;
 8001e16:	4b8b      	ldr	r3, [pc, #556]	; (8002044 <main+0x2ac>)
 8001e18:	2264      	movs	r2, #100	; 0x64
 8001e1a:	701a      	strb	r2, [r3, #0]

  //HAL_ADC_Start_IT(&hadc1); //отключил потому что не нужен так как не используем прерывания
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &data, 3);
 8001e1c:	2203      	movs	r2, #3
 8001e1e:	498a      	ldr	r1, [pc, #552]	; (8002048 <main+0x2b0>)
 8001e20:	488a      	ldr	r0, [pc, #552]	; (800204c <main+0x2b4>)
 8001e22:	f002 ff71 	bl	8004d08 <HAL_ADC_Start_DMA>

  HAL_UART_Receive_IT(&huart1, (uint8_t*) &transmit, sizeof(transmit));
 8001e26:	221c      	movs	r2, #28
 8001e28:	4989      	ldr	r1, [pc, #548]	; (8002050 <main+0x2b8>)
 8001e2a:	488a      	ldr	r0, [pc, #552]	; (8002054 <main+0x2bc>)
 8001e2c:	f006 fc93 	bl	8008756 <HAL_UART_Receive_IT>
  TIM9->CCR1 = 0;
 8001e30:	4b89      	ldr	r3, [pc, #548]	; (8002058 <main+0x2c0>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	635a      	str	r2, [r3, #52]	; 0x34
  TIM9->CCR2 = 0;
 8001e36:	4b88      	ldr	r3, [pc, #544]	; (8002058 <main+0x2c0>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	639a      	str	r2, [r3, #56]	; 0x38

  ST7735_SetRotation(3);
 8001e3c:	2003      	movs	r0, #3
 8001e3e:	f7ff fc99 	bl	8001774 <ST7735_SetRotation>
  fillScreen(BLACK);
 8001e42:	2000      	movs	r0, #0
 8001e44:	f7ff fb5c 	bl	8001500 <fillScreen>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET); // Включаем радиомодуль SV610
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e4e:	4883      	ldr	r0, [pc, #524]	; (800205c <main+0x2c4>)
 8001e50:	f004 f9be 	bl	80061d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);	// Ставим радиомодуль SV610 сразу в режим работы
 8001e54:	2201      	movs	r2, #1
 8001e56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001e5a:	4881      	ldr	r0, [pc, #516]	; (8002060 <main+0x2c8>)
 8001e5c:	f004 f9b8 	bl	80061d0 <HAL_GPIO_WritePin>

  HAL_Delay(500);
 8001e60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001e64:	f002 fe2a 	bl	8004abc <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char BUF[2];
	  sprintf(BUF, "%d", resive_OK);
 8001e68:	4b7e      	ldr	r3, [pc, #504]	; (8002064 <main+0x2cc>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001e70:	497d      	ldr	r1, [pc, #500]	; (8002068 <main+0x2d0>)
 8001e72:	4618      	mov	r0, r3
 8001e74:	f00b f948 	bl	800d108 <siprintf>
	  ST7735_WriteString(140, 90, BUF, Font_7x10, RED, BLACK);
 8001e78:	4b7c      	ldr	r3, [pc, #496]	; (800206c <main+0x2d4>)
 8001e7a:	f507 718c 	add.w	r1, r7, #280	; 0x118
 8001e7e:	2200      	movs	r2, #0
 8001e80:	9202      	str	r2, [sp, #8]
 8001e82:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001e86:	9201      	str	r2, [sp, #4]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	9200      	str	r2, [sp, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	460a      	mov	r2, r1
 8001e90:	215a      	movs	r1, #90	; 0x5a
 8001e92:	208c      	movs	r0, #140	; 0x8c
 8001e94:	f7ff fda4 	bl	80019e0 <ST7735_WriteString>
	  if(resive_OK < 10) fillRect(147, 90, 7, 10, BLACK);
 8001e98:	4b72      	ldr	r3, [pc, #456]	; (8002064 <main+0x2cc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b09      	cmp	r3, #9
 8001e9e:	dc07      	bgt.n	8001eb0 <main+0x118>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	9300      	str	r3, [sp, #0]
 8001ea4:	230a      	movs	r3, #10
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	215a      	movs	r1, #90	; 0x5a
 8001eaa:	2093      	movs	r0, #147	; 0x93
 8001eac:	f7ff f869 	bl	8000f82 <fillRect>
	  //////////////////////////////////////////////////////////////////////////////
	  if (resive_OK == 99) resive_OK = 0;
 8001eb0:	4b6c      	ldr	r3, [pc, #432]	; (8002064 <main+0x2cc>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	2b63      	cmp	r3, #99	; 0x63
 8001eb6:	d102      	bne.n	8001ebe <main+0x126>
 8001eb8:	4b6a      	ldr	r3, [pc, #424]	; (8002064 <main+0x2cc>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
	  temp[resive_OK] = transmit.temperature;
 8001ebe:	4b69      	ldr	r3, [pc, #420]	; (8002064 <main+0x2cc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a63      	ldr	r2, [pc, #396]	; (8002050 <main+0x2b8>)
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	496a      	ldr	r1, [pc, #424]	; (8002070 <main+0x2d8>)
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	601a      	str	r2, [r3, #0]
	  press[resive_OK] = ((transmit.pressure / 1000)*100)/100;
 8001ece:	4b60      	ldr	r3, [pc, #384]	; (8002050 <main+0x2b8>)
 8001ed0:	ed93 7a01 	vldr	s14, [r3, #4]
 8001ed4:	eddf 6a67 	vldr	s13, [pc, #412]	; 8002074 <main+0x2dc>
 8001ed8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001edc:	ed9f 7a66 	vldr	s14, [pc, #408]	; 8002078 <main+0x2e0>
 8001ee0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ee4:	4b5f      	ldr	r3, [pc, #380]	; (8002064 <main+0x2cc>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	eddf 6a63 	vldr	s13, [pc, #396]	; 8002078 <main+0x2e0>
 8001eec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ef0:	4a62      	ldr	r2, [pc, #392]	; (800207c <main+0x2e4>)
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	4413      	add	r3, r2
 8001ef6:	edc3 7a00 	vstr	s15, [r3]
	  alt[resive_OK] = transmit.altitude;
 8001efa:	4b5a      	ldr	r3, [pc, #360]	; (8002064 <main+0x2cc>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a54      	ldr	r2, [pc, #336]	; (8002050 <main+0x2b8>)
 8001f00:	6892      	ldr	r2, [r2, #8]
 8001f02:	495f      	ldr	r1, [pc, #380]	; (8002080 <main+0x2e8>)
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	601a      	str	r2, [r3, #0]
	  gyro_x[resive_OK] = transmit.gyroX;//
 8001f0a:	4b56      	ldr	r3, [pc, #344]	; (8002064 <main+0x2cc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a50      	ldr	r2, [pc, #320]	; (8002050 <main+0x2b8>)
 8001f10:	68d2      	ldr	r2, [r2, #12]
 8001f12:	495c      	ldr	r1, [pc, #368]	; (8002084 <main+0x2ec>)
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	440b      	add	r3, r1
 8001f18:	601a      	str	r2, [r3, #0]
	  accX[resive_OK] = transmit.accX;
 8001f1a:	4b52      	ldr	r3, [pc, #328]	; (8002064 <main+0x2cc>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a4c      	ldr	r2, [pc, #304]	; (8002050 <main+0x2b8>)
 8001f20:	6912      	ldr	r2, [r2, #16]
 8001f22:	4959      	ldr	r1, [pc, #356]	; (8002088 <main+0x2f0>)
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	440b      	add	r3, r1
 8001f28:	601a      	str	r2, [r3, #0]
	  accY[resive_OK] = transmit.accY;
 8001f2a:	4b4e      	ldr	r3, [pc, #312]	; (8002064 <main+0x2cc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a48      	ldr	r2, [pc, #288]	; (8002050 <main+0x2b8>)
 8001f30:	6952      	ldr	r2, [r2, #20]
 8001f32:	4956      	ldr	r1, [pc, #344]	; (800208c <main+0x2f4>)
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	440b      	add	r3, r1
 8001f38:	601a      	str	r2, [r3, #0]
	  accZ[resive_OK] = transmit.accZ;
 8001f3a:	4b4a      	ldr	r3, [pc, #296]	; (8002064 <main+0x2cc>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a44      	ldr	r2, [pc, #272]	; (8002050 <main+0x2b8>)
 8001f40:	6992      	ldr	r2, [r2, #24]
 8001f42:	4953      	ldr	r1, [pc, #332]	; (8002090 <main+0x2f8>)
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	440b      	add	r3, r1
 8001f48:	601a      	str	r2, [r3, #0]
	  num[resive_OK] = resive_OK;
 8001f4a:	4b46      	ldr	r3, [pc, #280]	; (8002064 <main+0x2cc>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a45      	ldr	r2, [pc, #276]	; (8002064 <main+0x2cc>)
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	4950      	ldr	r1, [pc, #320]	; (8002094 <main+0x2fc>)
 8001f54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  //////////////////////////////////////////////////////////////////////////////
	  ////////////////////Функция записи данных на флешку////////////////////////////////
	  if((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_SET)) flag_but2 = 1;
 8001f58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f5c:	483f      	ldr	r0, [pc, #252]	; (800205c <main+0x2c4>)
 8001f5e:	f004 f91f 	bl	80061a0 <HAL_GPIO_ReadPin>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d102      	bne.n	8001f6e <main+0x1d6>
 8001f68:	4b4b      	ldr	r3, [pc, #300]	; (8002098 <main+0x300>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET)
 8001f6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f72:	483a      	ldr	r0, [pc, #232]	; (800205c <main+0x2c4>)
 8001f74:	f004 f914 	bl	80061a0 <HAL_GPIO_ReadPin>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f040 8178 	bne.w	8002270 <main+0x4d8>
	  {
		  if(disk_init == false) ST7735_WriteString(2, 110, "No SD-Card...        ", Font_7x10, RED, BLACK);
 8001f80:	4b46      	ldr	r3, [pc, #280]	; (800209c <main+0x304>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	f083 0301 	eor.w	r3, r3, #1
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00e      	beq.n	8001fac <main+0x214>
 8001f8e:	4b37      	ldr	r3, [pc, #220]	; (800206c <main+0x2d4>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	9202      	str	r2, [sp, #8]
 8001f94:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8001f98:	9201      	str	r2, [sp, #4]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	9200      	str	r2, [sp, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a3f      	ldr	r2, [pc, #252]	; (80020a0 <main+0x308>)
 8001fa2:	216e      	movs	r1, #110	; 0x6e
 8001fa4:	2002      	movs	r0, #2
 8001fa6:	f7ff fd1b 	bl	80019e0 <ST7735_WriteString>
 8001faa:	e15d      	b.n	8002268 <main+0x4d0>
		  else if(disk_init == true)
 8001fac:	4b3b      	ldr	r3, [pc, #236]	; (800209c <main+0x304>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 8159 	beq.w	8002268 <main+0x4d0>
		  {
			  disk_initialize(SDFatFs.drv);
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	; (80020a4 <main+0x30c>)
 8001fb8:	785b      	ldrb	r3, [r3, #1]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f007 fc92 	bl	80098e4 <disk_initialize>
			  disk_init = false;
 8001fc0:	4b36      	ldr	r3, [pc, #216]	; (800209c <main+0x304>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]

			  if(f_mount(&SDFatFs, (TCHAR const*)USERPath, 0) != FR_OK)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	4937      	ldr	r1, [pc, #220]	; (80020a8 <main+0x310>)
 8001fca:	4836      	ldr	r0, [pc, #216]	; (80020a4 <main+0x30c>)
 8001fcc:	f009 fe4a 	bl	800bc64 <f_mount>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f040 8148 	bne.w	8002268 <main+0x4d0>
			  {
				  //Error_Handler();	// комментируем хендлеры чтобы при включении и одновременном отустствии карты дисплей не зависал
			  }
			  else
			  {
				  if(f_open(&MyFile, "result.txt", FA_CREATE_ALWAYS|FA_WRITE) != FR_OK) // FA_OPEN_ALWAYS|FA_WRITE
 8001fd8:	220a      	movs	r2, #10
 8001fda:	4934      	ldr	r1, [pc, #208]	; (80020ac <main+0x314>)
 8001fdc:	4834      	ldr	r0, [pc, #208]	; (80020b0 <main+0x318>)
 8001fde:	f009 fe87 	bl	800bcf0 <f_open>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f040 813f 	bne.w	8002268 <main+0x4d0>
				  {
					  //Error_Handler();	// комментируем хендлеры чтобы при включении и одновременном отустствии карты дисплей не зависал
				  }
				  else
				  {
					  res = f_write(&MyFile, " #       Temp            Press           Alt             Gyro          Acc_x           Acc_y           Acc_z\r\n", 112, (void*)&byteswritten);//146
 8001fea:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <main+0x31c>)
 8001fec:	2270      	movs	r2, #112	; 0x70
 8001fee:	4932      	ldr	r1, [pc, #200]	; (80020b8 <main+0x320>)
 8001ff0:	482f      	ldr	r0, [pc, #188]	; (80020b0 <main+0x318>)
 8001ff2:	f00a f849 	bl	800c088 <f_write>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b30      	ldr	r3, [pc, #192]	; (80020bc <main+0x324>)
 8001ffc:	701a      	strb	r2, [r3, #0]
					  b = f_size(&MyFile);
 8001ffe:	4b2c      	ldr	r3, [pc, #176]	; (80020b0 <main+0x318>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	b2da      	uxtb	r2, r3
 8002004:	4b2e      	ldr	r3, [pc, #184]	; (80020c0 <main+0x328>)
 8002006:	701a      	strb	r2, [r3, #0]
					  ST7735_WriteString(2, 110, "Recording begin...  ", Font_7x10, GREEN, BLACK);
 8002008:	4b18      	ldr	r3, [pc, #96]	; (800206c <main+0x2d4>)
 800200a:	2200      	movs	r2, #0
 800200c:	9202      	str	r2, [sp, #8]
 800200e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002012:	9201      	str	r2, [sp, #4]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	9200      	str	r2, [sp, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a2a      	ldr	r2, [pc, #168]	; (80020c4 <main+0x32c>)
 800201c:	216e      	movs	r1, #110	; 0x6e
 800201e:	2002      	movs	r0, #2
 8002020:	f7ff fcde 	bl	80019e0 <ST7735_WriteString>
					  for(int i = 0; i < resive_OK; i++)
 8002024:	2300      	movs	r3, #0
 8002026:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800202a:	e0e2      	b.n	80021f2 <main+0x45a>
 800202c:	20000638 	.word	0x20000638
 8002030:	200005f0 	.word	0x200005f0
 8002034:	20000680 	.word	0x20000680
 8002038:	200006c8 	.word	0x200006c8
 800203c:	40014800 	.word	0x40014800
 8002040:	20001424 	.word	0x20001424
 8002044:	20001425 	.word	0x20001425
 8002048:	2000075c 	.word	0x2000075c
 800204c:	20000498 	.word	0x20000498
 8002050:	20001408 	.word	0x20001408
 8002054:	20000710 	.word	0x20000710
 8002058:	40014000 	.word	0x40014000
 800205c:	40020000 	.word	0x40020000
 8002060:	40020400 	.word	0x40020400
 8002064:	20000010 	.word	0x20000010
 8002068:	0800f610 	.word	0x0800f610
 800206c:	20000000 	.word	0x20000000
 8002070:	20000770 	.word	0x20000770
 8002074:	447a0000 	.word	0x447a0000
 8002078:	42c80000 	.word	0x42c80000
 800207c:	20000900 	.word	0x20000900
 8002080:	20000a90 	.word	0x20000a90
 8002084:	20000c20 	.word	0x20000c20
 8002088:	20000db0 	.word	0x20000db0
 800208c:	20000f40 	.word	0x20000f40
 8002090:	200010d0 	.word	0x200010d0
 8002094:	20001260 	.word	0x20001260
 8002098:	200013f1 	.word	0x200013f1
 800209c:	20000008 	.word	0x20000008
 80020a0:	0800f614 	.word	0x0800f614
 80020a4:	2000142c 	.word	0x2000142c
 80020a8:	200034a8 	.word	0x200034a8
 80020ac:	0800f62c 	.word	0x0800f62c
 80020b0:	20002464 	.word	0x20002464
 80020b4:	20001428 	.word	0x20001428
 80020b8:	0800f638 	.word	0x0800f638
 80020bc:	20001426 	.word	0x20001426
 80020c0:	20003494 	.word	0x20003494
 80020c4:	0800f6a8 	.word	0x0800f6a8
					  {
						  char DaTa[163];
						  sprintf(DaTa, "№%d\t Temp: %.2f\t Press: %.2f\t Alt: %.2f\t Gyro: %.2f\t Acc_x: %.2f\t Acc_y: %.2f\t Acc_z: %.2f", num[i], temp[i], press[i], alt[i], gyro_x[i], accX[i], accY[i], accZ[i]);
 80020c8:	4aa9      	ldr	r2, [pc, #676]	; (8002370 <main+0x5d8>)
 80020ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80020ce:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80020d2:	4aa8      	ldr	r2, [pc, #672]	; (8002374 <main+0x5dc>)
 80020d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	4413      	add	r3, r2
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fa3a 	bl	8000558 <__aeabi_f2d>
 80020e4:	4680      	mov	r8, r0
 80020e6:	4689      	mov	r9, r1
 80020e8:	4aa3      	ldr	r2, [pc, #652]	; (8002378 <main+0x5e0>)
 80020ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fa2f 	bl	8000558 <__aeabi_f2d>
 80020fa:	4682      	mov	sl, r0
 80020fc:	468b      	mov	fp, r1
 80020fe:	4a9f      	ldr	r2, [pc, #636]	; (800237c <main+0x5e4>)
 8002100:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7fe fa24 	bl	8000558 <__aeabi_f2d>
 8002110:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002114:	4a9a      	ldr	r2, [pc, #616]	; (8002380 <main+0x5e8>)
 8002116:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fa19 	bl	8000558 <__aeabi_f2d>
 8002126:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800212a:	4a96      	ldr	r2, [pc, #600]	; (8002384 <main+0x5ec>)
 800212c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	4413      	add	r3, r2
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe fa0e 	bl	8000558 <__aeabi_f2d>
 800213c:	e9c7 0100 	strd	r0, r1, [r7]
 8002140:	4a91      	ldr	r2, [pc, #580]	; (8002388 <main+0x5f0>)
 8002142:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f7fe fa03 	bl	8000558 <__aeabi_f2d>
 8002152:	4604      	mov	r4, r0
 8002154:	460d      	mov	r5, r1
 8002156:	4a8d      	ldr	r2, [pc, #564]	; (800238c <main+0x5f4>)
 8002158:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe f9f8 	bl	8000558 <__aeabi_f2d>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	f107 0018 	add.w	r0, r7, #24
 8002170:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8002174:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 8002178:	ed97 7b00 	vldr	d7, [r7]
 800217c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8002180:	ed97 7b02 	vldr	d7, [r7, #8]
 8002184:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002188:	ed97 7b04 	vldr	d7, [r7, #16]
 800218c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002190:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8002194:	e9cd 8900 	strd	r8, r9, [sp]
 8002198:	4632      	mov	r2, r6
 800219a:	497d      	ldr	r1, [pc, #500]	; (8002390 <main+0x5f8>)
 800219c:	f00a ffb4 	bl	800d108 <siprintf>
						  res = f_write(&MyFile, DaTa, 98, (void*)&byteswritten);
 80021a0:	f107 0118 	add.w	r1, r7, #24
 80021a4:	4b7b      	ldr	r3, [pc, #492]	; (8002394 <main+0x5fc>)
 80021a6:	2262      	movs	r2, #98	; 0x62
 80021a8:	487b      	ldr	r0, [pc, #492]	; (8002398 <main+0x600>)
 80021aa:	f009 ff6d 	bl	800c088 <f_write>
 80021ae:	4603      	mov	r3, r0
 80021b0:	461a      	mov	r2, r3
 80021b2:	4b7a      	ldr	r3, [pc, #488]	; (800239c <main+0x604>)
 80021b4:	701a      	strb	r2, [r3, #0]
						  b = f_size(&MyFile);
 80021b6:	4b78      	ldr	r3, [pc, #480]	; (8002398 <main+0x600>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	b2da      	uxtb	r2, r3
 80021bc:	4b78      	ldr	r3, [pc, #480]	; (80023a0 <main+0x608>)
 80021be:	701a      	strb	r2, [r3, #0]

						  char dat[4] = "\r\n";
 80021c0:	f640 230d 	movw	r3, #2573	; 0xa0d
 80021c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
						  res = f_write(&MyFile, dat, 4, (void*)&byteswritten);
 80021c8:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80021cc:	4b71      	ldr	r3, [pc, #452]	; (8002394 <main+0x5fc>)
 80021ce:	2204      	movs	r2, #4
 80021d0:	4871      	ldr	r0, [pc, #452]	; (8002398 <main+0x600>)
 80021d2:	f009 ff59 	bl	800c088 <f_write>
 80021d6:	4603      	mov	r3, r0
 80021d8:	461a      	mov	r2, r3
 80021da:	4b70      	ldr	r3, [pc, #448]	; (800239c <main+0x604>)
 80021dc:	701a      	strb	r2, [r3, #0]
						  b = f_size(&MyFile);
 80021de:	4b6e      	ldr	r3, [pc, #440]	; (8002398 <main+0x600>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	4b6e      	ldr	r3, [pc, #440]	; (80023a0 <main+0x608>)
 80021e6:	701a      	strb	r2, [r3, #0]
					  for(int i = 0; i < resive_OK; i++)
 80021e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80021ec:	3301      	adds	r3, #1
 80021ee:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80021f2:	4b6c      	ldr	r3, [pc, #432]	; (80023a4 <main+0x60c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80021fa:	429a      	cmp	r2, r3
 80021fc:	f6ff af64 	blt.w	80020c8 <main+0x330>
					  }
					  if((byteswritten == 0) || (res != FR_OK))
 8002200:	4b64      	ldr	r3, [pc, #400]	; (8002394 <main+0x5fc>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <main+0x478>
 8002208:	4b64      	ldr	r3, [pc, #400]	; (800239c <main+0x604>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <main+0x47c>
					  {
						  Error_Handler();
 8002210:	f001 fd62 	bl	8003cd8 <Error_Handler>
					  }
					  char Num_Resive[20];
					  sprintf(Num_Resive, " Full data byte:%d",resive_OK);
 8002214:	4b63      	ldr	r3, [pc, #396]	; (80023a4 <main+0x60c>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800221c:	4962      	ldr	r1, [pc, #392]	; (80023a8 <main+0x610>)
 800221e:	4618      	mov	r0, r3
 8002220:	f00a ff72 	bl	800d108 <siprintf>
					  res = f_write(&MyFile, Num_Resive, 18, (void*)&byteswritten);
 8002224:	f507 7182 	add.w	r1, r7, #260	; 0x104
 8002228:	4b5a      	ldr	r3, [pc, #360]	; (8002394 <main+0x5fc>)
 800222a:	2212      	movs	r2, #18
 800222c:	485a      	ldr	r0, [pc, #360]	; (8002398 <main+0x600>)
 800222e:	f009 ff2b 	bl	800c088 <f_write>
 8002232:	4603      	mov	r3, r0
 8002234:	461a      	mov	r2, r3
 8002236:	4b59      	ldr	r3, [pc, #356]	; (800239c <main+0x604>)
 8002238:	701a      	strb	r2, [r3, #0]

					  f_close(&MyFile);
 800223a:	4857      	ldr	r0, [pc, #348]	; (8002398 <main+0x600>)
 800223c:	f00a f936 	bl	800c4ac <f_close>
					  FATFS_UnLinkDriver(USERPath);
 8002240:	485a      	ldr	r0, [pc, #360]	; (80023ac <main+0x614>)
 8002242:	f00a f9f1 	bl	800c628 <FATFS_UnLinkDriver>
					  ST7735_WriteString(2, 110, "Recording completed.", Font_7x10, RED, BLACK);
 8002246:	4b5a      	ldr	r3, [pc, #360]	; (80023b0 <main+0x618>)
 8002248:	2200      	movs	r2, #0
 800224a:	9202      	str	r2, [sp, #8]
 800224c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002250:	9201      	str	r2, [sp, #4]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	9200      	str	r2, [sp, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a56      	ldr	r2, [pc, #344]	; (80023b4 <main+0x61c>)
 800225a:	216e      	movs	r1, #110	; 0x6e
 800225c:	2002      	movs	r0, #2
 800225e:	f7ff fbbf 	bl	80019e0 <ST7735_WriteString>
					  resive_OK = 0;
 8002262:	4b50      	ldr	r3, [pc, #320]	; (80023a4 <main+0x60c>)
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
				  }
			  }
		  }
			  flag_but = 1;
 8002268:	4b53      	ldr	r3, [pc, #332]	; (80023b8 <main+0x620>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
 800226e:	e002      	b.n	8002276 <main+0x4de>
		  }
	  else flag_but = 0;
 8002270:	4b51      	ldr	r3, [pc, #324]	; (80023b8 <main+0x620>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
	  if(flag_but == 1 && flag_but2 == 1)
 8002276:	4b50      	ldr	r3, [pc, #320]	; (80023b8 <main+0x620>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d006      	beq.n	800228c <main+0x4f4>
 800227e:	4b4f      	ldr	r3, [pc, #316]	; (80023bc <main+0x624>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d002      	beq.n	800228c <main+0x4f4>
	  {
		  flag_but2 = 0;
 8002286:	4b4d      	ldr	r3, [pc, #308]	; (80023bc <main+0x624>)
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
	  }
	  //////////////////////////////////////////////////////////////////////////////
	  //////////////////////////////////////////////////////////////////////////////
	  HAL_TIM_PWM_Start_IT(&htim9, TIM_CHANNEL_1);
 800228c:	2100      	movs	r1, #0
 800228e:	484c      	ldr	r0, [pc, #304]	; (80023c0 <main+0x628>)
 8002290:	f005 fa7c 	bl	800778c <HAL_TIM_PWM_Start_IT>
	  HAL_TIM_PWM_Start_IT(&htim9, TIM_CHANNEL_2);
 8002294:	2104      	movs	r1, #4
 8002296:	484a      	ldr	r0, [pc, #296]	; (80023c0 <main+0x628>)
 8002298:	f005 fa78 	bl	800778c <HAL_TIM_PWM_Start_IT>

	  HAL_ADC_Start_IT(&hadc1);
 800229c:	4849      	ldr	r0, [pc, #292]	; (80023c4 <main+0x62c>)
 800229e:	f002 fc75 	bl	8004b8c <HAL_ADC_Start_IT>

	  HAL_UART_Receive_IT(&huart1, (uint8_t*) &transmit, sizeof(transmit));
 80022a2:	221c      	movs	r2, #28
 80022a4:	4948      	ldr	r1, [pc, #288]	; (80023c8 <main+0x630>)
 80022a6:	4849      	ldr	r0, [pc, #292]	; (80023cc <main+0x634>)
 80022a8:	f006 fa55 	bl	8008756 <HAL_UART_Receive_IT>

	  //////////////////////////////////////////////////////////////////////////////
	  if(flag_Menu == true)//---------------------------------------------MENU
 80022ac:	4b48      	ldr	r3, [pc, #288]	; (80023d0 <main+0x638>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 81ef 	beq.w	8002694 <main+0x8fc>
	  {
		  drawRect(0, 0, 160, 128, WHITE);	// оконтовка
 80022b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022ba:	9300      	str	r3, [sp, #0]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	22a0      	movs	r2, #160	; 0xa0
 80022c0:	2100      	movs	r1, #0
 80022c2:	2000      	movs	r0, #0
 80022c4:	f7ff f8da 	bl	800147c <drawRect>
		  ST7735_WriteString(2, 2, "Menu", Font_7x10, GREEN, BLACK);
 80022c8:	4b39      	ldr	r3, [pc, #228]	; (80023b0 <main+0x618>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	9202      	str	r2, [sp, #8]
 80022ce:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80022d2:	9201      	str	r2, [sp, #4]
 80022d4:	685a      	ldr	r2, [r3, #4]
 80022d6:	9200      	str	r2, [sp, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a3e      	ldr	r2, [pc, #248]	; (80023d4 <main+0x63c>)
 80022dc:	2102      	movs	r1, #2
 80022de:	2002      	movs	r0, #2
 80022e0:	f7ff fb7e 	bl	80019e0 <ST7735_WriteString>
		  //////////////////////////////////////////////////////////////////////////////
		  ///////// Вывод заряда аккумулятора
		  drawRect(140, 1, 18, 9, WHITE); // заряд аккумулятора
 80022e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2309      	movs	r3, #9
 80022ec:	2212      	movs	r2, #18
 80022ee:	2101      	movs	r1, #1
 80022f0:	208c      	movs	r0, #140	; 0x8c
 80022f2:	f7ff f8c3 	bl	800147c <drawRect>
		  // замеряет заряд на аккумулятора на 4.2 вольта в пределе от 2.5 до 3.3, так как на 2.5 STM ОТРУБАЕТСЯ

		  /////////// Зарядка//////////////
		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET))
 80022f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022fa:	4837      	ldr	r0, [pc, #220]	; (80023d8 <main+0x640>)
 80022fc:	f003 ff50 	bl	80061a0 <HAL_GPIO_ReadPin>
 8002300:	4603      	mov	r3, r0
 8002302:	2b01      	cmp	r3, #1
 8002304:	d108      	bne.n	8002318 <main+0x580>
		  {
			  ST7735_DrawImage(141, 11, 15, 16, charger);
 8002306:	4b35      	ldr	r3, [pc, #212]	; (80023dc <main+0x644>)
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	2310      	movs	r3, #16
 800230c:	220f      	movs	r2, #15
 800230e:	210b      	movs	r1, #11
 8002310:	208d      	movs	r0, #141	; 0x8d
 8002312:	f7ff fc43 	bl	8001b9c <ST7735_DrawImage>
 8002316:	e007      	b.n	8002328 <main+0x590>
		  }
		  else fillRect(141, 11, 15, 16, BLACK);
 8002318:	2300      	movs	r3, #0
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2310      	movs	r3, #16
 800231e:	220f      	movs	r2, #15
 8002320:	210b      	movs	r1, #11
 8002322:	208d      	movs	r0, #141	; 0x8d
 8002324:	f7fe fe2d 	bl	8000f82 <fillRect>

		  if(Batdata <= 128 && Batdata >= 110)
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <main+0x648>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b80      	cmp	r3, #128	; 0x80
 800232e:	dc0d      	bgt.n	800234c <main+0x5b4>
 8002330:	4b2b      	ldr	r3, [pc, #172]	; (80023e0 <main+0x648>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b6d      	cmp	r3, #109	; 0x6d
 8002336:	dd09      	ble.n	800234c <main+0x5b4>
		  {
			  fillRect(141, 2, 16, 7, GREEN);
 8002338:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800233c:	9300      	str	r3, [sp, #0]
 800233e:	2307      	movs	r3, #7
 8002340:	2210      	movs	r2, #16
 8002342:	2102      	movs	r1, #2
 8002344:	208d      	movs	r0, #141	; 0x8d
 8002346:	f7fe fe1c 	bl	8000f82 <fillRect>
 800234a:	e05c      	b.n	8002406 <main+0x66e>
		  }
		  else if(Batdata <= 109 && Batdata >= 101)
 800234c:	4b24      	ldr	r3, [pc, #144]	; (80023e0 <main+0x648>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b6d      	cmp	r3, #109	; 0x6d
 8002352:	dc47      	bgt.n	80023e4 <main+0x64c>
 8002354:	4b22      	ldr	r3, [pc, #136]	; (80023e0 <main+0x648>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b64      	cmp	r3, #100	; 0x64
 800235a:	dd43      	ble.n	80023e4 <main+0x64c>
		  {
			  fillRect(141, 2, 16, 7, YELLOW);
 800235c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	2307      	movs	r3, #7
 8002364:	2210      	movs	r2, #16
 8002366:	2102      	movs	r1, #2
 8002368:	208d      	movs	r0, #141	; 0x8d
 800236a:	f7fe fe0a 	bl	8000f82 <fillRect>
 800236e:	e04a      	b.n	8002406 <main+0x66e>
 8002370:	20001260 	.word	0x20001260
 8002374:	20000770 	.word	0x20000770
 8002378:	20000900 	.word	0x20000900
 800237c:	20000a90 	.word	0x20000a90
 8002380:	20000c20 	.word	0x20000c20
 8002384:	20000db0 	.word	0x20000db0
 8002388:	20000f40 	.word	0x20000f40
 800238c:	200010d0 	.word	0x200010d0
 8002390:	0800f6c0 	.word	0x0800f6c0
 8002394:	20001428 	.word	0x20001428
 8002398:	20002464 	.word	0x20002464
 800239c:	20001426 	.word	0x20001426
 80023a0:	20003494 	.word	0x20003494
 80023a4:	20000010 	.word	0x20000010
 80023a8:	0800f720 	.word	0x0800f720
 80023ac:	200034a8 	.word	0x200034a8
 80023b0:	20000000 	.word	0x20000000
 80023b4:	0800f734 	.word	0x0800f734
 80023b8:	200013f0 	.word	0x200013f0
 80023bc:	200013f1 	.word	0x200013f1
 80023c0:	20000638 	.word	0x20000638
 80023c4:	20000498 	.word	0x20000498
 80023c8:	20001408 	.word	0x20001408
 80023cc:	20000710 	.word	0x20000710
 80023d0:	20000009 	.word	0x20000009
 80023d4:	0800f74c 	.word	0x0800f74c
 80023d8:	40020400 	.word	0x40020400
 80023dc:	20000014 	.word	0x20000014
 80023e0:	20001400 	.word	0x20001400
		  }
		  else if(Batdata <= 100 && Batdata >= 90)
 80023e4:	4b80      	ldr	r3, [pc, #512]	; (80025e8 <main+0x850>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b64      	cmp	r3, #100	; 0x64
 80023ea:	dc0c      	bgt.n	8002406 <main+0x66e>
 80023ec:	4b7e      	ldr	r3, [pc, #504]	; (80025e8 <main+0x850>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	2b59      	cmp	r3, #89	; 0x59
 80023f2:	dd08      	ble.n	8002406 <main+0x66e>
		  {
			  fillRect(141, 2, 16, 7, RED);
 80023f4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023f8:	9300      	str	r3, [sp, #0]
 80023fa:	2307      	movs	r3, #7
 80023fc:	2210      	movs	r2, #16
 80023fe:	2102      	movs	r1, #2
 8002400:	208d      	movs	r0, #141	; 0x8d
 8002402:	f7fe fdbe 	bl	8000f82 <fillRect>
		  }
		  //////////////////////////////////////////////////////////////////////////////
		  indicator(flag_punkt);
 8002406:	4b79      	ldr	r3, [pc, #484]	; (80025ec <main+0x854>)
 8002408:	f993 3000 	ldrsb.w	r3, [r3]
 800240c:	2b00      	cmp	r3, #0
 800240e:	bf14      	ite	ne
 8002410:	2301      	movne	r3, #1
 8002412:	2300      	moveq	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fc1c 	bl	8001c54 <indicator>
		  //////////////////////////////////////////////////////////////////////////////
		  ST7735_WriteString(10, 16, ":Result", Font_7x10, BLUE, BLACK);
 800241c:	4b74      	ldr	r3, [pc, #464]	; (80025f0 <main+0x858>)
 800241e:	2200      	movs	r2, #0
 8002420:	9202      	str	r2, [sp, #8]
 8002422:	221f      	movs	r2, #31
 8002424:	9201      	str	r2, [sp, #4]
 8002426:	685a      	ldr	r2, [r3, #4]
 8002428:	9200      	str	r2, [sp, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a71      	ldr	r2, [pc, #452]	; (80025f4 <main+0x85c>)
 800242e:	2110      	movs	r1, #16
 8002430:	200a      	movs	r0, #10
 8002432:	f7ff fad5 	bl	80019e0 <ST7735_WriteString>
		  if(flag_punkt == 1)//-----------------Result
 8002436:	4b6d      	ldr	r3, [pc, #436]	; (80025ec <main+0x854>)
 8002438:	f993 3000 	ldrsb.w	r3, [r3]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d10b      	bne.n	8002458 <main+0x6c0>
		  {
			  flag_1 = true;
 8002440:	4b6d      	ldr	r3, [pc, #436]	; (80025f8 <main+0x860>)
 8002442:	2201      	movs	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
			  flag_2 = false;
 8002446:	4b6d      	ldr	r3, [pc, #436]	; (80025fc <main+0x864>)
 8002448:	2200      	movs	r2, #0
 800244a:	701a      	strb	r2, [r3, #0]
			  flag_3 = false;
 800244c:	4b6c      	ldr	r3, [pc, #432]	; (8002600 <main+0x868>)
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
			  flag_4 = false;
 8002452:	4b6c      	ldr	r3, [pc, #432]	; (8002604 <main+0x86c>)
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
			 // ResultOne = true;
		  }
		  ST7735_WriteString(10, 28, ":Grafic", Font_7x10, RED, BLACK);
 8002458:	4b65      	ldr	r3, [pc, #404]	; (80025f0 <main+0x858>)
 800245a:	2200      	movs	r2, #0
 800245c:	9202      	str	r2, [sp, #8]
 800245e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002462:	9201      	str	r2, [sp, #4]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	9200      	str	r2, [sp, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a67      	ldr	r2, [pc, #412]	; (8002608 <main+0x870>)
 800246c:	211c      	movs	r1, #28
 800246e:	200a      	movs	r0, #10
 8002470:	f7ff fab6 	bl	80019e0 <ST7735_WriteString>
		  if(flag_punkt == 2) //----------------Grafic
 8002474:	4b5d      	ldr	r3, [pc, #372]	; (80025ec <main+0x854>)
 8002476:	f993 3000 	ldrsb.w	r3, [r3]
 800247a:	2b02      	cmp	r3, #2
 800247c:	d10e      	bne.n	800249c <main+0x704>
		  {
			  flag_1 = false;
 800247e:	4b5e      	ldr	r3, [pc, #376]	; (80025f8 <main+0x860>)
 8002480:	2200      	movs	r2, #0
 8002482:	701a      	strb	r2, [r3, #0]
			  flag_2 = true;
 8002484:	4b5d      	ldr	r3, [pc, #372]	; (80025fc <main+0x864>)
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]
			  flag_3 = false;
 800248a:	4b5d      	ldr	r3, [pc, #372]	; (8002600 <main+0x868>)
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
			  flag_4 = false;
 8002490:	4b5c      	ldr	r3, [pc, #368]	; (8002604 <main+0x86c>)
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
			  GraficOne = true;
 8002496:	4b5d      	ldr	r3, [pc, #372]	; (800260c <main+0x874>)
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
		  }
		  ST7735_WriteString(10, 40, ":Status", Font_7x10, GREEN, BLACK);
 800249c:	4b54      	ldr	r3, [pc, #336]	; (80025f0 <main+0x858>)
 800249e:	2200      	movs	r2, #0
 80024a0:	9202      	str	r2, [sp, #8]
 80024a2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80024a6:	9201      	str	r2, [sp, #4]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	9200      	str	r2, [sp, #0]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a58      	ldr	r2, [pc, #352]	; (8002610 <main+0x878>)
 80024b0:	2128      	movs	r1, #40	; 0x28
 80024b2:	200a      	movs	r0, #10
 80024b4:	f7ff fa94 	bl	80019e0 <ST7735_WriteString>
		  if(flag_punkt == 3)//-----------------STATUS
 80024b8:	4b4c      	ldr	r3, [pc, #304]	; (80025ec <main+0x854>)
 80024ba:	f993 3000 	ldrsb.w	r3, [r3]
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d10b      	bne.n	80024da <main+0x742>
		  {
			  flag_1 = false;
 80024c2:	4b4d      	ldr	r3, [pc, #308]	; (80025f8 <main+0x860>)
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
			  flag_2 = false;
 80024c8:	4b4c      	ldr	r3, [pc, #304]	; (80025fc <main+0x864>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
			  flag_3 = true;
 80024ce:	4b4c      	ldr	r3, [pc, #304]	; (8002600 <main+0x868>)
 80024d0:	2201      	movs	r2, #1
 80024d2:	701a      	strb	r2, [r3, #0]
			  flag_4 = false;
 80024d4:	4b4b      	ldr	r3, [pc, #300]	; (8002604 <main+0x86c>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
		  }
		  ST7735_WriteString(10, 52, ":Setings", Font_7x10, BLUE, BLACK);
 80024da:	4b45      	ldr	r3, [pc, #276]	; (80025f0 <main+0x858>)
 80024dc:	2200      	movs	r2, #0
 80024de:	9202      	str	r2, [sp, #8]
 80024e0:	221f      	movs	r2, #31
 80024e2:	9201      	str	r2, [sp, #4]
 80024e4:	685a      	ldr	r2, [r3, #4]
 80024e6:	9200      	str	r2, [sp, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a4a      	ldr	r2, [pc, #296]	; (8002614 <main+0x87c>)
 80024ec:	2134      	movs	r1, #52	; 0x34
 80024ee:	200a      	movs	r0, #10
 80024f0:	f7ff fa76 	bl	80019e0 <ST7735_WriteString>
		  if(flag_punkt == 4)//-----------------------SETINGS
 80024f4:	4b3d      	ldr	r3, [pc, #244]	; (80025ec <main+0x854>)
 80024f6:	f993 3000 	ldrsb.w	r3, [r3]
 80024fa:	2b04      	cmp	r3, #4
 80024fc:	d10b      	bne.n	8002516 <main+0x77e>
		  {
			  flag_1 = false;
 80024fe:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <main+0x860>)
 8002500:	2200      	movs	r2, #0
 8002502:	701a      	strb	r2, [r3, #0]
			  flag_2 = false;
 8002504:	4b3d      	ldr	r3, [pc, #244]	; (80025fc <main+0x864>)
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
			  flag_3 = false;
 800250a:	4b3d      	ldr	r3, [pc, #244]	; (8002600 <main+0x868>)
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]
			  flag_4 = true;
 8002510:	4b3c      	ldr	r3, [pc, #240]	; (8002604 <main+0x86c>)
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
		  }
		  //////////////////////////////////////////////////////////////////////////////

		  // вывод значений с АЦП джойстика и заряда аккумулятора
		  char buf20[4];
		  sprintf(buf20, "%.2f", u[0]);
 8002516:	4b40      	ldr	r3, [pc, #256]	; (8002618 <main+0x880>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f7fe f81c 	bl	8000558 <__aeabi_f2d>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8002528:	493c      	ldr	r1, [pc, #240]	; (800261c <main+0x884>)
 800252a:	f00a fded 	bl	800d108 <siprintf>
		  //ST7735_WriteString(2, 20, buf20, Font_7x10, GREEN, BLACK);

		  char buf10[4];
		  sprintf(buf10, "%.2f", u[1]);
 800252e:	4b3a      	ldr	r3, [pc, #232]	; (8002618 <main+0x880>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe f810 	bl	8000558 <__aeabi_f2d>
 8002538:	4602      	mov	r2, r0
 800253a:	460b      	mov	r3, r1
 800253c:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 8002540:	4936      	ldr	r1, [pc, #216]	; (800261c <main+0x884>)
 8002542:	f00a fde1 	bl	800d108 <siprintf>
		  //ST7735_WriteString(2, 40, buf10, Font_7x10, GREEN, BLACK);

		  char buf30[4];
		  u[2] = ((float)data[2])*3.3/256;
 8002546:	4b36      	ldr	r3, [pc, #216]	; (8002620 <main+0x888>)
 8002548:	889b      	ldrh	r3, [r3, #4]
 800254a:	b29b      	uxth	r3, r3
 800254c:	ee07 3a90 	vmov	s15, r3
 8002550:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002554:	ee17 0a90 	vmov	r0, s15
 8002558:	f7fd fffe 	bl	8000558 <__aeabi_f2d>
 800255c:	a320      	add	r3, pc, #128	; (adr r3, 80025e0 <main+0x848>)
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	f7fe f851 	bl	8000608 <__aeabi_dmul>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <main+0x88c>)
 8002574:	f7fe f972 	bl	800085c <__aeabi_ddiv>
 8002578:	4602      	mov	r2, r0
 800257a:	460b      	mov	r3, r1
 800257c:	4610      	mov	r0, r2
 800257e:	4619      	mov	r1, r3
 8002580:	f7fe fb1a 	bl	8000bb8 <__aeabi_d2f>
 8002584:	4603      	mov	r3, r0
 8002586:	4a24      	ldr	r2, [pc, #144]	; (8002618 <main+0x880>)
 8002588:	6093      	str	r3, [r2, #8]
		  sprintf(buf30, "%.2f", u[2]);
 800258a:	4b23      	ldr	r3, [pc, #140]	; (8002618 <main+0x880>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fd ffe2 	bl	8000558 <__aeabi_f2d>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	f107 00f4 	add.w	r0, r7, #244	; 0xf4
 800259c:	491f      	ldr	r1, [pc, #124]	; (800261c <main+0x884>)
 800259e:	f00a fdb3 	bl	800d108 <siprintf>
		  //ST7735_WriteString(80, 40, buf30, Font_7x10, GREEN, BLACK);	//заряд акума

		  char buf31[4];
		  sprintf(buf31, "%.2f", Batdata);
 80025a2:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <main+0x850>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80025aa:	491c      	ldr	r1, [pc, #112]	; (800261c <main+0x884>)
 80025ac:	4618      	mov	r0, r3
 80025ae:	f00a fdab 	bl	800d108 <siprintf>
		  //ST7735_WriteString(80, 50, buf31, Font_7x10, GREEN, BLACK);
		  ///////////////////////////////////////////////////////////////////////
		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET)) flag_but2 = 1;
 80025b2:	2101      	movs	r1, #1
 80025b4:	481c      	ldr	r0, [pc, #112]	; (8002628 <main+0x890>)
 80025b6:	f003 fdf3 	bl	80061a0 <HAL_GPIO_ReadPin>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d102      	bne.n	80025c6 <main+0x82e>
 80025c0:	4b1a      	ldr	r3, [pc, #104]	; (800262c <main+0x894>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET))
 80025c6:	2101      	movs	r1, #1
 80025c8:	4817      	ldr	r0, [pc, #92]	; (8002628 <main+0x890>)
 80025ca:	f003 fde9 	bl	80061a0 <HAL_GPIO_ReadPin>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d12f      	bne.n	8002634 <main+0x89c>
		  {
			  flag_but = 1;
 80025d4:	4b16      	ldr	r3, [pc, #88]	; (8002630 <main+0x898>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	701a      	strb	r2, [r3, #0]
 80025da:	e02e      	b.n	800263a <main+0x8a2>
 80025dc:	f3af 8000 	nop.w
 80025e0:	66666666 	.word	0x66666666
 80025e4:	400a6666 	.word	0x400a6666
 80025e8:	20001400 	.word	0x20001400
 80025ec:	2000000a 	.word	0x2000000a
 80025f0:	20000000 	.word	0x20000000
 80025f4:	0800f754 	.word	0x0800f754
 80025f8:	20000758 	.word	0x20000758
 80025fc:	20000759 	.word	0x20000759
 8002600:	2000075a 	.word	0x2000075a
 8002604:	2000075b 	.word	0x2000075b
 8002608:	0800f75c 	.word	0x0800f75c
 800260c:	2000000b 	.word	0x2000000b
 8002610:	0800f764 	.word	0x0800f764
 8002614:	0800f76c 	.word	0x0800f76c
 8002618:	20000764 	.word	0x20000764
 800261c:	0800f778 	.word	0x0800f778
 8002620:	2000075c 	.word	0x2000075c
 8002624:	40700000 	.word	0x40700000
 8002628:	40020400 	.word	0x40020400
 800262c:	200013f1 	.word	0x200013f1
 8002630:	200013f0 	.word	0x200013f0
		  }
		  else flag_but = 0;
 8002634:	4b99      	ldr	r3, [pc, #612]	; (800289c <main+0xb04>)
 8002636:	2200      	movs	r2, #0
 8002638:	701a      	strb	r2, [r3, #0]
		  if(flag_but == 1 && flag_but2 == 1)
 800263a:	4b98      	ldr	r3, [pc, #608]	; (800289c <main+0xb04>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d028      	beq.n	8002694 <main+0x8fc>
 8002642:	4b97      	ldr	r3, [pc, #604]	; (80028a0 <main+0xb08>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d024      	beq.n	8002694 <main+0x8fc>
		  {
			  flag_but2 = 0;
 800264a:	4b95      	ldr	r3, [pc, #596]	; (80028a0 <main+0xb08>)
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]

			  flag_Menu = false;
 8002650:	4b94      	ldr	r3, [pc, #592]	; (80028a4 <main+0xb0c>)
 8002652:	2200      	movs	r2, #0
 8002654:	701a      	strb	r2, [r3, #0]
			  if(flag_1 == true)
 8002656:	4b94      	ldr	r3, [pc, #592]	; (80028a8 <main+0xb10>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <main+0x8cc>
			  {
				  flag_Result = true;
 800265e:	4b93      	ldr	r3, [pc, #588]	; (80028ac <main+0xb14>)
 8002660:	2201      	movs	r2, #1
 8002662:	701a      	strb	r2, [r3, #0]
			  }
			  if(flag_2 == true)
 8002664:	4b92      	ldr	r3, [pc, #584]	; (80028b0 <main+0xb18>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <main+0x8da>
			  {
				  flag_Grafic = true;
 800266c:	4b91      	ldr	r3, [pc, #580]	; (80028b4 <main+0xb1c>)
 800266e:	2201      	movs	r2, #1
 8002670:	701a      	strb	r2, [r3, #0]
			  }
			  if(flag_3 == true)
 8002672:	4b91      	ldr	r3, [pc, #580]	; (80028b8 <main+0xb20>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d002      	beq.n	8002680 <main+0x8e8>
			  {
				  flag_Status = true;
 800267a:	4b90      	ldr	r3, [pc, #576]	; (80028bc <main+0xb24>)
 800267c:	2201      	movs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
			  }
			  if(flag_4 == true)
 8002680:	4b8f      	ldr	r3, [pc, #572]	; (80028c0 <main+0xb28>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <main+0x8f6>
			  {
				  flag_Setings = true;
 8002688:	4b8e      	ldr	r3, [pc, #568]	; (80028c4 <main+0xb2c>)
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
			  }
			  fillScreen(BLACK);
 800268e:	2000      	movs	r0, #0
 8002690:	f7fe ff36 	bl	8001500 <fillScreen>
		  }


	  }
	  //////////////////////////////////////////////////////////////////////////////
	  if(flag_Result == true && flag_1  == true) //--------------------------------------------RESULT
 8002694:	4b85      	ldr	r3, [pc, #532]	; (80028ac <main+0xb14>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 8149 	beq.w	8002930 <main+0xb98>
 800269e:	4b82      	ldr	r3, [pc, #520]	; (80028a8 <main+0xb10>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 8144 	beq.w	8002930 <main+0xb98>
	  {
		  HAL_UART_Receive_IT(&huart1, (uint8_t*) &transmit, sizeof(transmit));
 80026a8:	221c      	movs	r2, #28
 80026aa:	4987      	ldr	r1, [pc, #540]	; (80028c8 <main+0xb30>)
 80026ac:	4887      	ldr	r0, [pc, #540]	; (80028cc <main+0xb34>)
 80026ae:	f006 f852 	bl	8008756 <HAL_UART_Receive_IT>
			  ResultOne = false;
			  drawLine(159, 63, 1, 63, YELLOW);
			  xt = 0;
		  }
		  */
		  drawRect(0, 0, 160, 128, WHITE);
 80026b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2380      	movs	r3, #128	; 0x80
 80026ba:	22a0      	movs	r2, #160	; 0xa0
 80026bc:	2100      	movs	r1, #0
 80026be:	2000      	movs	r0, #0
 80026c0:	f7fe fedc 	bl	800147c <drawRect>

		  ST7735_WriteString(2, 2, "Result", Font_7x10, GREEN, BLACK);
 80026c4:	4b82      	ldr	r3, [pc, #520]	; (80028d0 <main+0xb38>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	9202      	str	r2, [sp, #8]
 80026ca:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80026ce:	9201      	str	r2, [sp, #4]
 80026d0:	685a      	ldr	r2, [r3, #4]
 80026d2:	9200      	str	r2, [sp, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a7f      	ldr	r2, [pc, #508]	; (80028d4 <main+0xb3c>)
 80026d8:	2102      	movs	r1, #2
 80026da:	2002      	movs	r0, #2
 80026dc:	f7ff f980 	bl	80019e0 <ST7735_WriteString>
		  //////////////////////////////////////////////////////////////////////////////
		  //температура, давление, высота над уровнем моря
		  char buf1[4];
		  sprintf(buf1, "Temperature:%.2fC", transmit.temperature); // игнорировать!
 80026e0:	4b79      	ldr	r3, [pc, #484]	; (80028c8 <main+0xb30>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f7fd ff37 	bl	8000558 <__aeabi_f2d>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 80026f2:	4979      	ldr	r1, [pc, #484]	; (80028d8 <main+0xb40>)
 80026f4:	f00a fd08 	bl	800d108 <siprintf>
		  ST7735_WriteString(2, 20, buf1, Font_7x10, GREEN, BLACK);
 80026f8:	4b75      	ldr	r3, [pc, #468]	; (80028d0 <main+0xb38>)
 80026fa:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80026fe:	2200      	movs	r2, #0
 8002700:	9202      	str	r2, [sp, #8]
 8002702:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002706:	9201      	str	r2, [sp, #4]
 8002708:	685a      	ldr	r2, [r3, #4]
 800270a:	9200      	str	r2, [sp, #0]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	460a      	mov	r2, r1
 8002710:	2114      	movs	r1, #20
 8002712:	2002      	movs	r0, #2
 8002714:	f7ff f964 	bl	80019e0 <ST7735_WriteString>

		  char buf2[4];
		  sprintf(buf2, "Pressure:   %.2fkPa", transmit.pressure / 1000); // игнорировать!
 8002718:	4b6b      	ldr	r3, [pc, #428]	; (80028c8 <main+0xb30>)
 800271a:	edd3 7a01 	vldr	s15, [r3, #4]
 800271e:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80028dc <main+0xb44>
 8002722:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002726:	ee16 0a90 	vmov	r0, s13
 800272a:	f7fd ff15 	bl	8000558 <__aeabi_f2d>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	f107 00e8 	add.w	r0, r7, #232	; 0xe8
 8002736:	496a      	ldr	r1, [pc, #424]	; (80028e0 <main+0xb48>)
 8002738:	f00a fce6 	bl	800d108 <siprintf>
		  ST7735_WriteString(2, 30, buf2, Font_7x10, GREEN, BLACK);
 800273c:	4b64      	ldr	r3, [pc, #400]	; (80028d0 <main+0xb38>)
 800273e:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 8002742:	2200      	movs	r2, #0
 8002744:	9202      	str	r2, [sp, #8]
 8002746:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800274a:	9201      	str	r2, [sp, #4]
 800274c:	685a      	ldr	r2, [r3, #4]
 800274e:	9200      	str	r2, [sp, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	460a      	mov	r2, r1
 8002754:	211e      	movs	r1, #30
 8002756:	2002      	movs	r0, #2
 8002758:	f7ff f942 	bl	80019e0 <ST7735_WriteString>

		  char buf3[4];
		  sprintf(buf3, "Altitude:   %.2fm", transmit.altitude); // игнорировать!
 800275c:	4b5a      	ldr	r3, [pc, #360]	; (80028c8 <main+0xb30>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	4618      	mov	r0, r3
 8002762:	f7fd fef9 	bl	8000558 <__aeabi_f2d>
 8002766:	4602      	mov	r2, r0
 8002768:	460b      	mov	r3, r1
 800276a:	f107 00e4 	add.w	r0, r7, #228	; 0xe4
 800276e:	495d      	ldr	r1, [pc, #372]	; (80028e4 <main+0xb4c>)
 8002770:	f00a fcca 	bl	800d108 <siprintf>
		  ST7735_WriteString(2, 40, buf3, Font_7x10, GREEN, BLACK);
 8002774:	4b56      	ldr	r3, [pc, #344]	; (80028d0 <main+0xb38>)
 8002776:	f107 01e4 	add.w	r1, r7, #228	; 0xe4
 800277a:	2200      	movs	r2, #0
 800277c:	9202      	str	r2, [sp, #8]
 800277e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002782:	9201      	str	r2, [sp, #4]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	9200      	str	r2, [sp, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	460a      	mov	r2, r1
 800278c:	2128      	movs	r1, #40	; 0x28
 800278e:	2002      	movs	r0, #2
 8002790:	f7ff f926 	bl	80019e0 <ST7735_WriteString>


		  //Г�?РОСКОП X
		  char buf41[4];
		  sprintf(buf41, "Gyro_x: %.2f", transmit.gyroX); // игнорировать!
 8002794:	4b4c      	ldr	r3, [pc, #304]	; (80028c8 <main+0xb30>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4618      	mov	r0, r3
 800279a:	f7fd fedd 	bl	8000558 <__aeabi_f2d>
 800279e:	4602      	mov	r2, r0
 80027a0:	460b      	mov	r3, r1
 80027a2:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80027a6:	4950      	ldr	r1, [pc, #320]	; (80028e8 <main+0xb50>)
 80027a8:	f00a fcae 	bl	800d108 <siprintf>
		  ST7735_WriteString(2, 60, buf41, Font_7x10, BLUE, BLACK);
 80027ac:	4b48      	ldr	r3, [pc, #288]	; (80028d0 <main+0xb38>)
 80027ae:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 80027b2:	2200      	movs	r2, #0
 80027b4:	9202      	str	r2, [sp, #8]
 80027b6:	221f      	movs	r2, #31
 80027b8:	9201      	str	r2, [sp, #4]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	9200      	str	r2, [sp, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	460a      	mov	r2, r1
 80027c2:	213c      	movs	r1, #60	; 0x3c
 80027c4:	2002      	movs	r0, #2
 80027c6:	f7ff f90b 	bl	80019e0 <ST7735_WriteString>
		  //sprintf(buf43, "Gyro_z: %.2f", transmit.gyroZ); // игнорировать!
		  //ST7735_WriteString(2, 80, buf43, Font_7x10, BLUE, BLACK);

		  //УСКОРЕН�?Е X
		  char buf5[4];
		  sprintf(buf5, "Acc_x:%.2f", transmit.accX); // игнорировать!
 80027ca:	4b3f      	ldr	r3, [pc, #252]	; (80028c8 <main+0xb30>)
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fd fec2 	bl	8000558 <__aeabi_f2d>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 80027dc:	4943      	ldr	r1, [pc, #268]	; (80028ec <main+0xb54>)
 80027de:	f00a fc93 	bl	800d108 <siprintf>
		  ST7735_WriteString(2, 90, buf5, Font_7x10, MAGENTA, BLACK);
 80027e2:	4b3b      	ldr	r3, [pc, #236]	; (80028d0 <main+0xb38>)
 80027e4:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 80027e8:	2200      	movs	r2, #0
 80027ea:	9202      	str	r2, [sp, #8]
 80027ec:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80027f0:	9201      	str	r2, [sp, #4]
 80027f2:	685a      	ldr	r2, [r3, #4]
 80027f4:	9200      	str	r2, [sp, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	460a      	mov	r2, r1
 80027fa:	215a      	movs	r1, #90	; 0x5a
 80027fc:	2002      	movs	r0, #2
 80027fe:	f7ff f8ef 	bl	80019e0 <ST7735_WriteString>
		  //УСКОРЕН�?Е Y
		  char buf6[4];
		  sprintf(buf6, "Acc_y:%.2f", transmit.accY); // игнорировать!
 8002802:	4b31      	ldr	r3, [pc, #196]	; (80028c8 <main+0xb30>)
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	4618      	mov	r0, r3
 8002808:	f7fd fea6 	bl	8000558 <__aeabi_f2d>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	f107 00d0 	add.w	r0, r7, #208	; 0xd0
 8002814:	4936      	ldr	r1, [pc, #216]	; (80028f0 <main+0xb58>)
 8002816:	f00a fc77 	bl	800d108 <siprintf>
		  ST7735_WriteString(2, 100, buf6, Font_7x10, MAGENTA, BLACK);
 800281a:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <main+0xb38>)
 800281c:	f107 01d0 	add.w	r1, r7, #208	; 0xd0
 8002820:	2200      	movs	r2, #0
 8002822:	9202      	str	r2, [sp, #8]
 8002824:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002828:	9201      	str	r2, [sp, #4]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	9200      	str	r2, [sp, #0]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	460a      	mov	r2, r1
 8002832:	2164      	movs	r1, #100	; 0x64
 8002834:	2002      	movs	r0, #2
 8002836:	f7ff f8d3 	bl	80019e0 <ST7735_WriteString>
		  //УСКОРЕН�?Е Z
		  char buf7[4];
		  sprintf(buf7, "Acc_z:%.2f", transmit.accZ); // игнорировать!
 800283a:	4b23      	ldr	r3, [pc, #140]	; (80028c8 <main+0xb30>)
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fe8a 	bl	8000558 <__aeabi_f2d>
 8002844:	4602      	mov	r2, r0
 8002846:	460b      	mov	r3, r1
 8002848:	f107 00cc 	add.w	r0, r7, #204	; 0xcc
 800284c:	4929      	ldr	r1, [pc, #164]	; (80028f4 <main+0xb5c>)
 800284e:	f00a fc5b 	bl	800d108 <siprintf>
		  ST7735_WriteString(2, 110, buf7, Font_7x10, MAGENTA, BLACK);
 8002852:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <main+0xb38>)
 8002854:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8002858:	2200      	movs	r2, #0
 800285a:	9202      	str	r2, [sp, #8]
 800285c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002860:	9201      	str	r2, [sp, #4]
 8002862:	685a      	ldr	r2, [r3, #4]
 8002864:	9200      	str	r2, [sp, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	460a      	mov	r2, r1
 800286a:	216e      	movs	r1, #110	; 0x6e
 800286c:	2002      	movs	r0, #2
 800286e:	f7ff f8b7 	bl	80019e0 <ST7735_WriteString>

		  //////////////////////////////////////////////////////////////////////////////
		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET)) flag_but2 = 1;
 8002872:	2101      	movs	r1, #1
 8002874:	4820      	ldr	r0, [pc, #128]	; (80028f8 <main+0xb60>)
 8002876:	f003 fc93 	bl	80061a0 <HAL_GPIO_ReadPin>
 800287a:	4603      	mov	r3, r0
 800287c:	2b01      	cmp	r3, #1
 800287e:	d102      	bne.n	8002886 <main+0xaee>
 8002880:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <main+0xb08>)
 8002882:	2201      	movs	r2, #1
 8002884:	701a      	strb	r2, [r3, #0]
		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET))
 8002886:	2101      	movs	r1, #1
 8002888:	481b      	ldr	r0, [pc, #108]	; (80028f8 <main+0xb60>)
 800288a:	f003 fc89 	bl	80061a0 <HAL_GPIO_ReadPin>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d133      	bne.n	80028fc <main+0xb64>
		  {
			  flag_but = 1;
 8002894:	4b01      	ldr	r3, [pc, #4]	; (800289c <main+0xb04>)
 8002896:	2201      	movs	r2, #1
 8002898:	701a      	strb	r2, [r3, #0]
 800289a:	e032      	b.n	8002902 <main+0xb6a>
 800289c:	200013f0 	.word	0x200013f0
 80028a0:	200013f1 	.word	0x200013f1
 80028a4:	20000009 	.word	0x20000009
 80028a8:	20000758 	.word	0x20000758
 80028ac:	20000754 	.word	0x20000754
 80028b0:	20000759 	.word	0x20000759
 80028b4:	20000755 	.word	0x20000755
 80028b8:	2000075a 	.word	0x2000075a
 80028bc:	20000756 	.word	0x20000756
 80028c0:	2000075b 	.word	0x2000075b
 80028c4:	20000757 	.word	0x20000757
 80028c8:	20001408 	.word	0x20001408
 80028cc:	20000710 	.word	0x20000710
 80028d0:	20000000 	.word	0x20000000
 80028d4:	0800f780 	.word	0x0800f780
 80028d8:	0800f788 	.word	0x0800f788
 80028dc:	447a0000 	.word	0x447a0000
 80028e0:	0800f79c 	.word	0x0800f79c
 80028e4:	0800f7b0 	.word	0x0800f7b0
 80028e8:	0800f7c4 	.word	0x0800f7c4
 80028ec:	0800f7d4 	.word	0x0800f7d4
 80028f0:	0800f7e0 	.word	0x0800f7e0
 80028f4:	0800f7ec 	.word	0x0800f7ec
 80028f8:	40020400 	.word	0x40020400
		  }
		  else flag_but = 0;
 80028fc:	4ba5      	ldr	r3, [pc, #660]	; (8002b94 <main+0xdfc>)
 80028fe:	2200      	movs	r2, #0
 8002900:	701a      	strb	r2, [r3, #0]
		  if(flag_but == 1 && flag_but2 == 1)
 8002902:	4ba4      	ldr	r3, [pc, #656]	; (8002b94 <main+0xdfc>)
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d012      	beq.n	8002930 <main+0xb98>
 800290a:	4ba3      	ldr	r3, [pc, #652]	; (8002b98 <main+0xe00>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00e      	beq.n	8002930 <main+0xb98>
		  {
			  flag_but2 = 0;
 8002912:	4ba1      	ldr	r3, [pc, #644]	; (8002b98 <main+0xe00>)
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]

			  flag_Result = false;
 8002918:	4ba0      	ldr	r3, [pc, #640]	; (8002b9c <main+0xe04>)
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
			  flag_1  = false;
 800291e:	4ba0      	ldr	r3, [pc, #640]	; (8002ba0 <main+0xe08>)
 8002920:	2200      	movs	r2, #0
 8002922:	701a      	strb	r2, [r3, #0]
			  flag_Menu = true;
 8002924:	4b9f      	ldr	r3, [pc, #636]	; (8002ba4 <main+0xe0c>)
 8002926:	2201      	movs	r2, #1
 8002928:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 800292a:	2000      	movs	r0, #0
 800292c:	f7fe fde8 	bl	8001500 <fillScreen>
		  }
		  //////////////////////////////////////////////////////////////////////////////
	  }

	  //////////////////////////////////////////////////////////////////////////////
	  if(flag_Grafic == true && flag_2  == true) //--------------------------------------------GRAFIC
 8002930:	4b9d      	ldr	r3, [pc, #628]	; (8002ba8 <main+0xe10>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	f000 80ae 	beq.w	8002a96 <main+0xcfe>
 800293a:	4b9c      	ldr	r3, [pc, #624]	; (8002bac <main+0xe14>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	f000 80a9 	beq.w	8002a96 <main+0xcfe>
	  {
		  if(GraficOne == true)
 8002944:	4b9a      	ldr	r3, [pc, #616]	; (8002bb0 <main+0xe18>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00e      	beq.n	800296a <main+0xbd2>
		  {
			  GraficOne = false;
 800294c:	4b98      	ldr	r3, [pc, #608]	; (8002bb0 <main+0xe18>)
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
			  drawLine(159, 63, 1, 63, YELLOW);
 8002952:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002956:	9300      	str	r3, [sp, #0]
 8002958:	233f      	movs	r3, #63	; 0x3f
 800295a:	2201      	movs	r2, #1
 800295c:	213f      	movs	r1, #63	; 0x3f
 800295e:	209f      	movs	r0, #159	; 0x9f
 8002960:	f7fe fc2c 	bl	80011bc <drawLine>
			  xt = 0;
 8002964:	4b93      	ldr	r3, [pc, #588]	; (8002bb4 <main+0xe1c>)
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
		  }
		  drawRect(0, 0, 160, 128, WHITE);
 800296a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2380      	movs	r3, #128	; 0x80
 8002972:	22a0      	movs	r2, #160	; 0xa0
 8002974:	2100      	movs	r1, #0
 8002976:	2000      	movs	r0, #0
 8002978:	f7fe fd80 	bl	800147c <drawRect>
		  ST7735_WriteString(2, 2, "Grafic", Font_7x10, GREEN, BLACK);
 800297c:	4b8e      	ldr	r3, [pc, #568]	; (8002bb8 <main+0xe20>)
 800297e:	2200      	movs	r2, #0
 8002980:	9202      	str	r2, [sp, #8]
 8002982:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002986:	9201      	str	r2, [sp, #4]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	9200      	str	r2, [sp, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a8b      	ldr	r2, [pc, #556]	; (8002bbc <main+0xe24>)
 8002990:	2102      	movs	r1, #2
 8002992:	2002      	movs	r0, #2
 8002994:	f7ff f824 	bl	80019e0 <ST7735_WriteString>
		  if(xt == 158)	// Обновление экрана при максимальной длине графика
 8002998:	4b86      	ldr	r3, [pc, #536]	; (8002bb4 <main+0xe1c>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b9e      	cmp	r3, #158	; 0x9e
 800299e:	d12a      	bne.n	80029f6 <main+0xc5e>
		  {
			  xt = 0;
 80029a0:	4b84      	ldr	r3, [pc, #528]	; (8002bb4 <main+0xe1c>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	601a      	str	r2, [r3, #0]
			  ST7735_FillRectangle(1, 1, 158, 126, BLACK);
 80029a6:	2300      	movs	r3, #0
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	237e      	movs	r3, #126	; 0x7e
 80029ac:	229e      	movs	r2, #158	; 0x9e
 80029ae:	2101      	movs	r1, #1
 80029b0:	2001      	movs	r0, #1
 80029b2:	f7ff f869 	bl	8001a88 <ST7735_FillRectangle>
			  drawLine(159, 63, 1, 63, YELLOW);
 80029b6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	233f      	movs	r3, #63	; 0x3f
 80029be:	2201      	movs	r2, #1
 80029c0:	213f      	movs	r1, #63	; 0x3f
 80029c2:	209f      	movs	r0, #159	; 0x9f
 80029c4:	f7fe fbfa 	bl	80011bc <drawLine>
			  drawRect(0, 0, 160, 128, WHITE);
 80029c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	22a0      	movs	r2, #160	; 0xa0
 80029d2:	2100      	movs	r1, #0
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7fe fd51 	bl	800147c <drawRect>
			  ST7735_WriteString(2, 2, "Grafic", Font_7x10, GREEN, BLACK);
 80029da:	4b77      	ldr	r3, [pc, #476]	; (8002bb8 <main+0xe20>)
 80029dc:	2200      	movs	r2, #0
 80029de:	9202      	str	r2, [sp, #8]
 80029e0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80029e4:	9201      	str	r2, [sp, #4]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	9200      	str	r2, [sp, #0]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a73      	ldr	r2, [pc, #460]	; (8002bbc <main+0xe24>)
 80029ee:	2102      	movs	r1, #2
 80029f0:	2002      	movs	r0, #2
 80029f2:	f7fe fff5 	bl	80019e0 <ST7735_WriteString>
		  }
		  xt++;
 80029f6:	4b6f      	ldr	r3, [pc, #444]	; (8002bb4 <main+0xe1c>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	3301      	adds	r3, #1
 80029fc:	4a6d      	ldr	r2, [pc, #436]	; (8002bb4 <main+0xe1c>)
 80029fe:	6013      	str	r3, [r2, #0]
		  yt = 63 - (transmit.altitude)/2;
 8002a00:	4b6f      	ldr	r3, [pc, #444]	; (8002bc0 <main+0xe28>)
 8002a02:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a06:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8002a0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a0e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8002bc4 <main+0xe2c>
 8002a12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a1a:	ee17 2a90 	vmov	r2, s15
 8002a1e:	4b6a      	ldr	r3, [pc, #424]	; (8002bc8 <main+0xe30>)
 8002a20:	601a      	str	r2, [r3, #0]
		  drawPixel(xt, yt, WHITE);
 8002a22:	4b64      	ldr	r3, [pc, #400]	; (8002bb4 <main+0xe1c>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	b21b      	sxth	r3, r3
 8002a28:	4a67      	ldr	r2, [pc, #412]	; (8002bc8 <main+0xe30>)
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	b211      	sxth	r1, r2
 8002a2e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe fa92 	bl	8000f5c <drawPixel>


		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET)) flag_but2 = 1;
 8002a38:	2101      	movs	r1, #1
 8002a3a:	4864      	ldr	r0, [pc, #400]	; (8002bcc <main+0xe34>)
 8002a3c:	f003 fbb0 	bl	80061a0 <HAL_GPIO_ReadPin>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d102      	bne.n	8002a4c <main+0xcb4>
 8002a46:	4b54      	ldr	r3, [pc, #336]	; (8002b98 <main+0xe00>)
 8002a48:	2201      	movs	r2, #1
 8002a4a:	701a      	strb	r2, [r3, #0]
		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET))
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	485f      	ldr	r0, [pc, #380]	; (8002bcc <main+0xe34>)
 8002a50:	f003 fba6 	bl	80061a0 <HAL_GPIO_ReadPin>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d103      	bne.n	8002a62 <main+0xcca>
		  {
			  flag_but = 1;
 8002a5a:	4b4e      	ldr	r3, [pc, #312]	; (8002b94 <main+0xdfc>)
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	e002      	b.n	8002a68 <main+0xcd0>
		  }
		  else flag_but = 0;
 8002a62:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <main+0xdfc>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]
		  if(flag_but == 1 && flag_but2 == 1)
 8002a68:	4b4a      	ldr	r3, [pc, #296]	; (8002b94 <main+0xdfc>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d012      	beq.n	8002a96 <main+0xcfe>
 8002a70:	4b49      	ldr	r3, [pc, #292]	; (8002b98 <main+0xe00>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00e      	beq.n	8002a96 <main+0xcfe>
		  {
			  flag_but2 = 0;
 8002a78:	4b47      	ldr	r3, [pc, #284]	; (8002b98 <main+0xe00>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	701a      	strb	r2, [r3, #0]

			  flag_Grafic = false;
 8002a7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ba8 <main+0xe10>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
			  flag_2  = false;
 8002a84:	4b49      	ldr	r3, [pc, #292]	; (8002bac <main+0xe14>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	701a      	strb	r2, [r3, #0]
			  flag_Menu = true;
 8002a8a:	4b46      	ldr	r3, [pc, #280]	; (8002ba4 <main+0xe0c>)
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 8002a90:	2000      	movs	r0, #0
 8002a92:	f7fe fd35 	bl	8001500 <fillScreen>
		  }
	  }
	  //////////////////////////////////////////////////////////////////////////////
	  if(flag_Status == true && flag_3  == true) //--------------------------------------------STATUS
 8002a96:	4b4e      	ldr	r3, [pc, #312]	; (8002bd0 <main+0xe38>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 813e 	beq.w	8002d1c <main+0xf84>
 8002aa0:	4b4c      	ldr	r3, [pc, #304]	; (8002bd4 <main+0xe3c>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 8139 	beq.w	8002d1c <main+0xf84>
	  {
		  if(StatusOne == true)
 8002aaa:	4b4b      	ldr	r3, [pc, #300]	; (8002bd8 <main+0xe40>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <main+0xd26>
		  {
			  StatusOne = false;
 8002ab2:	4b49      	ldr	r3, [pc, #292]	; (8002bd8 <main+0xe40>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
			  xt = 0;
 8002ab8:	4b3e      	ldr	r3, [pc, #248]	; (8002bb4 <main+0xe1c>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	601a      	str	r2, [r3, #0]
		  }
		  drawRect(0, 0, 160, 128, WHITE);
 8002abe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	2380      	movs	r3, #128	; 0x80
 8002ac6:	22a0      	movs	r2, #160	; 0xa0
 8002ac8:	2100      	movs	r1, #0
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7fe fcd6 	bl	800147c <drawRect>
		  ST7735_WriteString(2, 2, "Status", Font_7x10, GREEN, BLACK);
 8002ad0:	4b39      	ldr	r3, [pc, #228]	; (8002bb8 <main+0xe20>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	9202      	str	r2, [sp, #8]
 8002ad6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002ada:	9201      	str	r2, [sp, #4]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	9200      	str	r2, [sp, #0]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a3e      	ldr	r2, [pc, #248]	; (8002bdc <main+0xe44>)
 8002ae4:	2102      	movs	r1, #2
 8002ae6:	2002      	movs	r0, #2
 8002ae8:	f7fe ff7a 	bl	80019e0 <ST7735_WriteString>

		  if(Batdata >= 5) ST7735_WriteString (2, 20, "Power: connected", Font_7x10, GREEN, BLACK);
 8002aec:	4b3c      	ldr	r3, [pc, #240]	; (8002be0 <main+0xe48>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	dd0e      	ble.n	8002b12 <main+0xd7a>
 8002af4:	4b30      	ldr	r3, [pc, #192]	; (8002bb8 <main+0xe20>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	9202      	str	r2, [sp, #8]
 8002afa:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002afe:	9201      	str	r2, [sp, #4]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	9200      	str	r2, [sp, #0]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a37      	ldr	r2, [pc, #220]	; (8002be4 <main+0xe4c>)
 8002b08:	2114      	movs	r1, #20
 8002b0a:	2002      	movs	r0, #2
 8002b0c:	f7fe ff68 	bl	80019e0 <ST7735_WriteString>
 8002b10:	e011      	b.n	8002b36 <main+0xd9e>
          else if (Batdata < 5) ST7735_WriteString (2, 20, "Power: disabled ", Font_7x10, RED, BLACK);
 8002b12:	4b33      	ldr	r3, [pc, #204]	; (8002be0 <main+0xe48>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	dc0d      	bgt.n	8002b36 <main+0xd9e>
 8002b1a:	4b27      	ldr	r3, [pc, #156]	; (8002bb8 <main+0xe20>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	9202      	str	r2, [sp, #8]
 8002b20:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002b24:	9201      	str	r2, [sp, #4]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	9200      	str	r2, [sp, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a2e      	ldr	r2, [pc, #184]	; (8002be8 <main+0xe50>)
 8002b2e:	2114      	movs	r1, #20
 8002b30:	2002      	movs	r0, #2
 8002b32:	f7fe ff55 	bl	80019e0 <ST7735_WriteString>

		  if(Batdata <= 128 && Batdata >= 110) ST7735_WriteString (2, 30, "Battery: HIGH  ", Font_7x10, GREEN, BLACK);
 8002b36:	4b2a      	ldr	r3, [pc, #168]	; (8002be0 <main+0xe48>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	2b80      	cmp	r3, #128	; 0x80
 8002b3c:	dc12      	bgt.n	8002b64 <main+0xdcc>
 8002b3e:	4b28      	ldr	r3, [pc, #160]	; (8002be0 <main+0xe48>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b6d      	cmp	r3, #109	; 0x6d
 8002b44:	dd0e      	ble.n	8002b64 <main+0xdcc>
 8002b46:	4b1c      	ldr	r3, [pc, #112]	; (8002bb8 <main+0xe20>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	9202      	str	r2, [sp, #8]
 8002b4c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002b50:	9201      	str	r2, [sp, #4]
 8002b52:	685a      	ldr	r2, [r3, #4]
 8002b54:	9200      	str	r2, [sp, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a24      	ldr	r2, [pc, #144]	; (8002bec <main+0xe54>)
 8002b5a:	211e      	movs	r1, #30
 8002b5c:	2002      	movs	r0, #2
 8002b5e:	f7fe ff3f 	bl	80019e0 <ST7735_WriteString>
 8002b62:	e05d      	b.n	8002c20 <main+0xe88>
		  else if(Batdata <= 109 && Batdata >= 101) ST7735_WriteString (2, 30, "Battery: MEDIUM", Font_7x10, YELLOW, BLACK);
 8002b64:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <main+0xe48>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b6d      	cmp	r3, #109	; 0x6d
 8002b6a:	dc43      	bgt.n	8002bf4 <main+0xe5c>
 8002b6c:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <main+0xe48>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b64      	cmp	r3, #100	; 0x64
 8002b72:	dd3f      	ble.n	8002bf4 <main+0xe5c>
 8002b74:	4b10      	ldr	r3, [pc, #64]	; (8002bb8 <main+0xe20>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	9202      	str	r2, [sp, #8]
 8002b7a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002b7e:	9201      	str	r2, [sp, #4]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	9200      	str	r2, [sp, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1a      	ldr	r2, [pc, #104]	; (8002bf0 <main+0xe58>)
 8002b88:	211e      	movs	r1, #30
 8002b8a:	2002      	movs	r0, #2
 8002b8c:	f7fe ff28 	bl	80019e0 <ST7735_WriteString>
 8002b90:	e046      	b.n	8002c20 <main+0xe88>
 8002b92:	bf00      	nop
 8002b94:	200013f0 	.word	0x200013f0
 8002b98:	200013f1 	.word	0x200013f1
 8002b9c:	20000754 	.word	0x20000754
 8002ba0:	20000758 	.word	0x20000758
 8002ba4:	20000009 	.word	0x20000009
 8002ba8:	20000755 	.word	0x20000755
 8002bac:	20000759 	.word	0x20000759
 8002bb0:	2000000b 	.word	0x2000000b
 8002bb4:	200013f4 	.word	0x200013f4
 8002bb8:	20000000 	.word	0x20000000
 8002bbc:	0800f7f8 	.word	0x0800f7f8
 8002bc0:	20001408 	.word	0x20001408
 8002bc4:	427c0000 	.word	0x427c0000
 8002bc8:	200013f8 	.word	0x200013f8
 8002bcc:	40020400 	.word	0x40020400
 8002bd0:	20000756 	.word	0x20000756
 8002bd4:	2000075a 	.word	0x2000075a
 8002bd8:	2000000c 	.word	0x2000000c
 8002bdc:	0800f800 	.word	0x0800f800
 8002be0:	20001400 	.word	0x20001400
 8002be4:	0800f808 	.word	0x0800f808
 8002be8:	0800f81c 	.word	0x0800f81c
 8002bec:	0800f830 	.word	0x0800f830
 8002bf0:	0800f840 	.word	0x0800f840
		  else if(Batdata <= 100 && Batdata >= 90) ST7735_WriteString (2, 30, "Battery: LOW   ", Font_7x10, RED, BLACK);
 8002bf4:	4b8c      	ldr	r3, [pc, #560]	; (8002e28 <main+0x1090>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b64      	cmp	r3, #100	; 0x64
 8002bfa:	dc11      	bgt.n	8002c20 <main+0xe88>
 8002bfc:	4b8a      	ldr	r3, [pc, #552]	; (8002e28 <main+0x1090>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b59      	cmp	r3, #89	; 0x59
 8002c02:	dd0d      	ble.n	8002c20 <main+0xe88>
 8002c04:	4b89      	ldr	r3, [pc, #548]	; (8002e2c <main+0x1094>)
 8002c06:	2200      	movs	r2, #0
 8002c08:	9202      	str	r2, [sp, #8]
 8002c0a:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002c0e:	9201      	str	r2, [sp, #4]
 8002c10:	685a      	ldr	r2, [r3, #4]
 8002c12:	9200      	str	r2, [sp, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a86      	ldr	r2, [pc, #536]	; (8002e30 <main+0x1098>)
 8002c18:	211e      	movs	r1, #30
 8002c1a:	2002      	movs	r0, #2
 8002c1c:	f7fe fee0 	bl	80019e0 <ST7735_WriteString>


		  if(flag_PIN_SET == true) ST7735_WriteString(2, 40, "RF: work", Font_7x10, GREEN, BLACK);
 8002c20:	4b84      	ldr	r3, [pc, #528]	; (8002e34 <main+0x109c>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00e      	beq.n	8002c46 <main+0xeae>
 8002c28:	4b80      	ldr	r3, [pc, #512]	; (8002e2c <main+0x1094>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	9202      	str	r2, [sp, #8]
 8002c2e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002c32:	9201      	str	r2, [sp, #4]
 8002c34:	685a      	ldr	r2, [r3, #4]
 8002c36:	9200      	str	r2, [sp, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a7f      	ldr	r2, [pc, #508]	; (8002e38 <main+0x10a0>)
 8002c3c:	2128      	movs	r1, #40	; 0x28
 8002c3e:	2002      	movs	r0, #2
 8002c40:	f7fe fece 	bl	80019e0 <ST7735_WriteString>
 8002c44:	e013      	b.n	8002c6e <main+0xed6>
		  else if(flag_PIN_SET == false) ST7735_WriteString(2, 40, "RF: customization", Font_7x10, BLUE, BLACK);
 8002c46:	4b7b      	ldr	r3, [pc, #492]	; (8002e34 <main+0x109c>)
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	f083 0301 	eor.w	r3, r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00c      	beq.n	8002c6e <main+0xed6>
 8002c54:	4b75      	ldr	r3, [pc, #468]	; (8002e2c <main+0x1094>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	9202      	str	r2, [sp, #8]
 8002c5a:	221f      	movs	r2, #31
 8002c5c:	9201      	str	r2, [sp, #4]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	9200      	str	r2, [sp, #0]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a75      	ldr	r2, [pc, #468]	; (8002e3c <main+0x10a4>)
 8002c66:	2128      	movs	r1, #40	; 0x28
 8002c68:	2002      	movs	r0, #2
 8002c6a:	f7fe feb9 	bl	80019e0 <ST7735_WriteString>

		  if(flag_PIN_CS == true)ST7735_WriteString(2, 50, "RF: ON ", Font_7x10, GREEN, BLACK);
 8002c6e:	4b74      	ldr	r3, [pc, #464]	; (8002e40 <main+0x10a8>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00e      	beq.n	8002c94 <main+0xefc>
 8002c76:	4b6d      	ldr	r3, [pc, #436]	; (8002e2c <main+0x1094>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	9202      	str	r2, [sp, #8]
 8002c7c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002c80:	9201      	str	r2, [sp, #4]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	9200      	str	r2, [sp, #0]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a6e      	ldr	r2, [pc, #440]	; (8002e44 <main+0x10ac>)
 8002c8a:	2132      	movs	r1, #50	; 0x32
 8002c8c:	2002      	movs	r0, #2
 8002c8e:	f7fe fea7 	bl	80019e0 <ST7735_WriteString>
 8002c92:	e014      	b.n	8002cbe <main+0xf26>
		  else if (flag_PIN_CS == false) ST7735_WriteString(2, 50, "RF: OFF", Font_7x10, RED, BLACK);
 8002c94:	4b6a      	ldr	r3, [pc, #424]	; (8002e40 <main+0x10a8>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	f083 0301 	eor.w	r3, r3, #1
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00d      	beq.n	8002cbe <main+0xf26>
 8002ca2:	4b62      	ldr	r3, [pc, #392]	; (8002e2c <main+0x1094>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	9202      	str	r2, [sp, #8]
 8002ca8:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002cac:	9201      	str	r2, [sp, #4]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	9200      	str	r2, [sp, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a64      	ldr	r2, [pc, #400]	; (8002e48 <main+0x10b0>)
 8002cb6:	2132      	movs	r1, #50	; 0x32
 8002cb8:	2002      	movs	r0, #2
 8002cba:	f7fe fe91 	bl	80019e0 <ST7735_WriteString>
		   * ТАКЖЕ ДОБАВ�?ТЬ ФУНКЦ�?Ю ПРОВЕРК�? ПР�?Н�?МАЕМЫХ �? ОТПРАВЛЯЕМЫХ ДАННЫХ
		   * ЕЩЕ ЧТО Н�?БУДЬ МОЖНО ДОБАВ�?ТЬ, ФАНТАЗ�?Я РЕШ�?Т ЧТО ДОБАВ�?ТЬ...
		   */


		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET)) flag_but2 = 1;
 8002cbe:	2101      	movs	r1, #1
 8002cc0:	4862      	ldr	r0, [pc, #392]	; (8002e4c <main+0x10b4>)
 8002cc2:	f003 fa6d 	bl	80061a0 <HAL_GPIO_ReadPin>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d102      	bne.n	8002cd2 <main+0xf3a>
 8002ccc:	4b60      	ldr	r3, [pc, #384]	; (8002e50 <main+0x10b8>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	701a      	strb	r2, [r3, #0]
		  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET))
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	485d      	ldr	r0, [pc, #372]	; (8002e4c <main+0x10b4>)
 8002cd6:	f003 fa63 	bl	80061a0 <HAL_GPIO_ReadPin>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d103      	bne.n	8002ce8 <main+0xf50>
		  {
			  flag_but = 1;
 8002ce0:	4b5c      	ldr	r3, [pc, #368]	; (8002e54 <main+0x10bc>)
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]
 8002ce6:	e002      	b.n	8002cee <main+0xf56>
		  }
		  else flag_but = 0;
 8002ce8:	4b5a      	ldr	r3, [pc, #360]	; (8002e54 <main+0x10bc>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	701a      	strb	r2, [r3, #0]
		  if(flag_but == 1 && flag_but2 == 1)
 8002cee:	4b59      	ldr	r3, [pc, #356]	; (8002e54 <main+0x10bc>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d012      	beq.n	8002d1c <main+0xf84>
 8002cf6:	4b56      	ldr	r3, [pc, #344]	; (8002e50 <main+0x10b8>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00e      	beq.n	8002d1c <main+0xf84>
		  {
			  flag_but2 = 0;
 8002cfe:	4b54      	ldr	r3, [pc, #336]	; (8002e50 <main+0x10b8>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]

			  flag_Status = false;
 8002d04:	4b54      	ldr	r3, [pc, #336]	; (8002e58 <main+0x10c0>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	701a      	strb	r2, [r3, #0]
			  flag_3  = false;
 8002d0a:	4b54      	ldr	r3, [pc, #336]	; (8002e5c <main+0x10c4>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]
			  flag_Menu = true;
 8002d10:	4b53      	ldr	r3, [pc, #332]	; (8002e60 <main+0x10c8>)
 8002d12:	2201      	movs	r2, #1
 8002d14:	701a      	strb	r2, [r3, #0]
			  fillScreen(BLACK);
 8002d16:	2000      	movs	r0, #0
 8002d18:	f7fe fbf2 	bl	8001500 <fillScreen>
		  }
	  }
	  //////////////////////////////////////////////////////////////////////////////
	  if(flag_Setings == true && flag_4  == true) //--------------------------------------------SETINGS
 8002d1c:	4b51      	ldr	r3, [pc, #324]	; (8002e64 <main+0x10cc>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 8265 	beq.w	80031f0 <main+0x1458>
 8002d26:	4b50      	ldr	r3, [pc, #320]	; (8002e68 <main+0x10d0>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	f000 8260 	beq.w	80031f0 <main+0x1458>
	  {
		  if(SetingsOne == true)
 8002d30:	4b4e      	ldr	r3, [pc, #312]	; (8002e6c <main+0x10d4>)
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d005      	beq.n	8002d44 <main+0xfac>
		  {
			  SetingsOne = false;
 8002d38:	4b4c      	ldr	r3, [pc, #304]	; (8002e6c <main+0x10d4>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
			  xt = 0;
 8002d3e:	4b4c      	ldr	r3, [pc, #304]	; (8002e70 <main+0x10d8>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	601a      	str	r2, [r3, #0]
		  }

		  drawRect(0, 0, 160, 128, WHITE);
 8002d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	22a0      	movs	r2, #160	; 0xa0
 8002d4e:	2100      	movs	r1, #0
 8002d50:	2000      	movs	r0, #0
 8002d52:	f7fe fb93 	bl	800147c <drawRect>
		  ST7735_WriteString(2, 2, "Setings", Font_7x10, GREEN, BLACK);
 8002d56:	4b35      	ldr	r3, [pc, #212]	; (8002e2c <main+0x1094>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	9202      	str	r2, [sp, #8]
 8002d5c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002d60:	9201      	str	r2, [sp, #4]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	9200      	str	r2, [sp, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a42      	ldr	r2, [pc, #264]	; (8002e74 <main+0x10dc>)
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	2002      	movs	r0, #2
 8002d6e:	f7fe fe37 	bl	80019e0 <ST7735_WriteString>
		  //////////////////////////////////////////////////////////////////////////////
		  if(flag_PWM_BLK == false) indicator(flag_punkt);
 8002d72:	4b41      	ldr	r3, [pc, #260]	; (8002e78 <main+0x10e0>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	f083 0301 	eor.w	r3, r3, #1
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <main+0xffe>
 8002d80:	4b3e      	ldr	r3, [pc, #248]	; (8002e7c <main+0x10e4>)
 8002d82:	f993 3000 	ldrsb.w	r3, [r3]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	bf14      	ite	ne
 8002d8a:	2301      	movne	r3, #1
 8002d8c:	2300      	moveq	r3, #0
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7fe ff5f 	bl	8001c54 <indicator>
		  //////////////////////////////////////////////////////////////////////////////


		  ST7735_WriteString(10, 52, ":Back <-", Font_7x10, GREEN, BLACK);
 8002d96:	4b25      	ldr	r3, [pc, #148]	; (8002e2c <main+0x1094>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	9202      	str	r2, [sp, #8]
 8002d9c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002da0:	9201      	str	r2, [sp, #4]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	9200      	str	r2, [sp, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a35      	ldr	r2, [pc, #212]	; (8002e80 <main+0x10e8>)
 8002daa:	2134      	movs	r1, #52	; 0x34
 8002dac:	200a      	movs	r0, #10
 8002dae:	f7fe fe17 	bl	80019e0 <ST7735_WriteString>

		  if(flag_PIN_SET == true)ST7735_WriteString(10, 16, ":RF work         ", Font_7x10, GREEN, BLACK);
 8002db2:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <main+0x109c>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00e      	beq.n	8002dd8 <main+0x1040>
 8002dba:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <main+0x1094>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	9202      	str	r2, [sp, #8]
 8002dc0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002dc4:	9201      	str	r2, [sp, #4]
 8002dc6:	685a      	ldr	r2, [r3, #4]
 8002dc8:	9200      	str	r2, [sp, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a2d      	ldr	r2, [pc, #180]	; (8002e84 <main+0x10ec>)
 8002dce:	2110      	movs	r1, #16
 8002dd0:	200a      	movs	r0, #10
 8002dd2:	f7fe fe05 	bl	80019e0 <ST7735_WriteString>
 8002dd6:	e013      	b.n	8002e00 <main+0x1068>
		  else if (flag_PIN_SET == false) ST7735_WriteString(10, 16, ":RF customization", Font_7x10, BLUE, BLACK);
 8002dd8:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <main+0x109c>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	f083 0301 	eor.w	r3, r3, #1
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00c      	beq.n	8002e00 <main+0x1068>
 8002de6:	4b11      	ldr	r3, [pc, #68]	; (8002e2c <main+0x1094>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	9202      	str	r2, [sp, #8]
 8002dec:	221f      	movs	r2, #31
 8002dee:	9201      	str	r2, [sp, #4]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	9200      	str	r2, [sp, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a24      	ldr	r2, [pc, #144]	; (8002e88 <main+0x10f0>)
 8002df8:	2110      	movs	r1, #16
 8002dfa:	200a      	movs	r0, #10
 8002dfc:	f7fe fdf0 	bl	80019e0 <ST7735_WriteString>

		  if(flag_PIN_CS == true)ST7735_WriteString(10, 28, ":RF ON ", Font_7x10, GREEN, BLACK);
 8002e00:	4b0f      	ldr	r3, [pc, #60]	; (8002e40 <main+0x10a8>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d043      	beq.n	8002e90 <main+0x10f8>
 8002e08:	4b08      	ldr	r3, [pc, #32]	; (8002e2c <main+0x1094>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	9202      	str	r2, [sp, #8]
 8002e0e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002e12:	9201      	str	r2, [sp, #4]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	9200      	str	r2, [sp, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	; (8002e8c <main+0x10f4>)
 8002e1c:	211c      	movs	r1, #28
 8002e1e:	200a      	movs	r0, #10
 8002e20:	f7fe fdde 	bl	80019e0 <ST7735_WriteString>
 8002e24:	e049      	b.n	8002eba <main+0x1122>
 8002e26:	bf00      	nop
 8002e28:	20001400 	.word	0x20001400
 8002e2c:	20000000 	.word	0x20000000
 8002e30:	0800f850 	.word	0x0800f850
 8002e34:	2000000e 	.word	0x2000000e
 8002e38:	0800f860 	.word	0x0800f860
 8002e3c:	0800f86c 	.word	0x0800f86c
 8002e40:	2000000f 	.word	0x2000000f
 8002e44:	0800f880 	.word	0x0800f880
 8002e48:	0800f888 	.word	0x0800f888
 8002e4c:	40020400 	.word	0x40020400
 8002e50:	200013f1 	.word	0x200013f1
 8002e54:	200013f0 	.word	0x200013f0
 8002e58:	20000756 	.word	0x20000756
 8002e5c:	2000075a 	.word	0x2000075a
 8002e60:	20000009 	.word	0x20000009
 8002e64:	20000757 	.word	0x20000757
 8002e68:	2000075b 	.word	0x2000075b
 8002e6c:	2000000d 	.word	0x2000000d
 8002e70:	200013f4 	.word	0x200013f4
 8002e74:	0800f890 	.word	0x0800f890
 8002e78:	200013f3 	.word	0x200013f3
 8002e7c:	2000000a 	.word	0x2000000a
 8002e80:	0800f898 	.word	0x0800f898
 8002e84:	0800f8a4 	.word	0x0800f8a4
 8002e88:	0800f8b8 	.word	0x0800f8b8
 8002e8c:	0800f8cc 	.word	0x0800f8cc
		  else if (flag_PIN_CS == false) ST7735_WriteString(10, 28, ":RF OFF", Font_7x10, RED, BLACK);
 8002e90:	4ba3      	ldr	r3, [pc, #652]	; (8003120 <main+0x1388>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	f083 0301 	eor.w	r3, r3, #1
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d00d      	beq.n	8002eba <main+0x1122>
 8002e9e:	4ba1      	ldr	r3, [pc, #644]	; (8003124 <main+0x138c>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	9202      	str	r2, [sp, #8]
 8002ea4:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002ea8:	9201      	str	r2, [sp, #4]
 8002eaa:	685a      	ldr	r2, [r3, #4]
 8002eac:	9200      	str	r2, [sp, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a9d      	ldr	r2, [pc, #628]	; (8003128 <main+0x1390>)
 8002eb2:	211c      	movs	r1, #28
 8002eb4:	200a      	movs	r0, #10
 8002eb6:	f7fe fd93 	bl	80019e0 <ST7735_WriteString>

		  char buf15[3];
		  sprintf(buf15, ":LED %d%%", pers); // игнорировать!
 8002eba:	4b9c      	ldr	r3, [pc, #624]	; (800312c <main+0x1394>)
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002ec4:	499a      	ldr	r1, [pc, #616]	; (8003130 <main+0x1398>)
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f00a f91e 	bl	800d108 <siprintf>
		  if(pers != 100) ST7735_FillRectangle(65, 40, 7, 10, BLACK);
 8002ecc:	4b97      	ldr	r3, [pc, #604]	; (800312c <main+0x1394>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b64      	cmp	r3, #100	; 0x64
 8002ed2:	d007      	beq.n	8002ee4 <main+0x114c>
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	230a      	movs	r3, #10
 8002eda:	2207      	movs	r2, #7
 8002edc:	2128      	movs	r1, #40	; 0x28
 8002ede:	2041      	movs	r0, #65	; 0x41
 8002ee0:	f7fe fdd2 	bl	8001a88 <ST7735_FillRectangle>
		  if(pers == 0) ST7735_FillRectangle(58, 40, 7, 10, BLACK);
 8002ee4:	4b91      	ldr	r3, [pc, #580]	; (800312c <main+0x1394>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d107      	bne.n	8002efc <main+0x1164>
 8002eec:	2300      	movs	r3, #0
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	230a      	movs	r3, #10
 8002ef2:	2207      	movs	r2, #7
 8002ef4:	2128      	movs	r1, #40	; 0x28
 8002ef6:	203a      	movs	r0, #58	; 0x3a
 8002ef8:	f7fe fdc6 	bl	8001a88 <ST7735_FillRectangle>

		  if(pers == 100) ST7735_WriteString(10, 40, buf15, Font_7x10, GREEN, BLACK);
 8002efc:	4b8b      	ldr	r3, [pc, #556]	; (800312c <main+0x1394>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	2b64      	cmp	r3, #100	; 0x64
 8002f02:	d110      	bne.n	8002f26 <main+0x118e>
 8002f04:	4b87      	ldr	r3, [pc, #540]	; (8003124 <main+0x138c>)
 8002f06:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	9202      	str	r2, [sp, #8]
 8002f0e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002f12:	9201      	str	r2, [sp, #4]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	9200      	str	r2, [sp, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	460a      	mov	r2, r1
 8002f1c:	2128      	movs	r1, #40	; 0x28
 8002f1e:	200a      	movs	r0, #10
 8002f20:	f7fe fd5e 	bl	80019e0 <ST7735_WriteString>
 8002f24:	e067      	b.n	8002ff6 <main+0x125e>
		  else if(pers == 80) ST7735_WriteString(10, 40, buf15, Font_7x10, ORANGE, BLACK);
 8002f26:	4b81      	ldr	r3, [pc, #516]	; (800312c <main+0x1394>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b50      	cmp	r3, #80	; 0x50
 8002f2c:	d110      	bne.n	8002f50 <main+0x11b8>
 8002f2e:	4b7d      	ldr	r3, [pc, #500]	; (8003124 <main+0x138c>)
 8002f30:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002f34:	2200      	movs	r2, #0
 8002f36:	9202      	str	r2, [sp, #8]
 8002f38:	f64f 5245 	movw	r2, #64837	; 0xfd45
 8002f3c:	9201      	str	r2, [sp, #4]
 8002f3e:	685a      	ldr	r2, [r3, #4]
 8002f40:	9200      	str	r2, [sp, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	460a      	mov	r2, r1
 8002f46:	2128      	movs	r1, #40	; 0x28
 8002f48:	200a      	movs	r0, #10
 8002f4a:	f7fe fd49 	bl	80019e0 <ST7735_WriteString>
 8002f4e:	e052      	b.n	8002ff6 <main+0x125e>
		  else if(pers == 60) ST7735_WriteString(10, 40, buf15, Font_7x10, YELLOW, BLACK);
 8002f50:	4b76      	ldr	r3, [pc, #472]	; (800312c <main+0x1394>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b3c      	cmp	r3, #60	; 0x3c
 8002f56:	d110      	bne.n	8002f7a <main+0x11e2>
 8002f58:	4b72      	ldr	r3, [pc, #456]	; (8003124 <main+0x138c>)
 8002f5a:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002f5e:	2200      	movs	r2, #0
 8002f60:	9202      	str	r2, [sp, #8]
 8002f62:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002f66:	9201      	str	r2, [sp, #4]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	9200      	str	r2, [sp, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	460a      	mov	r2, r1
 8002f70:	2128      	movs	r1, #40	; 0x28
 8002f72:	200a      	movs	r0, #10
 8002f74:	f7fe fd34 	bl	80019e0 <ST7735_WriteString>
 8002f78:	e03d      	b.n	8002ff6 <main+0x125e>
		  else if(pers == 40) ST7735_WriteString(10, 40, buf15, Font_7x10, YELLOW, BLACK);
 8002f7a:	4b6c      	ldr	r3, [pc, #432]	; (800312c <main+0x1394>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b28      	cmp	r3, #40	; 0x28
 8002f80:	d110      	bne.n	8002fa4 <main+0x120c>
 8002f82:	4b68      	ldr	r3, [pc, #416]	; (8003124 <main+0x138c>)
 8002f84:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002f88:	2200      	movs	r2, #0
 8002f8a:	9202      	str	r2, [sp, #8]
 8002f8c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002f90:	9201      	str	r2, [sp, #4]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	9200      	str	r2, [sp, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	460a      	mov	r2, r1
 8002f9a:	2128      	movs	r1, #40	; 0x28
 8002f9c:	200a      	movs	r0, #10
 8002f9e:	f7fe fd1f 	bl	80019e0 <ST7735_WriteString>
 8002fa2:	e028      	b.n	8002ff6 <main+0x125e>
		  else if(pers == 20) ST7735_WriteString(10, 40, buf15, Font_7x10, RED, BLACK);
 8002fa4:	4b61      	ldr	r3, [pc, #388]	; (800312c <main+0x1394>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b14      	cmp	r3, #20
 8002faa:	d110      	bne.n	8002fce <main+0x1236>
 8002fac:	4b5d      	ldr	r3, [pc, #372]	; (8003124 <main+0x138c>)
 8002fae:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	9202      	str	r2, [sp, #8]
 8002fb6:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002fba:	9201      	str	r2, [sp, #4]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	9200      	str	r2, [sp, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	460a      	mov	r2, r1
 8002fc4:	2128      	movs	r1, #40	; 0x28
 8002fc6:	200a      	movs	r0, #10
 8002fc8:	f7fe fd0a 	bl	80019e0 <ST7735_WriteString>
 8002fcc:	e013      	b.n	8002ff6 <main+0x125e>
		  else if(pers == 0) ST7735_WriteString(10, 40, buf15, Font_7x10, RED, BLACK);
 8002fce:	4b57      	ldr	r3, [pc, #348]	; (800312c <main+0x1394>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <main+0x125e>
 8002fd6:	4b53      	ldr	r3, [pc, #332]	; (8003124 <main+0x138c>)
 8002fd8:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8002fdc:	2200      	movs	r2, #0
 8002fde:	9202      	str	r2, [sp, #8]
 8002fe0:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002fe4:	9201      	str	r2, [sp, #4]
 8002fe6:	685a      	ldr	r2, [r3, #4]
 8002fe8:	9200      	str	r2, [sp, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	460a      	mov	r2, r1
 8002fee:	2128      	movs	r1, #40	; 0x28
 8002ff0:	200a      	movs	r0, #10
 8002ff2:	f7fe fcf5 	bl	80019e0 <ST7735_WriteString>

		  char buf25[10];
		  sprintf(buf25, "%d", sost); // игнорировать!
 8002ff6:	4b4f      	ldr	r3, [pc, #316]	; (8003134 <main+0x139c>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003000:	494d      	ldr	r1, [pc, #308]	; (8003138 <main+0x13a0>)
 8003002:	4618      	mov	r0, r3
 8003004:	f00a f880 	bl	800d108 <siprintf>
		  //ST7735_WriteString(10, 80, buf25, Font_7x10, MAGENTA, BLACK);	//вывод значение регистра напряжения подсветки
		  if(flag_punkt == 1)
 8003008:	4b4c      	ldr	r3, [pc, #304]	; (800313c <main+0x13a4>)
 800300a:	f993 3000 	ldrsb.w	r3, [r3]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d133      	bne.n	800307a <main+0x12e2>
		  {
			  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET)) flag_but2 = 1;
 8003012:	2101      	movs	r1, #1
 8003014:	484a      	ldr	r0, [pc, #296]	; (8003140 <main+0x13a8>)
 8003016:	f003 f8c3 	bl	80061a0 <HAL_GPIO_ReadPin>
 800301a:	4603      	mov	r3, r0
 800301c:	2b01      	cmp	r3, #1
 800301e:	d102      	bne.n	8003026 <main+0x128e>
 8003020:	4b48      	ldr	r3, [pc, #288]	; (8003144 <main+0x13ac>)
 8003022:	2201      	movs	r2, #1
 8003024:	701a      	strb	r2, [r3, #0]
			  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET))
 8003026:	2101      	movs	r1, #1
 8003028:	4845      	ldr	r0, [pc, #276]	; (8003140 <main+0x13a8>)
 800302a:	f003 f8b9 	bl	80061a0 <HAL_GPIO_ReadPin>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d103      	bne.n	800303c <main+0x12a4>
			  {
				  flag_but = 1;
 8003034:	4b44      	ldr	r3, [pc, #272]	; (8003148 <main+0x13b0>)
 8003036:	2201      	movs	r2, #1
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	e002      	b.n	8003042 <main+0x12aa>
			  }
			  else flag_but = 0;
 800303c:	4b42      	ldr	r3, [pc, #264]	; (8003148 <main+0x13b0>)
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
			  if(flag_but == 1 && flag_but2 == 1)
 8003042:	4b41      	ldr	r3, [pc, #260]	; (8003148 <main+0x13b0>)
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d017      	beq.n	800307a <main+0x12e2>
 800304a:	4b3e      	ldr	r3, [pc, #248]	; (8003144 <main+0x13ac>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d013      	beq.n	800307a <main+0x12e2>
			  {
				  flag_PIN_SET ^= true;
 8003052:	4b3e      	ldr	r3, [pc, #248]	; (800314c <main+0x13b4>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	f083 0301 	eor.w	r3, r3, #1
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	b2da      	uxtb	r2, r3
 8003066:	4b39      	ldr	r3, [pc, #228]	; (800314c <main+0x13b4>)
 8003068:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 800306a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800306e:	4834      	ldr	r0, [pc, #208]	; (8003140 <main+0x13a8>)
 8003070:	f003 f8c7 	bl	8006202 <HAL_GPIO_TogglePin>
				  flag_but2 = 0;
 8003074:	4b33      	ldr	r3, [pc, #204]	; (8003144 <main+0x13ac>)
 8003076:	2200      	movs	r2, #0
 8003078:	701a      	strb	r2, [r3, #0]
			  }
		  }

		  if(flag_punkt == 2)
 800307a:	4b30      	ldr	r3, [pc, #192]	; (800313c <main+0x13a4>)
 800307c:	f993 3000 	ldrsb.w	r3, [r3]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d133      	bne.n	80030ec <main+0x1354>
		  {
			  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET)) flag_but2 = 1;
 8003084:	2101      	movs	r1, #1
 8003086:	482e      	ldr	r0, [pc, #184]	; (8003140 <main+0x13a8>)
 8003088:	f003 f88a 	bl	80061a0 <HAL_GPIO_ReadPin>
 800308c:	4603      	mov	r3, r0
 800308e:	2b01      	cmp	r3, #1
 8003090:	d102      	bne.n	8003098 <main+0x1300>
 8003092:	4b2c      	ldr	r3, [pc, #176]	; (8003144 <main+0x13ac>)
 8003094:	2201      	movs	r2, #1
 8003096:	701a      	strb	r2, [r3, #0]
			  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET))
 8003098:	2101      	movs	r1, #1
 800309a:	4829      	ldr	r0, [pc, #164]	; (8003140 <main+0x13a8>)
 800309c:	f003 f880 	bl	80061a0 <HAL_GPIO_ReadPin>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d103      	bne.n	80030ae <main+0x1316>
			  {
				  flag_but = 1;
 80030a6:	4b28      	ldr	r3, [pc, #160]	; (8003148 <main+0x13b0>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	701a      	strb	r2, [r3, #0]
 80030ac:	e002      	b.n	80030b4 <main+0x131c>
			  }
			  else flag_but = 0;
 80030ae:	4b26      	ldr	r3, [pc, #152]	; (8003148 <main+0x13b0>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]
			  if(flag_but == 1 && flag_but2 == 1)
 80030b4:	4b24      	ldr	r3, [pc, #144]	; (8003148 <main+0x13b0>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d017      	beq.n	80030ec <main+0x1354>
 80030bc:	4b21      	ldr	r3, [pc, #132]	; (8003144 <main+0x13ac>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d013      	beq.n	80030ec <main+0x1354>
			  {
				  flag_PIN_CS ^= true;
 80030c4:	4b16      	ldr	r3, [pc, #88]	; (8003120 <main+0x1388>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	f083 0301 	eor.w	r3, r3, #1
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	bf14      	ite	ne
 80030d2:	2301      	movne	r3, #1
 80030d4:	2300      	moveq	r3, #0
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	4b11      	ldr	r3, [pc, #68]	; (8003120 <main+0x1388>)
 80030da:	701a      	strb	r2, [r3, #0]
				  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_8);
 80030dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80030e0:	481b      	ldr	r0, [pc, #108]	; (8003150 <main+0x13b8>)
 80030e2:	f003 f88e 	bl	8006202 <HAL_GPIO_TogglePin>
				  flag_but2 = 0;
 80030e6:	4b17      	ldr	r3, [pc, #92]	; (8003144 <main+0x13ac>)
 80030e8:	2200      	movs	r2, #0
 80030ea:	701a      	strb	r2, [r3, #0]
			  }
		  }

		  if(flag_punkt == 4)
 80030ec:	4b13      	ldr	r3, [pc, #76]	; (800313c <main+0x13a4>)
 80030ee:	f993 3000 	ldrsb.w	r3, [r3]
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d148      	bne.n	8003188 <main+0x13f0>
		  {
			  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET)) flag_but2 = 1;
 80030f6:	2101      	movs	r1, #1
 80030f8:	4811      	ldr	r0, [pc, #68]	; (8003140 <main+0x13a8>)
 80030fa:	f003 f851 	bl	80061a0 <HAL_GPIO_ReadPin>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b01      	cmp	r3, #1
 8003102:	d102      	bne.n	800310a <main+0x1372>
 8003104:	4b0f      	ldr	r3, [pc, #60]	; (8003144 <main+0x13ac>)
 8003106:	2201      	movs	r2, #1
 8003108:	701a      	strb	r2, [r3, #0]
			  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET))
 800310a:	2101      	movs	r1, #1
 800310c:	480c      	ldr	r0, [pc, #48]	; (8003140 <main+0x13a8>)
 800310e:	f003 f847 	bl	80061a0 <HAL_GPIO_ReadPin>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d11d      	bne.n	8003154 <main+0x13bc>
			  {
				  flag_but = 1;
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <main+0x13b0>)
 800311a:	2201      	movs	r2, #1
 800311c:	701a      	strb	r2, [r3, #0]
 800311e:	e01c      	b.n	800315a <main+0x13c2>
 8003120:	2000000f 	.word	0x2000000f
 8003124:	20000000 	.word	0x20000000
 8003128:	0800f8d4 	.word	0x0800f8d4
 800312c:	20001425 	.word	0x20001425
 8003130:	0800f8dc 	.word	0x0800f8dc
 8003134:	20001424 	.word	0x20001424
 8003138:	0800f610 	.word	0x0800f610
 800313c:	2000000a 	.word	0x2000000a
 8003140:	40020400 	.word	0x40020400
 8003144:	200013f1 	.word	0x200013f1
 8003148:	200013f0 	.word	0x200013f0
 800314c:	2000000e 	.word	0x2000000e
 8003150:	40020000 	.word	0x40020000
			  }
			  else flag_but = 0;
 8003154:	4b2a      	ldr	r3, [pc, #168]	; (8003200 <main+0x1468>)
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
			  if(flag_but == 1 && flag_but2 == 1)
 800315a:	4b29      	ldr	r3, [pc, #164]	; (8003200 <main+0x1468>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d012      	beq.n	8003188 <main+0x13f0>
 8003162:	4b28      	ldr	r3, [pc, #160]	; (8003204 <main+0x146c>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00e      	beq.n	8003188 <main+0x13f0>
			  {
				  flag_but2 = 0;
 800316a:	4b26      	ldr	r3, [pc, #152]	; (8003204 <main+0x146c>)
 800316c:	2200      	movs	r2, #0
 800316e:	701a      	strb	r2, [r3, #0]

				  flag_Setings = false;
 8003170:	4b25      	ldr	r3, [pc, #148]	; (8003208 <main+0x1470>)
 8003172:	2200      	movs	r2, #0
 8003174:	701a      	strb	r2, [r3, #0]
				  flag_4  = false;
 8003176:	4b25      	ldr	r3, [pc, #148]	; (800320c <main+0x1474>)
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
				  flag_Menu = true;
 800317c:	4b24      	ldr	r3, [pc, #144]	; (8003210 <main+0x1478>)
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
				  fillScreen(BLACK);
 8003182:	2000      	movs	r0, #0
 8003184:	f7fe f9bc 	bl	8001500 <fillScreen>
			  }
		  }

		  if(flag_punkt == 3)
 8003188:	4b22      	ldr	r3, [pc, #136]	; (8003214 <main+0x147c>)
 800318a:	f993 3000 	ldrsb.w	r3, [r3]
 800318e:	2b03      	cmp	r3, #3
 8003190:	d12e      	bne.n	80031f0 <main+0x1458>
		  {
			  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_SET)) flag_but2 = 1;
 8003192:	2101      	movs	r1, #1
 8003194:	4820      	ldr	r0, [pc, #128]	; (8003218 <main+0x1480>)
 8003196:	f003 f803 	bl	80061a0 <HAL_GPIO_ReadPin>
 800319a:	4603      	mov	r3, r0
 800319c:	2b01      	cmp	r3, #1
 800319e:	d102      	bne.n	80031a6 <main+0x140e>
 80031a0:	4b18      	ldr	r3, [pc, #96]	; (8003204 <main+0x146c>)
 80031a2:	2201      	movs	r2, #1
 80031a4:	701a      	strb	r2, [r3, #0]
			  if((HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET))
 80031a6:	2101      	movs	r1, #1
 80031a8:	481b      	ldr	r0, [pc, #108]	; (8003218 <main+0x1480>)
 80031aa:	f002 fff9 	bl	80061a0 <HAL_GPIO_ReadPin>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d103      	bne.n	80031bc <main+0x1424>
			  {
				  flag_but = 1;
 80031b4:	4b12      	ldr	r3, [pc, #72]	; (8003200 <main+0x1468>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
 80031ba:	e002      	b.n	80031c2 <main+0x142a>
			  }
			  else flag_but = 0;
 80031bc:	4b10      	ldr	r3, [pc, #64]	; (8003200 <main+0x1468>)
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
			  if(flag_but == 1 && flag_but2 == 1)
 80031c2:	4b0f      	ldr	r3, [pc, #60]	; (8003200 <main+0x1468>)
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d012      	beq.n	80031f0 <main+0x1458>
 80031ca:	4b0e      	ldr	r3, [pc, #56]	; (8003204 <main+0x146c>)
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00e      	beq.n	80031f0 <main+0x1458>
			  {
				  flag_PWM_BLK ^= true;
 80031d2:	4b12      	ldr	r3, [pc, #72]	; (800321c <main+0x1484>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	f083 0301 	eor.w	r3, r3, #1
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf14      	ite	ne
 80031e0:	2301      	movne	r3, #1
 80031e2:	2300      	moveq	r3, #0
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	4b0d      	ldr	r3, [pc, #52]	; (800321c <main+0x1484>)
 80031e8:	701a      	strb	r2, [r3, #0]

				  flag_but2 = 0;
 80031ea:	4b06      	ldr	r3, [pc, #24]	; (8003204 <main+0x146c>)
 80031ec:	2200      	movs	r2, #0
 80031ee:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }
	  HAL_UART_Receive_IT(&huart1, (uint8_t*) &transmit, sizeof(transmit));
 80031f0:	221c      	movs	r2, #28
 80031f2:	490b      	ldr	r1, [pc, #44]	; (8003220 <main+0x1488>)
 80031f4:	480b      	ldr	r0, [pc, #44]	; (8003224 <main+0x148c>)
 80031f6:	f005 faae 	bl	8008756 <HAL_UART_Receive_IT>
  {
 80031fa:	f7fe be35 	b.w	8001e68 <main+0xd0>
 80031fe:	bf00      	nop
 8003200:	200013f0 	.word	0x200013f0
 8003204:	200013f1 	.word	0x200013f1
 8003208:	20000757 	.word	0x20000757
 800320c:	2000075b 	.word	0x2000075b
 8003210:	20000009 	.word	0x20000009
 8003214:	2000000a 	.word	0x2000000a
 8003218:	40020400 	.word	0x40020400
 800321c:	200013f3 	.word	0x200013f3
 8003220:	20001408 	.word	0x20001408
 8003224:	20000710 	.word	0x20000710

08003228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b094      	sub	sp, #80	; 0x50
 800322c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800322e:	f107 0320 	add.w	r3, r7, #32
 8003232:	2230      	movs	r2, #48	; 0x30
 8003234:	2100      	movs	r1, #0
 8003236:	4618      	mov	r0, r3
 8003238:	f009 faf4 	bl	800c824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800323c:	f107 030c 	add.w	r3, r7, #12
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	605a      	str	r2, [r3, #4]
 8003246:	609a      	str	r2, [r3, #8]
 8003248:	60da      	str	r2, [r3, #12]
 800324a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800324c:	2300      	movs	r3, #0
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <SystemClock_Config+0xc8>)
 8003252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003254:	4a26      	ldr	r2, [pc, #152]	; (80032f0 <SystemClock_Config+0xc8>)
 8003256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800325a:	6413      	str	r3, [r2, #64]	; 0x40
 800325c:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <SystemClock_Config+0xc8>)
 800325e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003264:	60bb      	str	r3, [r7, #8]
 8003266:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003268:	2300      	movs	r3, #0
 800326a:	607b      	str	r3, [r7, #4]
 800326c:	4b21      	ldr	r3, [pc, #132]	; (80032f4 <SystemClock_Config+0xcc>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a20      	ldr	r2, [pc, #128]	; (80032f4 <SystemClock_Config+0xcc>)
 8003272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <SystemClock_Config+0xcc>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003280:	607b      	str	r3, [r7, #4]
 8003282:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003284:	2301      	movs	r3, #1
 8003286:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800328e:	2302      	movs	r3, #2
 8003290:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003292:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003296:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003298:	230c      	movs	r3, #12
 800329a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800329c:	2360      	movs	r3, #96	; 0x60
 800329e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032a0:	2302      	movs	r3, #2
 80032a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80032a4:	2305      	movs	r3, #5
 80032a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032a8:	f107 0320 	add.w	r3, r7, #32
 80032ac:	4618      	mov	r0, r3
 80032ae:	f002 ffc3 	bl	8006238 <HAL_RCC_OscConfig>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d001      	beq.n	80032bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80032b8:	f000 fd0e 	bl	8003cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032bc:	230f      	movs	r3, #15
 80032be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032c0:	2302      	movs	r3, #2
 80032c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80032c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80032ce:	2300      	movs	r3, #0
 80032d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80032d2:	f107 030c 	add.w	r3, r7, #12
 80032d6:	2103      	movs	r1, #3
 80032d8:	4618      	mov	r0, r3
 80032da:	f003 fa25 	bl	8006728 <HAL_RCC_ClockConfig>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80032e4:	f000 fcf8 	bl	8003cd8 <Error_Handler>
  }
}
 80032e8:	bf00      	nop
 80032ea:	3750      	adds	r7, #80	; 0x50
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40007000 	.word	0x40007000

080032f8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80032fe:	463b      	mov	r3, r7
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800330a:	4b30      	ldr	r3, [pc, #192]	; (80033cc <MX_ADC1_Init+0xd4>)
 800330c:	4a30      	ldr	r2, [pc, #192]	; (80033d0 <MX_ADC1_Init+0xd8>)
 800330e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003310:	4b2e      	ldr	r3, [pc, #184]	; (80033cc <MX_ADC1_Init+0xd4>)
 8003312:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003316:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8003318:	4b2c      	ldr	r3, [pc, #176]	; (80033cc <MX_ADC1_Init+0xd4>)
 800331a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800331e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003320:	4b2a      	ldr	r3, [pc, #168]	; (80033cc <MX_ADC1_Init+0xd4>)
 8003322:	2201      	movs	r2, #1
 8003324:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003326:	4b29      	ldr	r3, [pc, #164]	; (80033cc <MX_ADC1_Init+0xd4>)
 8003328:	2200      	movs	r2, #0
 800332a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800332c:	4b27      	ldr	r3, [pc, #156]	; (80033cc <MX_ADC1_Init+0xd4>)
 800332e:	2200      	movs	r2, #0
 8003330:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003334:	4b25      	ldr	r3, [pc, #148]	; (80033cc <MX_ADC1_Init+0xd4>)
 8003336:	2200      	movs	r2, #0
 8003338:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800333a:	4b24      	ldr	r3, [pc, #144]	; (80033cc <MX_ADC1_Init+0xd4>)
 800333c:	4a25      	ldr	r2, [pc, #148]	; (80033d4 <MX_ADC1_Init+0xdc>)
 800333e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003340:	4b22      	ldr	r3, [pc, #136]	; (80033cc <MX_ADC1_Init+0xd4>)
 8003342:	2200      	movs	r2, #0
 8003344:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8003346:	4b21      	ldr	r3, [pc, #132]	; (80033cc <MX_ADC1_Init+0xd4>)
 8003348:	2203      	movs	r2, #3
 800334a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800334c:	4b1f      	ldr	r3, [pc, #124]	; (80033cc <MX_ADC1_Init+0xd4>)
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003354:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <MX_ADC1_Init+0xd4>)
 8003356:	2201      	movs	r2, #1
 8003358:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800335a:	481c      	ldr	r0, [pc, #112]	; (80033cc <MX_ADC1_Init+0xd4>)
 800335c:	f001 fbd2 	bl	8004b04 <HAL_ADC_Init>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8003366:	f000 fcb7 	bl	8003cd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800336a:	2301      	movs	r3, #1
 800336c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800336e:	2301      	movs	r3, #1
 8003370:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003372:	2300      	movs	r3, #0
 8003374:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003376:	463b      	mov	r3, r7
 8003378:	4619      	mov	r1, r3
 800337a:	4814      	ldr	r0, [pc, #80]	; (80033cc <MX_ADC1_Init+0xd4>)
 800337c:	f001 fdc8 	bl	8004f10 <HAL_ADC_ConfigChannel>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8003386:	f000 fca7 	bl	8003cd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800338a:	2300      	movs	r3, #0
 800338c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800338e:	2302      	movs	r3, #2
 8003390:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003392:	463b      	mov	r3, r7
 8003394:	4619      	mov	r1, r3
 8003396:	480d      	ldr	r0, [pc, #52]	; (80033cc <MX_ADC1_Init+0xd4>)
 8003398:	f001 fdba 	bl	8004f10 <HAL_ADC_ConfigChannel>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d001      	beq.n	80033a6 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 80033a2:	f000 fc99 	bl	8003cd8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80033a6:	2304      	movs	r3, #4
 80033a8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80033aa:	2303      	movs	r3, #3
 80033ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033ae:	463b      	mov	r3, r7
 80033b0:	4619      	mov	r1, r3
 80033b2:	4806      	ldr	r0, [pc, #24]	; (80033cc <MX_ADC1_Init+0xd4>)
 80033b4:	f001 fdac 	bl	8004f10 <HAL_ADC_ConfigChannel>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d001      	beq.n	80033c2 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 80033be:	f000 fc8b 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80033c2:	bf00      	nop
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	20000498 	.word	0x20000498
 80033d0:	40012000 	.word	0x40012000
 80033d4:	0f000001 	.word	0x0f000001

080033d8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80033dc:	4b17      	ldr	r3, [pc, #92]	; (800343c <MX_SPI1_Init+0x64>)
 80033de:	4a18      	ldr	r2, [pc, #96]	; (8003440 <MX_SPI1_Init+0x68>)
 80033e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80033e2:	4b16      	ldr	r3, [pc, #88]	; (800343c <MX_SPI1_Init+0x64>)
 80033e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80033ea:	4b14      	ldr	r3, [pc, #80]	; (800343c <MX_SPI1_Init+0x64>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033f0:	4b12      	ldr	r3, [pc, #72]	; (800343c <MX_SPI1_Init+0x64>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033f6:	4b11      	ldr	r3, [pc, #68]	; (800343c <MX_SPI1_Init+0x64>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033fc:	4b0f      	ldr	r3, [pc, #60]	; (800343c <MX_SPI1_Init+0x64>)
 80033fe:	2200      	movs	r2, #0
 8003400:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003402:	4b0e      	ldr	r3, [pc, #56]	; (800343c <MX_SPI1_Init+0x64>)
 8003404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003408:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800340a:	4b0c      	ldr	r3, [pc, #48]	; (800343c <MX_SPI1_Init+0x64>)
 800340c:	2218      	movs	r2, #24
 800340e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003410:	4b0a      	ldr	r3, [pc, #40]	; (800343c <MX_SPI1_Init+0x64>)
 8003412:	2200      	movs	r2, #0
 8003414:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003416:	4b09      	ldr	r3, [pc, #36]	; (800343c <MX_SPI1_Init+0x64>)
 8003418:	2200      	movs	r2, #0
 800341a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800341c:	4b07      	ldr	r3, [pc, #28]	; (800343c <MX_SPI1_Init+0x64>)
 800341e:	2200      	movs	r2, #0
 8003420:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003422:	4b06      	ldr	r3, [pc, #24]	; (800343c <MX_SPI1_Init+0x64>)
 8003424:	220a      	movs	r2, #10
 8003426:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003428:	4804      	ldr	r0, [pc, #16]	; (800343c <MX_SPI1_Init+0x64>)
 800342a:	f003 fb5d 	bl	8006ae8 <HAL_SPI_Init>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003434:	f000 fc50 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003438:	bf00      	nop
 800343a:	bd80      	pop	{r7, pc}
 800343c:	20000540 	.word	0x20000540
 8003440:	40013000 	.word	0x40013000

08003444 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003448:	4b17      	ldr	r3, [pc, #92]	; (80034a8 <MX_SPI3_Init+0x64>)
 800344a:	4a18      	ldr	r2, [pc, #96]	; (80034ac <MX_SPI3_Init+0x68>)
 800344c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800344e:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <MX_SPI3_Init+0x64>)
 8003450:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003454:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003456:	4b14      	ldr	r3, [pc, #80]	; (80034a8 <MX_SPI3_Init+0x64>)
 8003458:	2200      	movs	r2, #0
 800345a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800345c:	4b12      	ldr	r3, [pc, #72]	; (80034a8 <MX_SPI3_Init+0x64>)
 800345e:	2200      	movs	r2, #0
 8003460:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003462:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <MX_SPI3_Init+0x64>)
 8003464:	2200      	movs	r2, #0
 8003466:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003468:	4b0f      	ldr	r3, [pc, #60]	; (80034a8 <MX_SPI3_Init+0x64>)
 800346a:	2200      	movs	r2, #0
 800346c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800346e:	4b0e      	ldr	r3, [pc, #56]	; (80034a8 <MX_SPI3_Init+0x64>)
 8003470:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003474:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003476:	4b0c      	ldr	r3, [pc, #48]	; (80034a8 <MX_SPI3_Init+0x64>)
 8003478:	2200      	movs	r2, #0
 800347a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800347c:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <MX_SPI3_Init+0x64>)
 800347e:	2200      	movs	r2, #0
 8003480:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003482:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <MX_SPI3_Init+0x64>)
 8003484:	2200      	movs	r2, #0
 8003486:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003488:	4b07      	ldr	r3, [pc, #28]	; (80034a8 <MX_SPI3_Init+0x64>)
 800348a:	2200      	movs	r2, #0
 800348c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800348e:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <MX_SPI3_Init+0x64>)
 8003490:	220a      	movs	r2, #10
 8003492:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003494:	4804      	ldr	r0, [pc, #16]	; (80034a8 <MX_SPI3_Init+0x64>)
 8003496:	f003 fb27 	bl	8006ae8 <HAL_SPI_Init>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80034a0:	f000 fc1a 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80034a4:	bf00      	nop
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20000598 	.word	0x20000598
 80034ac:	40003c00 	.word	0x40003c00

080034b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034b6:	f107 0308 	add.w	r3, r7, #8
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	605a      	str	r2, [r3, #4]
 80034c0:	609a      	str	r2, [r3, #8]
 80034c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034c4:	463b      	mov	r3, r7
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80034cc:	4b1d      	ldr	r3, [pc, #116]	; (8003544 <MX_TIM4_Init+0x94>)
 80034ce:	4a1e      	ldr	r2, [pc, #120]	; (8003548 <MX_TIM4_Init+0x98>)
 80034d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50000;
 80034d2:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <MX_TIM4_Init+0x94>)
 80034d4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80034d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034da:	4b1a      	ldr	r3, [pc, #104]	; (8003544 <MX_TIM4_Init+0x94>)
 80034dc:	2200      	movs	r2, #0
 80034de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 80034e0:	4b18      	ldr	r3, [pc, #96]	; (8003544 <MX_TIM4_Init+0x94>)
 80034e2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80034e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034e8:	4b16      	ldr	r3, [pc, #88]	; (8003544 <MX_TIM4_Init+0x94>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <MX_TIM4_Init+0x94>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80034f4:	4813      	ldr	r0, [pc, #76]	; (8003544 <MX_TIM4_Init+0x94>)
 80034f6:	f004 f847 	bl	8007588 <HAL_TIM_Base_Init>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003500:	f000 fbea 	bl	8003cd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003508:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800350a:	f107 0308 	add.w	r3, r7, #8
 800350e:	4619      	mov	r1, r3
 8003510:	480c      	ldr	r0, [pc, #48]	; (8003544 <MX_TIM4_Init+0x94>)
 8003512:	f004 fc03 	bl	8007d1c <HAL_TIM_ConfigClockSource>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800351c:	f000 fbdc 	bl	8003cd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003520:	2300      	movs	r3, #0
 8003522:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003524:	2300      	movs	r3, #0
 8003526:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003528:	463b      	mov	r3, r7
 800352a:	4619      	mov	r1, r3
 800352c:	4805      	ldr	r0, [pc, #20]	; (8003544 <MX_TIM4_Init+0x94>)
 800352e:	f004 ffb1 	bl	8008494 <HAL_TIMEx_MasterConfigSynchronization>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003538:	f000 fbce 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800353c:	bf00      	nop
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	200005f0 	.word	0x200005f0
 8003548:	40000800 	.word	0x40000800

0800354c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003552:	1d3b      	adds	r3, r7, #4
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	605a      	str	r2, [r3, #4]
 800355a:	609a      	str	r2, [r3, #8]
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	611a      	str	r2, [r3, #16]
 8003560:	615a      	str	r2, [r3, #20]
 8003562:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003564:	4b20      	ldr	r3, [pc, #128]	; (80035e8 <MX_TIM9_Init+0x9c>)
 8003566:	4a21      	ldr	r2, [pc, #132]	; (80035ec <MX_TIM9_Init+0xa0>)
 8003568:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 800356a:	4b1f      	ldr	r3, [pc, #124]	; (80035e8 <MX_TIM9_Init+0x9c>)
 800356c:	2200      	movs	r2, #0
 800356e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003570:	4b1d      	ldr	r3, [pc, #116]	; (80035e8 <MX_TIM9_Init+0x9c>)
 8003572:	2200      	movs	r2, #0
 8003574:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 60000;
 8003576:	4b1c      	ldr	r3, [pc, #112]	; (80035e8 <MX_TIM9_Init+0x9c>)
 8003578:	f64e 2260 	movw	r2, #60000	; 0xea60
 800357c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800357e:	4b1a      	ldr	r3, [pc, #104]	; (80035e8 <MX_TIM9_Init+0x9c>)
 8003580:	2200      	movs	r2, #0
 8003582:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003584:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <MX_TIM9_Init+0x9c>)
 8003586:	2200      	movs	r2, #0
 8003588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800358a:	4817      	ldr	r0, [pc, #92]	; (80035e8 <MX_TIM9_Init+0x9c>)
 800358c:	f004 f8ae 	bl	80076ec <HAL_TIM_PWM_Init>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8003596:	f000 fb9f 	bl	8003cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800359a:	2360      	movs	r3, #96	; 0x60
 800359c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 30000;
 800359e:	f247 5330 	movw	r3, #30000	; 0x7530
 80035a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80035a4:	2300      	movs	r3, #0
 80035a6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80035ac:	1d3b      	adds	r3, r7, #4
 80035ae:	2200      	movs	r2, #0
 80035b0:	4619      	mov	r1, r3
 80035b2:	480d      	ldr	r0, [pc, #52]	; (80035e8 <MX_TIM9_Init+0x9c>)
 80035b4:	f004 faf0 	bl	8007b98 <HAL_TIM_PWM_ConfigChannel>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <MX_TIM9_Init+0x76>
  {
    Error_Handler();
 80035be:	f000 fb8b 	bl	8003cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80035c2:	1d3b      	adds	r3, r7, #4
 80035c4:	2204      	movs	r2, #4
 80035c6:	4619      	mov	r1, r3
 80035c8:	4807      	ldr	r0, [pc, #28]	; (80035e8 <MX_TIM9_Init+0x9c>)
 80035ca:	f004 fae5 	bl	8007b98 <HAL_TIM_PWM_ConfigChannel>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <MX_TIM9_Init+0x8c>
  {
    Error_Handler();
 80035d4:	f000 fb80 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80035d8:	4803      	ldr	r0, [pc, #12]	; (80035e8 <MX_TIM9_Init+0x9c>)
 80035da:	f000 ffc7 	bl	800456c <HAL_TIM_MspPostInit>

}
 80035de:	bf00      	nop
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000638 	.word	0x20000638
 80035ec:	40014000 	.word	0x40014000

080035f0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80035f4:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <MX_TIM10_Init+0x40>)
 80035f6:	4a0f      	ldr	r2, [pc, #60]	; (8003634 <MX_TIM10_Init+0x44>)
 80035f8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 50000;
 80035fa:	4b0d      	ldr	r3, [pc, #52]	; (8003630 <MX_TIM10_Init+0x40>)
 80035fc:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003600:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003602:	4b0b      	ldr	r3, [pc, #44]	; (8003630 <MX_TIM10_Init+0x40>)
 8003604:	2200      	movs	r2, #0
 8003606:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50;
 8003608:	4b09      	ldr	r3, [pc, #36]	; (8003630 <MX_TIM10_Init+0x40>)
 800360a:	2232      	movs	r2, #50	; 0x32
 800360c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800360e:	4b08      	ldr	r3, [pc, #32]	; (8003630 <MX_TIM10_Init+0x40>)
 8003610:	2200      	movs	r2, #0
 8003612:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003614:	4b06      	ldr	r3, [pc, #24]	; (8003630 <MX_TIM10_Init+0x40>)
 8003616:	2200      	movs	r2, #0
 8003618:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800361a:	4805      	ldr	r0, [pc, #20]	; (8003630 <MX_TIM10_Init+0x40>)
 800361c:	f003 ffb4 	bl	8007588 <HAL_TIM_Base_Init>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8003626:	f000 fb57 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000680 	.word	0x20000680
 8003634:	40014400 	.word	0x40014400

08003638 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b088      	sub	sp, #32
 800363c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800363e:	1d3b      	adds	r3, r7, #4
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	605a      	str	r2, [r3, #4]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	611a      	str	r2, [r3, #16]
 800364c:	615a      	str	r2, [r3, #20]
 800364e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8003650:	4b1e      	ldr	r3, [pc, #120]	; (80036cc <MX_TIM11_Init+0x94>)
 8003652:	4a1f      	ldr	r2, [pc, #124]	; (80036d0 <MX_TIM11_Init+0x98>)
 8003654:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8003656:	4b1d      	ldr	r3, [pc, #116]	; (80036cc <MX_TIM11_Init+0x94>)
 8003658:	2200      	movs	r2, #0
 800365a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800365c:	4b1b      	ldr	r3, [pc, #108]	; (80036cc <MX_TIM11_Init+0x94>)
 800365e:	2200      	movs	r2, #0
 8003660:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8003662:	4b1a      	ldr	r3, [pc, #104]	; (80036cc <MX_TIM11_Init+0x94>)
 8003664:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003668:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800366a:	4b18      	ldr	r3, [pc, #96]	; (80036cc <MX_TIM11_Init+0x94>)
 800366c:	2200      	movs	r2, #0
 800366e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003670:	4b16      	ldr	r3, [pc, #88]	; (80036cc <MX_TIM11_Init+0x94>)
 8003672:	2200      	movs	r2, #0
 8003674:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8003676:	4815      	ldr	r0, [pc, #84]	; (80036cc <MX_TIM11_Init+0x94>)
 8003678:	f003 ff86 	bl	8007588 <HAL_TIM_Base_Init>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8003682:	f000 fb29 	bl	8003cd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8003686:	4811      	ldr	r0, [pc, #68]	; (80036cc <MX_TIM11_Init+0x94>)
 8003688:	f004 f830 	bl	80076ec <HAL_TIM_PWM_Init>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8003692:	f000 fb21 	bl	8003cd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003696:	2360      	movs	r3, #96	; 0x60
 8003698:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036a2:	2300      	movs	r3, #0
 80036a4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80036a6:	1d3b      	adds	r3, r7, #4
 80036a8:	2200      	movs	r2, #0
 80036aa:	4619      	mov	r1, r3
 80036ac:	4807      	ldr	r0, [pc, #28]	; (80036cc <MX_TIM11_Init+0x94>)
 80036ae:	f004 fa73 	bl	8007b98 <HAL_TIM_PWM_ConfigChannel>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80036b8:	f000 fb0e 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80036bc:	4803      	ldr	r0, [pc, #12]	; (80036cc <MX_TIM11_Init+0x94>)
 80036be:	f000 ff55 	bl	800456c <HAL_TIM_MspPostInit>

}
 80036c2:	bf00      	nop
 80036c4:	3720      	adds	r7, #32
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200006c8 	.word	0x200006c8
 80036d0:	40014800 	.word	0x40014800

080036d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036d8:	4b11      	ldr	r3, [pc, #68]	; (8003720 <MX_USART1_UART_Init+0x4c>)
 80036da:	4a12      	ldr	r2, [pc, #72]	; (8003724 <MX_USART1_UART_Init+0x50>)
 80036dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80036de:	4b10      	ldr	r3, [pc, #64]	; (8003720 <MX_USART1_UART_Init+0x4c>)
 80036e0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80036e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036e6:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <MX_USART1_UART_Init+0x4c>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <MX_USART1_UART_Init+0x4c>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036f2:	4b0b      	ldr	r3, [pc, #44]	; (8003720 <MX_USART1_UART_Init+0x4c>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036f8:	4b09      	ldr	r3, [pc, #36]	; (8003720 <MX_USART1_UART_Init+0x4c>)
 80036fa:	220c      	movs	r2, #12
 80036fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036fe:	4b08      	ldr	r3, [pc, #32]	; (8003720 <MX_USART1_UART_Init+0x4c>)
 8003700:	2200      	movs	r2, #0
 8003702:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003704:	4b06      	ldr	r3, [pc, #24]	; (8003720 <MX_USART1_UART_Init+0x4c>)
 8003706:	2200      	movs	r2, #0
 8003708:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800370a:	4805      	ldr	r0, [pc, #20]	; (8003720 <MX_USART1_UART_Init+0x4c>)
 800370c:	f004 ff44 	bl	8008598 <HAL_UART_Init>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003716:	f000 fadf 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800371a:	bf00      	nop
 800371c:	bd80      	pop	{r7, pc}
 800371e:	bf00      	nop
 8003720:	20000710 	.word	0x20000710
 8003724:	40011000 	.word	0x40011000

08003728 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800372e:	2300      	movs	r3, #0
 8003730:	607b      	str	r3, [r7, #4]
 8003732:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <MX_DMA_Init+0x3c>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	4a0b      	ldr	r2, [pc, #44]	; (8003764 <MX_DMA_Init+0x3c>)
 8003738:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800373c:	6313      	str	r3, [r2, #48]	; 0x30
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <MX_DMA_Init+0x3c>)
 8003740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003742:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003746:	607b      	str	r3, [r7, #4]
 8003748:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800374a:	2200      	movs	r2, #0
 800374c:	2100      	movs	r1, #0
 800374e:	2038      	movs	r0, #56	; 0x38
 8003750:	f001 ff69 	bl	8005626 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003754:	2038      	movs	r0, #56	; 0x38
 8003756:	f001 ff82 	bl	800565e <HAL_NVIC_EnableIRQ>

}
 800375a:	bf00      	nop
 800375c:	3708      	adds	r7, #8
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	40023800 	.word	0x40023800

08003768 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b08a      	sub	sp, #40	; 0x28
 800376c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376e:	f107 0314 	add.w	r3, r7, #20
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	605a      	str	r2, [r3, #4]
 8003778:	609a      	str	r2, [r3, #8]
 800377a:	60da      	str	r2, [r3, #12]
 800377c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800377e:	2300      	movs	r3, #0
 8003780:	613b      	str	r3, [r7, #16]
 8003782:	4b5e      	ldr	r3, [pc, #376]	; (80038fc <MX_GPIO_Init+0x194>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	4a5d      	ldr	r2, [pc, #372]	; (80038fc <MX_GPIO_Init+0x194>)
 8003788:	f043 0304 	orr.w	r3, r3, #4
 800378c:	6313      	str	r3, [r2, #48]	; 0x30
 800378e:	4b5b      	ldr	r3, [pc, #364]	; (80038fc <MX_GPIO_Init+0x194>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	f003 0304 	and.w	r3, r3, #4
 8003796:	613b      	str	r3, [r7, #16]
 8003798:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	4b57      	ldr	r3, [pc, #348]	; (80038fc <MX_GPIO_Init+0x194>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	4a56      	ldr	r2, [pc, #344]	; (80038fc <MX_GPIO_Init+0x194>)
 80037a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037a8:	6313      	str	r3, [r2, #48]	; 0x30
 80037aa:	4b54      	ldr	r3, [pc, #336]	; (80038fc <MX_GPIO_Init+0x194>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b6:	2300      	movs	r3, #0
 80037b8:	60bb      	str	r3, [r7, #8]
 80037ba:	4b50      	ldr	r3, [pc, #320]	; (80038fc <MX_GPIO_Init+0x194>)
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	4a4f      	ldr	r2, [pc, #316]	; (80038fc <MX_GPIO_Init+0x194>)
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	6313      	str	r3, [r2, #48]	; 0x30
 80037c6:	4b4d      	ldr	r3, [pc, #308]	; (80038fc <MX_GPIO_Init+0x194>)
 80037c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ca:	f003 0301 	and.w	r3, r3, #1
 80037ce:	60bb      	str	r3, [r7, #8]
 80037d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	607b      	str	r3, [r7, #4]
 80037d6:	4b49      	ldr	r3, [pc, #292]	; (80038fc <MX_GPIO_Init+0x194>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	4a48      	ldr	r2, [pc, #288]	; (80038fc <MX_GPIO_Init+0x194>)
 80037dc:	f043 0302 	orr.w	r3, r3, #2
 80037e0:	6313      	str	r3, [r2, #48]	; 0x30
 80037e2:	4b46      	ldr	r3, [pc, #280]	; (80038fc <MX_GPIO_Init+0x194>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	607b      	str	r3, [r7, #4]
 80037ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80037ee:	2200      	movs	r2, #0
 80037f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80037f4:	4842      	ldr	r0, [pc, #264]	; (8003900 <MX_GPIO_Init+0x198>)
 80037f6:	f002 fceb 	bl	80061d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TFT_CS_Pin|TFT_RST_Pin|TFT_DC_Pin|RF_SET_Pin
 80037fa:	2200      	movs	r2, #0
 80037fc:	f244 410e 	movw	r1, #17422	; 0x440e
 8003800:	4840      	ldr	r0, [pc, #256]	; (8003904 <MX_GPIO_Init+0x19c>)
 8003802:	f002 fce5 	bl	80061d0 <HAL_GPIO_WritePin>
                          |SD_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_CS_GPIO_Port, RF_CS_Pin, GPIO_PIN_RESET);
 8003806:	2200      	movs	r2, #0
 8003808:	f44f 7180 	mov.w	r1, #256	; 0x100
 800380c:	483e      	ldr	r0, [pc, #248]	; (8003908 <MX_GPIO_Init+0x1a0>)
 800380e:	f002 fcdf 	bl	80061d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003818:	2301      	movs	r3, #1
 800381a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	2300      	movs	r3, #0
 800381e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003820:	2300      	movs	r3, #0
 8003822:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003824:	f107 0314 	add.w	r3, r7, #20
 8003828:	4619      	mov	r1, r3
 800382a:	4835      	ldr	r0, [pc, #212]	; (8003900 <MX_GPIO_Init+0x198>)
 800382c:	f002 fb34 	bl	8005e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 BUT_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|BUT_Pin;
 8003830:	f242 0301 	movw	r3, #8193	; 0x2001
 8003834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800383a:	2301      	movs	r3, #1
 800383c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800383e:	f107 0314 	add.w	r3, r7, #20
 8003842:	4619      	mov	r1, r3
 8003844:	482f      	ldr	r0, [pc, #188]	; (8003904 <MX_GPIO_Init+0x19c>)
 8003846:	f002 fb27 	bl	8005e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_CS_Pin TFT_DC_Pin */
  GPIO_InitStruct.Pin = TFT_CS_Pin|TFT_DC_Pin;
 800384a:	f240 4302 	movw	r3, #1026	; 0x402
 800384e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003850:	2301      	movs	r3, #1
 8003852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003854:	2300      	movs	r3, #0
 8003856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003858:	2302      	movs	r3, #2
 800385a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800385c:	f107 0314 	add.w	r3, r7, #20
 8003860:	4619      	mov	r1, r3
 8003862:	4828      	ldr	r0, [pc, #160]	; (8003904 <MX_GPIO_Init+0x19c>)
 8003864:	f002 fb18 	bl	8005e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : TFT_RST_Pin RF_SET_Pin */
  GPIO_InitStruct.Pin = TFT_RST_Pin|RF_SET_Pin;
 8003868:	f244 0304 	movw	r3, #16388	; 0x4004
 800386c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800386e:	2301      	movs	r3, #1
 8003870:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003872:	2300      	movs	r3, #0
 8003874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003876:	2300      	movs	r3, #0
 8003878:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800387a:	f107 0314 	add.w	r3, r7, #20
 800387e:	4619      	mov	r1, r3
 8003880:	4820      	ldr	r0, [pc, #128]	; (8003904 <MX_GPIO_Init+0x19c>)
 8003882:	f002 fb09 	bl	8005e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PIN_R_Pin */
  GPIO_InitStruct.Pin = PIN_R_Pin;
 8003886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800388a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800388c:	2300      	movs	r3, #0
 800388e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003890:	2300      	movs	r3, #0
 8003892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PIN_R_GPIO_Port, &GPIO_InitStruct);
 8003894:	f107 0314 	add.w	r3, r7, #20
 8003898:	4619      	mov	r1, r3
 800389a:	481a      	ldr	r0, [pc, #104]	; (8003904 <MX_GPIO_Init+0x19c>)
 800389c:	f002 fafc 	bl	8005e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_CS_Pin */
  GPIO_InitStruct.Pin = RF_CS_Pin;
 80038a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038a6:	2301      	movs	r3, #1
 80038a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038aa:	2300      	movs	r3, #0
 80038ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ae:	2300      	movs	r3, #0
 80038b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RF_CS_GPIO_Port, &GPIO_InitStruct);
 80038b2:	f107 0314 	add.w	r3, r7, #20
 80038b6:	4619      	mov	r1, r3
 80038b8:	4813      	ldr	r0, [pc, #76]	; (8003908 <MX_GPIO_Init+0x1a0>)
 80038ba:	f002 faed 	bl	8005e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUT2_Pin */
  GPIO_InitStruct.Pin = BUT2_Pin;
 80038be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038c8:	2301      	movs	r3, #1
 80038ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUT2_GPIO_Port, &GPIO_InitStruct);
 80038cc:	f107 0314 	add.w	r3, r7, #20
 80038d0:	4619      	mov	r1, r3
 80038d2:	480d      	ldr	r0, [pc, #52]	; (8003908 <MX_GPIO_Init+0x1a0>)
 80038d4:	f002 fae0 	bl	8005e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80038d8:	2308      	movs	r3, #8
 80038da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038dc:	2301      	movs	r3, #1
 80038de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80038e4:	2301      	movs	r3, #1
 80038e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80038e8:	f107 0314 	add.w	r3, r7, #20
 80038ec:	4619      	mov	r1, r3
 80038ee:	4805      	ldr	r0, [pc, #20]	; (8003904 <MX_GPIO_Init+0x19c>)
 80038f0:	f002 fad2 	bl	8005e98 <HAL_GPIO_Init>

}
 80038f4:	bf00      	nop
 80038f6:	3728      	adds	r7, #40	; 0x28
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40023800 	.word	0x40023800
 8003900:	40020800 	.word	0x40020800
 8003904:	40020400 	.word	0x40020400
 8003908:	40020000 	.word	0x40020000

0800390c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
//----------------------------------------------------------
// Прерывания-счетчик полученных данных (срабатывает когда получаем данные)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800390c:	b480      	push	{r7}
 800390e:	b083      	sub	sp, #12
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	if(huart == &huart1)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a0a      	ldr	r2, [pc, #40]	; (8003940 <HAL_UART_RxCpltCallback+0x34>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d10b      	bne.n	8003934 <HAL_UART_RxCpltCallback+0x28>
	{
		if(resive_OK == 99) resive_OK = 0;
 800391c:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_UART_RxCpltCallback+0x38>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2b63      	cmp	r3, #99	; 0x63
 8003922:	d102      	bne.n	800392a <HAL_UART_RxCpltCallback+0x1e>
 8003924:	4b07      	ldr	r3, [pc, #28]	; (8003944 <HAL_UART_RxCpltCallback+0x38>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
		resive_OK += 1;
 800392a:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_UART_RxCpltCallback+0x38>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	3301      	adds	r3, #1
 8003930:	4a04      	ldr	r2, [pc, #16]	; (8003944 <HAL_UART_RxCpltCallback+0x38>)
 8003932:	6013      	str	r3, [r2, #0]
	}
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr
 8003940:	20000710 	.word	0x20000710
 8003944:	20000010 	.word	0x20000010

08003948 <HAL_TIM_PeriodElapsedCallback>:
//----------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
	  if (htim == &htim9)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a95      	ldr	r2, [pc, #596]	; (8003ba8 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d106      	bne.n	8003966 <HAL_TIM_PeriodElapsedCallback+0x1e>
	  {
		  Timer1++;
 8003958:	4b94      	ldr	r3, [pc, #592]	; (8003bac <HAL_TIM_PeriodElapsedCallback+0x264>)
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	3301      	adds	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	4b92      	ldr	r3, [pc, #584]	; (8003bac <HAL_TIM_PeriodElapsedCallback+0x264>)
 8003964:	801a      	strh	r2, [r3, #0]
	  }
	  if (htim == &htim4)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	4a91      	ldr	r2, [pc, #580]	; (8003bb0 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800396a:	4293      	cmp	r3, r2
 800396c:	f040 8100 	bne.w	8003b70 <HAL_TIM_PeriodElapsedCallback+0x228>
	  {
		  if(SIGNAL == true) HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8003970:	4b90      	ldr	r3, [pc, #576]	; (8003bb4 <HAL_TIM_PeriodElapsedCallback+0x26c>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d004      	beq.n	8003982 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8003978:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800397c:	488e      	ldr	r0, [pc, #568]	; (8003bb8 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800397e:	f002 fc40 	bl	8006202 <HAL_GPIO_TogglePin>
		  for(int i = 0; i < 3 ; i++)	// Постоянная проверка положения джойстика
 8003982:	2300      	movs	r3, #0
 8003984:	60fb      	str	r3, [r7, #12]
 8003986:	e011      	b.n	80039ac <HAL_TIM_PeriodElapsedCallback+0x64>
		  {
		    u[i] = (float)(data[i]);
 8003988:	4a8c      	ldr	r2, [pc, #560]	; (8003bbc <HAL_TIM_PeriodElapsedCallback+0x274>)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003990:	b29b      	uxth	r3, r3
 8003992:	ee07 3a90 	vmov	s15, r3
 8003996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800399a:	4a89      	ldr	r2, [pc, #548]	; (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	edc3 7a00 	vstr	s15, [r3]
		  for(int i = 0; i < 3 ; i++)	// Постоянная проверка положения джойстика
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3301      	adds	r3, #1
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	ddea      	ble.n	8003988 <HAL_TIM_PeriodElapsedCallback+0x40>
		  }
		  if(flag_PWM_BLK == false)
 80039b2:	4b84      	ldr	r3, [pc, #528]	; (8003bc4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	f083 0301 	eor.w	r3, r3, #1
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d067      	beq.n	8003a90 <HAL_TIM_PeriodElapsedCallback+0x148>
		  {
			  if(flag_Menu == true || flag_Setings == true)
 80039c0:	4b81      	ldr	r3, [pc, #516]	; (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d103      	bne.n	80039d0 <HAL_TIM_PeriodElapsedCallback+0x88>
 80039c8:	4b80      	ldr	r3, [pc, #512]	; (8003bcc <HAL_TIM_PeriodElapsedCallback+0x284>)
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d05f      	beq.n	8003a90 <HAL_TIM_PeriodElapsedCallback+0x148>
			  {
				  if(u[0] < 60 && u[1] < 140 && u[1] > 110) // джойстик вниз
 80039d0:	4b7b      	ldr	r3, [pc, #492]	; (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80039d2:	edd3 7a00 	vldr	s15, [r3]
 80039d6:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003bd0 <HAL_TIM_PeriodElapsedCallback+0x288>
 80039da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039e2:	d525      	bpl.n	8003a30 <HAL_TIM_PeriodElapsedCallback+0xe8>
 80039e4:	4b76      	ldr	r3, [pc, #472]	; (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80039e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80039ea:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8003bd4 <HAL_TIM_PeriodElapsedCallback+0x28c>
 80039ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f6:	d51b      	bpl.n	8003a30 <HAL_TIM_PeriodElapsedCallback+0xe8>
 80039f8:	4b71      	ldr	r3, [pc, #452]	; (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 80039fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80039fe:	ed9f 7a76 	vldr	s14, [pc, #472]	; 8003bd8 <HAL_TIM_PeriodElapsedCallback+0x290>
 8003a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a0a:	dd11      	ble.n	8003a30 <HAL_TIM_PeriodElapsedCallback+0xe8>
				  {
					  if(flag_punkt != 4) flag_punkt++;
 8003a0c:	4b73      	ldr	r3, [pc, #460]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003a0e:	f993 3000 	ldrsb.w	r3, [r3]
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d009      	beq.n	8003a2a <HAL_TIM_PeriodElapsedCallback+0xe2>
 8003a16:	4b71      	ldr	r3, [pc, #452]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003a18:	f993 3000 	ldrsb.w	r3, [r3]
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	b25a      	sxtb	r2, r3
 8003a24:	4b6d      	ldr	r3, [pc, #436]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003a26:	701a      	strb	r2, [r3, #0]
 8003a28:	e002      	b.n	8003a30 <HAL_TIM_PeriodElapsedCallback+0xe8>
					  else flag_punkt = 4;
 8003a2a:	4b6c      	ldr	r3, [pc, #432]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003a2c:	2204      	movs	r2, #4
 8003a2e:	701a      	strb	r2, [r3, #0]
				  }

				  if(u[0] > 180 && u[1] < 140 && u[1] > 110) // джойстик вверх
 8003a30:	4b63      	ldr	r3, [pc, #396]	; (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003a32:	edd3 7a00 	vldr	s15, [r3]
 8003a36:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003be0 <HAL_TIM_PeriodElapsedCallback+0x298>
 8003a3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a42:	dd25      	ble.n	8003a90 <HAL_TIM_PeriodElapsedCallback+0x148>
 8003a44:	4b5e      	ldr	r3, [pc, #376]	; (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003a46:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a4a:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8003bd4 <HAL_TIM_PeriodElapsedCallback+0x28c>
 8003a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a56:	d51b      	bpl.n	8003a90 <HAL_TIM_PeriodElapsedCallback+0x148>
 8003a58:	4b59      	ldr	r3, [pc, #356]	; (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003a5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a5e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003bd8 <HAL_TIM_PeriodElapsedCallback+0x290>
 8003a62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a6a:	dd11      	ble.n	8003a90 <HAL_TIM_PeriodElapsedCallback+0x148>
				  {
					  if(flag_punkt != 1) flag_punkt--;
 8003a6c:	4b5b      	ldr	r3, [pc, #364]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003a6e:	f993 3000 	ldrsb.w	r3, [r3]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d009      	beq.n	8003a8a <HAL_TIM_PeriodElapsedCallback+0x142>
 8003a76:	4b59      	ldr	r3, [pc, #356]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003a78:	f993 3000 	ldrsb.w	r3, [r3]
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	b25a      	sxtb	r2, r3
 8003a84:	4b55      	ldr	r3, [pc, #340]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003a86:	701a      	strb	r2, [r3, #0]
 8003a88:	e002      	b.n	8003a90 <HAL_TIM_PeriodElapsedCallback+0x148>
					  else flag_punkt = 1;
 8003a8a:	4b54      	ldr	r3, [pc, #336]	; (8003bdc <HAL_TIM_PeriodElapsedCallback+0x294>)
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }

		  if(flag_PWM_BLK == true) // выбор положения по горизонтали
 8003a90:	4b4c      	ldr	r3, [pc, #304]	; (8003bc4 <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d06b      	beq.n	8003b70 <HAL_TIM_PeriodElapsedCallback+0x228>
		  {
			  if((u[1] < 60 && u[0] < 140 && u[0] > 110) && ((pers > 0) && (pers <= 100))) // влево
 8003a98:	4b49      	ldr	r3, [pc, #292]	; (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003a9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a9e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8003bd0 <HAL_TIM_PeriodElapsedCallback+0x288>
 8003aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aaa:	d52d      	bpl.n	8003b08 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8003aac:	4b44      	ldr	r3, [pc, #272]	; (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003aae:	edd3 7a00 	vldr	s15, [r3]
 8003ab2:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003bd4 <HAL_TIM_PeriodElapsedCallback+0x28c>
 8003ab6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003aba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003abe:	d523      	bpl.n	8003b08 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8003ac0:	4b3f      	ldr	r3, [pc, #252]	; (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003ac2:	edd3 7a00 	vldr	s15, [r3]
 8003ac6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003bd8 <HAL_TIM_PeriodElapsedCallback+0x290>
 8003aca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ace:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad2:	dd19      	ble.n	8003b08 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8003ad4:	4b43      	ldr	r3, [pc, #268]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8003adc:	4b41      	ldr	r3, [pc, #260]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b64      	cmp	r3, #100	; 0x64
 8003ae2:	d811      	bhi.n	8003b08 <HAL_TIM_PeriodElapsedCallback+0x1c0>
			  {
				  sost = TIM11->CCR1;
 8003ae4:	4b40      	ldr	r3, [pc, #256]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae8:	b2da      	uxtb	r2, r3
 8003aea:	4b40      	ldr	r3, [pc, #256]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003aec:	701a      	strb	r2, [r3, #0]
				  TIM11->CCR1 = TIM11->CCR1 - 13017;
 8003aee:	4b3e      	ldr	r3, [pc, #248]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af2:	4a3d      	ldr	r2, [pc, #244]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003af4:	f5a3 534b 	sub.w	r3, r3, #12992	; 0x32c0
 8003af8:	3b19      	subs	r3, #25
 8003afa:	6353      	str	r3, [r2, #52]	; 0x34

				  pers = pers - 20;
 8003afc:	4b39      	ldr	r3, [pc, #228]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	3b14      	subs	r3, #20
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	4b37      	ldr	r3, [pc, #220]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003b06:	701a      	strb	r2, [r3, #0]
			  }
			  if((u[1] > 180 && u[0] < 140 && u[0] > 110) && (pers < 100) && (pers >= 0)) // вправо
 8003b08:	4b2d      	ldr	r3, [pc, #180]	; (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003b0a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b0e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003be0 <HAL_TIM_PeriodElapsedCallback+0x298>
 8003b12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1a:	dd29      	ble.n	8003b70 <HAL_TIM_PeriodElapsedCallback+0x228>
 8003b1c:	4b28      	ldr	r3, [pc, #160]	; (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003b1e:	edd3 7a00 	vldr	s15, [r3]
 8003b22:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003bd4 <HAL_TIM_PeriodElapsedCallback+0x28c>
 8003b26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b2e:	d51f      	bpl.n	8003b70 <HAL_TIM_PeriodElapsedCallback+0x228>
 8003b30:	4b23      	ldr	r3, [pc, #140]	; (8003bc0 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8003b32:	edd3 7a00 	vldr	s15, [r3]
 8003b36:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8003bd8 <HAL_TIM_PeriodElapsedCallback+0x290>
 8003b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b42:	dd15      	ble.n	8003b70 <HAL_TIM_PeriodElapsedCallback+0x228>
 8003b44:	4b27      	ldr	r3, [pc, #156]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	2b63      	cmp	r3, #99	; 0x63
 8003b4a:	d811      	bhi.n	8003b70 <HAL_TIM_PeriodElapsedCallback+0x228>
			  {
				  sost = TIM11->CCR1;
 8003b4c:	4b26      	ldr	r3, [pc, #152]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	4b26      	ldr	r3, [pc, #152]	; (8003bec <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8003b54:	701a      	strb	r2, [r3, #0]
				  TIM11->CCR1 = TIM11->CCR1 + 13017;
 8003b56:	4b24      	ldr	r3, [pc, #144]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5a:	4a23      	ldr	r2, [pc, #140]	; (8003be8 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8003b5c:	f503 534b 	add.w	r3, r3, #12992	; 0x32c0
 8003b60:	3319      	adds	r3, #25
 8003b62:	6353      	str	r3, [r2, #52]	; 0x34

				  pers = pers + 20;
 8003b64:	4b1f      	ldr	r3, [pc, #124]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	3314      	adds	r3, #20
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	4b1d      	ldr	r3, [pc, #116]	; (8003be4 <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8003b6e:	701a      	strb	r2, [r3, #0]
			  }
		  }
	  }
	  if (htim == &htim10)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a1f      	ldr	r2, [pc, #124]	; (8003bf0 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	f040 8088 	bne.w	8003c8a <HAL_TIM_PeriodElapsedCallback+0x342>
	  {
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_RESET)
 8003b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003b7e:	481d      	ldr	r0, [pc, #116]	; (8003bf4 <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8003b80:	f002 fb0e 	bl	80061a0 <HAL_GPIO_ReadPin>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d147      	bne.n	8003c1a <HAL_TIM_PeriodElapsedCallback+0x2d2>
		  {
			  servoData = 1;
 8003b8a:	4b1b      	ldr	r3, [pc, #108]	; (8003bf8 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	601a      	str	r2, [r3, #0]
			  if(flag_Menu == true) fillCircle(148, 35, 5, YELLOW);
 8003b90:	4b0d      	ldr	r3, [pc, #52]	; (8003bc8 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d031      	beq.n	8003bfc <HAL_TIM_PeriodElapsedCallback+0x2b4>
 8003b98:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b9c:	2205      	movs	r2, #5
 8003b9e:	2123      	movs	r1, #35	; 0x23
 8003ba0:	2094      	movs	r0, #148	; 0x94
 8003ba2:	f7fd fc3b 	bl	800141c <fillCircle>
 8003ba6:	e02f      	b.n	8003c08 <HAL_TIM_PeriodElapsedCallback+0x2c0>
 8003ba8:	20000638 	.word	0x20000638
 8003bac:	20001404 	.word	0x20001404
 8003bb0:	200005f0 	.word	0x200005f0
 8003bb4:	200013f2 	.word	0x200013f2
 8003bb8:	40020800 	.word	0x40020800
 8003bbc:	2000075c 	.word	0x2000075c
 8003bc0:	20000764 	.word	0x20000764
 8003bc4:	200013f3 	.word	0x200013f3
 8003bc8:	20000009 	.word	0x20000009
 8003bcc:	20000757 	.word	0x20000757
 8003bd0:	42700000 	.word	0x42700000
 8003bd4:	430c0000 	.word	0x430c0000
 8003bd8:	42dc0000 	.word	0x42dc0000
 8003bdc:	2000000a 	.word	0x2000000a
 8003be0:	43340000 	.word	0x43340000
 8003be4:	20001425 	.word	0x20001425
 8003be8:	40014800 	.word	0x40014800
 8003bec:	20001424 	.word	0x20001424
 8003bf0:	20000680 	.word	0x20000680
 8003bf4:	40020400 	.word	0x40020400
 8003bf8:	200013fc 	.word	0x200013fc
			  else fillCircle(148, 35, 5, BLACK);
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	2205      	movs	r2, #5
 8003c00:	2123      	movs	r1, #35	; 0x23
 8003c02:	2094      	movs	r0, #148	; 0x94
 8003c04:	f7fd fc0a 	bl	800141c <fillCircle>
			  HAL_UART_Transmit(&huart1, (uint8_t*) &servoData, sizeof(1) , 100);
 8003c08:	2364      	movs	r3, #100	; 0x64
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	4926      	ldr	r1, [pc, #152]	; (8003ca8 <HAL_TIM_PeriodElapsedCallback+0x360>)
 8003c0e:	4827      	ldr	r0, [pc, #156]	; (8003cac <HAL_TIM_PeriodElapsedCallback+0x364>)
 8003c10:	f004 fd0f 	bl	8008632 <HAL_UART_Transmit>
			  /////////////////////////////////
			  SIGNAL = true;
 8003c14:	4b26      	ldr	r3, [pc, #152]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	701a      	strb	r2, [r3, #0]
		  }
		  SIGNAL = false;
 8003c1a:	4b25      	ldr	r3, [pc, #148]	; (8003cb0 <HAL_TIM_PeriodElapsedCallback+0x368>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
		  u[2] = ((float)data[2])*3.3/256;
 8003c20:	4b24      	ldr	r3, [pc, #144]	; (8003cb4 <HAL_TIM_PeriodElapsedCallback+0x36c>)
 8003c22:	889b      	ldrh	r3, [r3, #4]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	ee07 3a90 	vmov	s15, r3
 8003c2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2e:	ee17 0a90 	vmov	r0, s15
 8003c32:	f7fc fc91 	bl	8000558 <__aeabi_f2d>
 8003c36:	a318      	add	r3, pc, #96	; (adr r3, 8003c98 <HAL_TIM_PeriodElapsedCallback+0x350>)
 8003c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3c:	f7fc fce4 	bl	8000608 <__aeabi_dmul>
 8003c40:	4602      	mov	r2, r0
 8003c42:	460b      	mov	r3, r1
 8003c44:	4610      	mov	r0, r2
 8003c46:	4619      	mov	r1, r3
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	4b1a      	ldr	r3, [pc, #104]	; (8003cb8 <HAL_TIM_PeriodElapsedCallback+0x370>)
 8003c4e:	f7fc fe05 	bl	800085c <__aeabi_ddiv>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4610      	mov	r0, r2
 8003c58:	4619      	mov	r1, r3
 8003c5a:	f7fc ffad 	bl	8000bb8 <__aeabi_d2f>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	4a16      	ldr	r2, [pc, #88]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x374>)
 8003c62:	6093      	str	r3, [r2, #8]
		  Batdata = u[2]* (128 / 3.3); // число от 0 до 128 // значение заряда акума. в диапазоне 0 - 128
 8003c64:	4b15      	ldr	r3, [pc, #84]	; (8003cbc <HAL_TIM_PeriodElapsedCallback+0x374>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fc fc75 	bl	8000558 <__aeabi_f2d>
 8003c6e:	a30c      	add	r3, pc, #48	; (adr r3, 8003ca0 <HAL_TIM_PeriodElapsedCallback+0x358>)
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	f7fc fcc8 	bl	8000608 <__aeabi_dmul>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4619      	mov	r1, r3
 8003c80:	f7fc ff72 	bl	8000b68 <__aeabi_d2iz>
 8003c84:	4603      	mov	r3, r0
 8003c86:	4a0e      	ldr	r2, [pc, #56]	; (8003cc0 <HAL_TIM_PeriodElapsedCallback+0x378>)
 8003c88:	6013      	str	r3, [r2, #0]
	  }
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	f3af 8000 	nop.w
 8003c98:	66666666 	.word	0x66666666
 8003c9c:	400a6666 	.word	0x400a6666
 8003ca0:	364d9365 	.word	0x364d9365
 8003ca4:	404364d9 	.word	0x404364d9
 8003ca8:	200013fc 	.word	0x200013fc
 8003cac:	20000710 	.word	0x20000710
 8003cb0:	200013f2 	.word	0x200013f2
 8003cb4:	2000075c 	.word	0x2000075c
 8003cb8:	40700000 	.word	0x40700000
 8003cbc:	20000764 	.word	0x20000764
 8003cc0:	20001400 	.word	0x20001400

08003cc4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cdc:	b672      	cpsid	i
}
 8003cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ce0:	e7fe      	b.n	8003ce0 <Error_Handler+0x8>
	...

08003ce4 <Error>:
extern volatile uint16_t Timer1;
sd_info_ptr sdinfo;
char str1[60]={0};
//-----------------------------------------------
static void Error (void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	af00      	add	r7, sp, #0
  LD_ON;
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cee:	4802      	ldr	r0, [pc, #8]	; (8003cf8 <Error+0x14>)
 8003cf0:	f002 fa6e 	bl	80061d0 <HAL_GPIO_WritePin>
}
 8003cf4:	bf00      	nop
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40020800 	.word	0x40020800

08003cfc <SPIx_WriteRead>:
//-----------------------------------------------
uint8_t SPIx_WriteRead(uint8_t Byte)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b086      	sub	sp, #24
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	4603      	mov	r3, r0
 8003d04:	71fb      	strb	r3, [r7, #7]
  uint8_t receivedbyte = 0;
 8003d06:	2300      	movs	r3, #0
 8003d08:	73fb      	strb	r3, [r7, #15]
  if(HAL_SPI_TransmitReceive(&hspi3, (uint8_t*) &Byte, (uint8_t*) &receivedbyte, 1, 0x1000) != HAL_OK)
 8003d0a:	f107 020f 	add.w	r2, r7, #15
 8003d0e:	1df9      	adds	r1, r7, #7
 8003d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	2301      	movs	r3, #1
 8003d18:	4806      	ldr	r0, [pc, #24]	; (8003d34 <SPIx_WriteRead+0x38>)
 8003d1a:	f003 f8aa 	bl	8006e72 <HAL_SPI_TransmitReceive>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d001      	beq.n	8003d28 <SPIx_WriteRead+0x2c>
  {
    Error();
 8003d24:	f7ff ffde 	bl	8003ce4 <Error>
  }
  return receivedbyte;
 8003d28:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	3710      	adds	r7, #16
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	20000598 	.word	0x20000598

08003d38 <SPI_SendByte>:
//-----------------------------------------------
void SPI_SendByte(uint8_t bt)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	4603      	mov	r3, r0
 8003d40:	71fb      	strb	r3, [r7, #7]
  SPIx_WriteRead(bt);
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff ffd9 	bl	8003cfc <SPIx_WriteRead>
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <SPI_ReceiveByte>:
//-----------------------------------------------
uint8_t SPI_ReceiveByte(void)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b082      	sub	sp, #8
 8003d56:	af00      	add	r7, sp, #0
  uint8_t bt = SPIx_WriteRead(0xFF);
 8003d58:	20ff      	movs	r0, #255	; 0xff
 8003d5a:	f7ff ffcf 	bl	8003cfc <SPIx_WriteRead>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	71fb      	strb	r3, [r7, #7]
  return bt;
 8003d62:	79fb      	ldrb	r3, [r7, #7]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <SPI_Release>:
//-----------------------------------------------
void SPI_Release(void)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	af00      	add	r7, sp, #0
  SPIx_WriteRead(0xFF);
 8003d70:	20ff      	movs	r0, #255	; 0xff
 8003d72:	f7ff ffc3 	bl	8003cfc <SPIx_WriteRead>
}
 8003d76:	bf00      	nop
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <SPI_wait_ready>:
//-----------------------------------------------
uint8_t SPI_wait_ready(void)// ждем освобождение шины
{
 8003d7a:	b580      	push	{r7, lr}
 8003d7c:	b082      	sub	sp, #8
 8003d7e:	af00      	add	r7, sp, #0
  uint8_t res;
  uint16_t cnt;
  cnt=0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	80fb      	strh	r3, [r7, #6]
  do { //Ждем окончания состояния BUSY
    res=SPI_ReceiveByte();
 8003d84:	f7ff ffe5 	bl	8003d52 <SPI_ReceiveByte>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	717b      	strb	r3, [r7, #5]
    cnt++;
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	80fb      	strh	r3, [r7, #6]
  } while ( (res!=0xFF)&&(cnt<0xFFFF) );
 8003d92:	797b      	ldrb	r3, [r7, #5]
 8003d94:	2bff      	cmp	r3, #255	; 0xff
 8003d96:	d004      	beq.n	8003da2 <SPI_wait_ready+0x28>
 8003d98:	88fb      	ldrh	r3, [r7, #6]
 8003d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d1f0      	bne.n	8003d84 <SPI_wait_ready+0xa>
  if (cnt>=0xFFFF) return 1;
 8003da2:	88fb      	ldrh	r3, [r7, #6]
 8003da4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d101      	bne.n	8003db0 <SPI_wait_ready+0x36>
 8003dac:	2301      	movs	r3, #1
 8003dae:	e000      	b.n	8003db2 <SPI_wait_ready+0x38>
  return res;
 8003db0:	797b      	ldrb	r3, [r7, #5]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <SD_cmd>:
//-----------------------------------------------


static uint8_t SD_cmd (uint8_t cmd, uint32_t arg)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	6039      	str	r1, [r7, #0]
 8003dc6:	71fb      	strb	r3, [r7, #7]
  uint8_t n, res;
  // ACMD<n> is the command sequense of CMD55-CMD<n>
  if (cmd & 0x80)
 8003dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	da0e      	bge.n	8003dee <SD_cmd+0x32>
  {
    cmd &= 0x7F;
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dd6:	71fb      	strb	r3, [r7, #7]
    res = SD_cmd(CMD55, 0);
 8003dd8:	2100      	movs	r1, #0
 8003dda:	2077      	movs	r0, #119	; 0x77
 8003ddc:	f7ff ffee 	bl	8003dbc <SD_cmd>
 8003de0:	4603      	mov	r3, r0
 8003de2:	73bb      	strb	r3, [r7, #14]
    if (res > 1) return res;
 8003de4:	7bbb      	ldrb	r3, [r7, #14]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d901      	bls.n	8003dee <SD_cmd+0x32>
 8003dea:	7bbb      	ldrb	r3, [r7, #14]
 8003dec:	e049      	b.n	8003e82 <SD_cmd+0xc6>
  }
  // Select the card
  SS_SD_DESELECT();
 8003dee:	2201      	movs	r2, #1
 8003df0:	2108      	movs	r1, #8
 8003df2:	4826      	ldr	r0, [pc, #152]	; (8003e8c <SD_cmd+0xd0>)
 8003df4:	f002 f9ec 	bl	80061d0 <HAL_GPIO_WritePin>
  SPI_ReceiveByte();
 8003df8:	f7ff ffab 	bl	8003d52 <SPI_ReceiveByte>
  SS_SD_SELECT();
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2108      	movs	r1, #8
 8003e00:	4822      	ldr	r0, [pc, #136]	; (8003e8c <SD_cmd+0xd0>)
 8003e02:	f002 f9e5 	bl	80061d0 <HAL_GPIO_WritePin>
  SPI_ReceiveByte();
 8003e06:	f7ff ffa4 	bl	8003d52 <SPI_ReceiveByte>

  // Send a command packet
  SPI_SendByte(cmd); // Start + Command index
 8003e0a:	79fb      	ldrb	r3, [r7, #7]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7ff ff93 	bl	8003d38 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 24)); // Argument[31..24]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	0e1b      	lsrs	r3, r3, #24
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff ff8d 	bl	8003d38 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 16)); // Argument[23..16]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	0c1b      	lsrs	r3, r3, #16
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7ff ff87 	bl	8003d38 <SPI_SendByte>
  SPI_SendByte((uint8_t)(arg >> 8)); // Argument[15..8]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	0a1b      	lsrs	r3, r3, #8
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff ff81 	bl	8003d38 <SPI_SendByte>
  SPI_SendByte((uint8_t)arg); // Argument[7..0]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff ff7c 	bl	8003d38 <SPI_SendByte>

  n = 0x01; // Dummy CRC + Stop
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0) {n = 0x95;} // Valid CRC for CMD0(0)
 8003e44:	79fb      	ldrb	r3, [r7, #7]
 8003e46:	2b40      	cmp	r3, #64	; 0x40
 8003e48:	d101      	bne.n	8003e4e <SD_cmd+0x92>
 8003e4a:	2395      	movs	r3, #149	; 0x95
 8003e4c:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD8) {n = 0x87;} // Valid CRC for CMD8(0x1AA)
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	2b48      	cmp	r3, #72	; 0x48
 8003e52:	d101      	bne.n	8003e58 <SD_cmd+0x9c>
 8003e54:	2387      	movs	r3, #135	; 0x87
 8003e56:	73fb      	strb	r3, [r7, #15]
  SPI_SendByte(n);
 8003e58:	7bfb      	ldrb	r3, [r7, #15]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff ff6c 	bl	8003d38 <SPI_SendByte>

  // Receive a command response
    n = 10; // Wait for a valid response in timeout of 10 attempts
 8003e60:	230a      	movs	r3, #10
 8003e62:	73fb      	strb	r3, [r7, #15]
    do {
      res = SPI_ReceiveByte();
 8003e64:	f7ff ff75 	bl	8003d52 <SPI_ReceiveByte>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	73bb      	strb	r3, [r7, #14]
    } while ((res & 0x80) && --n);
 8003e6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	da05      	bge.n	8003e80 <SD_cmd+0xc4>
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
 8003e76:	3b01      	subs	r3, #1
 8003e78:	73fb      	strb	r3, [r7, #15]
 8003e7a:	7bfb      	ldrb	r3, [r7, #15]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1f1      	bne.n	8003e64 <SD_cmd+0xa8>
  return res;
 8003e80:	7bbb      	ldrb	r3, [r7, #14]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40020400 	.word	0x40020400

08003e90 <SD_PowerOn>:
//-----------------------------------------------
void SD_PowerOn(void)
{
 8003e90:	b480      	push	{r7}
 8003e92:	af00      	add	r7, sp, #0
  Timer1 = 0;
 8003e94:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <SD_PowerOn+0x24>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	801a      	strh	r2, [r3, #0]
  while(Timer1 < 2); //ждём 20 милисекунд, для того, чтобы напряжение стабилизировалось
 8003e9a:	bf00      	nop
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <SD_PowerOn+0x24>)
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d9fa      	bls.n	8003e9c <SD_PowerOn+0xc>
}
 8003ea6:	bf00      	nop
 8003ea8:	bf00      	nop
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20001404 	.word	0x20001404

08003eb8 <SD_Read_Block>:
//-----------------------------------------------
uint8_t SD_Read_Block (uint8_t *buff, uint32_t lba)

{
 8003eb8:	b590      	push	{r4, r7, lr}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;

  result=SD_cmd (CMD17, lba); //CMD17 даташит стр 50 и 96
 8003ec2:	6839      	ldr	r1, [r7, #0]
 8003ec4:	2051      	movs	r0, #81	; 0x51
 8003ec6:	f7ff ff79 	bl	8003dbc <SD_cmd>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	737b      	strb	r3, [r7, #13]
  if (result!=0x00) return 5; //Выйти, если результат не 0x00
 8003ece:	7b7b      	ldrb	r3, [r7, #13]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d001      	beq.n	8003ed8 <SD_Read_Block+0x20>
 8003ed4:	2305      	movs	r3, #5
 8003ed6:	e02f      	b.n	8003f38 <SD_Read_Block+0x80>
  SPI_Release();
 8003ed8:	f7ff ff48 	bl	8003d6c <SPI_Release>
  cnt=0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	81fb      	strh	r3, [r7, #14]
  do{ //Ждем начала блока
	  result=SPI_ReceiveByte();
 8003ee0:	f7ff ff37 	bl	8003d52 <SPI_ReceiveByte>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	737b      	strb	r3, [r7, #13]
	  cnt++;
 8003ee8:	89fb      	ldrh	r3, [r7, #14]
 8003eea:	3301      	adds	r3, #1
 8003eec:	81fb      	strh	r3, [r7, #14]
  } while ( (result!=0xFE)&&(cnt<0xFFFF) );
 8003eee:	7b7b      	ldrb	r3, [r7, #13]
 8003ef0:	2bfe      	cmp	r3, #254	; 0xfe
 8003ef2:	d004      	beq.n	8003efe <SD_Read_Block+0x46>
 8003ef4:	89fb      	ldrh	r3, [r7, #14]
 8003ef6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d1f0      	bne.n	8003ee0 <SD_Read_Block+0x28>
  if (cnt>=0xFFFF) return 5;
 8003efe:	89fb      	ldrh	r3, [r7, #14]
 8003f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d101      	bne.n	8003f0c <SD_Read_Block+0x54>
 8003f08:	2305      	movs	r3, #5
 8003f0a:	e015      	b.n	8003f38 <SD_Read_Block+0x80>
  for (cnt=0;cnt<512;cnt++) buff[cnt]=SPI_ReceiveByte(); //получаем байты блока из шины в буфер
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	81fb      	strh	r3, [r7, #14]
 8003f10:	e009      	b.n	8003f26 <SD_Read_Block+0x6e>
 8003f12:	89fb      	ldrh	r3, [r7, #14]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	18d4      	adds	r4, r2, r3
 8003f18:	f7ff ff1b 	bl	8003d52 <SPI_ReceiveByte>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	7023      	strb	r3, [r4, #0]
 8003f20:	89fb      	ldrh	r3, [r7, #14]
 8003f22:	3301      	adds	r3, #1
 8003f24:	81fb      	strh	r3, [r7, #14]
 8003f26:	89fb      	ldrh	r3, [r7, #14]
 8003f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f2c:	d3f1      	bcc.n	8003f12 <SD_Read_Block+0x5a>
  SPI_Release(); //Пропускаем контрольную сумму
 8003f2e:	f7ff ff1d 	bl	8003d6c <SPI_Release>
  SPI_Release();
 8003f32:	f7ff ff1b 	bl	8003d6c <SPI_Release>
  return 0;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd90      	pop	{r4, r7, pc}

08003f40 <SD_Write_Block>:

//-----------------------------------------------
uint8_t SD_Write_Block (uint8_t *buff, uint32_t lba)

{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b084      	sub	sp, #16
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint8_t result;
  uint16_t cnt;
  result=SD_cmd(CMD24,lba); //CMD24 даташит стр 51 и 97-98
 8003f4a:	6839      	ldr	r1, [r7, #0]
 8003f4c:	2058      	movs	r0, #88	; 0x58
 8003f4e:	f7ff ff35 	bl	8003dbc <SD_cmd>
 8003f52:	4603      	mov	r3, r0
 8003f54:	737b      	strb	r3, [r7, #13]
  if (result!=0x00) return 6; //Выйти, если результат не 0x00
 8003f56:	7b7b      	ldrb	r3, [r7, #13]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d001      	beq.n	8003f60 <SD_Write_Block+0x20>
 8003f5c:	2306      	movs	r3, #6
 8003f5e:	e03d      	b.n	8003fdc <SD_Write_Block+0x9c>
  SPI_Release();
 8003f60:	f7ff ff04 	bl	8003d6c <SPI_Release>
  SPI_SendByte (0xFE); //Начало буфера
 8003f64:	20fe      	movs	r0, #254	; 0xfe
 8003f66:	f7ff fee7 	bl	8003d38 <SPI_SendByte>
  for (cnt=0;cnt<512;cnt++) SPI_SendByte(buff[cnt]); //Данные
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	81fb      	strh	r3, [r7, #14]
 8003f6e:	e009      	b.n	8003f84 <SD_Write_Block+0x44>
 8003f70:	89fb      	ldrh	r3, [r7, #14]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	4413      	add	r3, r2
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7ff fedd 	bl	8003d38 <SPI_SendByte>
 8003f7e:	89fb      	ldrh	r3, [r7, #14]
 8003f80:	3301      	adds	r3, #1
 8003f82:	81fb      	strh	r3, [r7, #14]
 8003f84:	89fb      	ldrh	r3, [r7, #14]
 8003f86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f8a:	d3f1      	bcc.n	8003f70 <SD_Write_Block+0x30>
  SPI_Release(); //Пропустим котрольную сумму
 8003f8c:	f7ff feee 	bl	8003d6c <SPI_Release>
  SPI_Release();
 8003f90:	f7ff feec 	bl	8003d6c <SPI_Release>
  result=SPI_ReceiveByte();
 8003f94:	f7ff fedd 	bl	8003d52 <SPI_ReceiveByte>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	737b      	strb	r3, [r7, #13]
  if ((result&0x05)!=0x05) return 6; //Выйти, если результат не 0x05 (Даташит стр 111)
 8003f9c:	7b7b      	ldrb	r3, [r7, #13]
 8003f9e:	f003 0305 	and.w	r3, r3, #5
 8003fa2:	2b05      	cmp	r3, #5
 8003fa4:	d001      	beq.n	8003faa <SD_Write_Block+0x6a>
 8003fa6:	2306      	movs	r3, #6
 8003fa8:	e018      	b.n	8003fdc <SD_Write_Block+0x9c>
  cnt=0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	81fb      	strh	r3, [r7, #14]
  do { //Ждем окончания состояния BUSY
    result=SPI_ReceiveByte();
 8003fae:	f7ff fed0 	bl	8003d52 <SPI_ReceiveByte>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	737b      	strb	r3, [r7, #13]
    cnt++;
 8003fb6:	89fb      	ldrh	r3, [r7, #14]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	81fb      	strh	r3, [r7, #14]
  } while ( (result!=0xFF)&&(cnt<0xFFFF) );
 8003fbc:	7b7b      	ldrb	r3, [r7, #13]
 8003fbe:	2bff      	cmp	r3, #255	; 0xff
 8003fc0:	d004      	beq.n	8003fcc <SD_Write_Block+0x8c>
 8003fc2:	89fb      	ldrh	r3, [r7, #14]
 8003fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d1f0      	bne.n	8003fae <SD_Write_Block+0x6e>
  if (cnt>=0xFFFF) return 6;
 8003fcc:	89fb      	ldrh	r3, [r7, #14]
 8003fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d101      	bne.n	8003fda <SD_Write_Block+0x9a>
 8003fd6:	2306      	movs	r3, #6
 8003fd8:	e000      	b.n	8003fdc <SD_Write_Block+0x9c>
  return 0;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3710      	adds	r7, #16
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <sd_ini>:
//-----------------------------------------------
uint8_t sd_ini(void)
{
 8003fe4:	b590      	push	{r4, r7, lr}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
	uint8_t i, cmd;
	int16_t tmr;
	uint32_t temp;
	LD_OFF;
 8003fea:	2201      	movs	r2, #1
 8003fec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ff0:	4869      	ldr	r0, [pc, #420]	; (8004198 <sd_ini+0x1b4>)
 8003ff2:	f002 f8ed 	bl	80061d0 <HAL_GPIO_WritePin>
	sdinfo.type = 0;
 8003ff6:	4b69      	ldr	r3, [pc, #420]	; (800419c <sd_ini+0x1b8>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	701a      	strb	r2, [r3, #0]
	uint8_t ocr[4];
	temp = hspi3.Init.BaudRatePrescaler;
 8003ffc:	4b68      	ldr	r3, [pc, #416]	; (80041a0 <sd_ini+0x1bc>)
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	60bb      	str	r3, [r7, #8]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128; //156.25 kbbs
 8004002:	4b67      	ldr	r3, [pc, #412]	; (80041a0 <sd_ini+0x1bc>)
 8004004:	2230      	movs	r2, #48	; 0x30
 8004006:	61da      	str	r2, [r3, #28]
	HAL_SPI_Init(&hspi3);
 8004008:	4865      	ldr	r0, [pc, #404]	; (80041a0 <sd_ini+0x1bc>)
 800400a:	f002 fd6d 	bl	8006ae8 <HAL_SPI_Init>
	SS_SD_DESELECT();	// Ножка поднята
 800400e:	2201      	movs	r2, #1
 8004010:	2108      	movs	r1, #8
 8004012:	4864      	ldr	r0, [pc, #400]	; (80041a4 <sd_ini+0x1c0>)
 8004014:	f002 f8dc 	bl	80061d0 <HAL_GPIO_WritePin>
	for(i = 0; i < 10; i++) //80 импульсов (не менее 74) Даташит стр 91
 8004018:	2300      	movs	r3, #0
 800401a:	73fb      	strb	r3, [r7, #15]
 800401c:	e004      	b.n	8004028 <sd_ini+0x44>
	SPI_Release();
 800401e:	f7ff fea5 	bl	8003d6c <SPI_Release>
	for(i = 0; i < 10; i++) //80 импульсов (не менее 74) Даташит стр 91
 8004022:	7bfb      	ldrb	r3, [r7, #15]
 8004024:	3301      	adds	r3, #1
 8004026:	73fb      	strb	r3, [r7, #15]
 8004028:	7bfb      	ldrb	r3, [r7, #15]
 800402a:	2b09      	cmp	r3, #9
 800402c:	d9f7      	bls.n	800401e <sd_ini+0x3a>
	hspi3.Init.BaudRatePrescaler = temp;
 800402e:	4a5c      	ldr	r2, [pc, #368]	; (80041a0 <sd_ini+0x1bc>)
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	61d3      	str	r3, [r2, #28]
	HAL_SPI_Init(&hspi3);
 8004034:	485a      	ldr	r0, [pc, #360]	; (80041a0 <sd_ini+0x1bc>)
 8004036:	f002 fd57 	bl	8006ae8 <HAL_SPI_Init>
	SS_SD_SELECT();		// Ножка опущена
 800403a:	2200      	movs	r2, #0
 800403c:	2108      	movs	r1, #8
 800403e:	4859      	ldr	r0, [pc, #356]	; (80041a4 <sd_ini+0x1c0>)
 8004040:	f002 f8c6 	bl	80061d0 <HAL_GPIO_WritePin>
	  if (SD_cmd(CMD0, 0) == 1) // Enter Idle state
 8004044:	2100      	movs	r1, #0
 8004046:	2040      	movs	r0, #64	; 0x40
 8004048:	f7ff feb8 	bl	8003dbc <SD_cmd>
 800404c:	4603      	mov	r3, r0
 800404e:	2b01      	cmp	r3, #1
 8004050:	f040 809a 	bne.w	8004188 <sd_ini+0x1a4>
	  {
		  SPI_Release();
 8004054:	f7ff fe8a 	bl	8003d6c <SPI_Release>
		  if (SD_cmd(CMD8, 0x1AA) == 1) // SDv2
 8004058:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800405c:	2048      	movs	r0, #72	; 0x48
 800405e:	f7ff fead 	bl	8003dbc <SD_cmd>
 8004062:	4603      	mov	r3, r0
 8004064:	2b01      	cmp	r3, #1
 8004066:	d157      	bne.n	8004118 <sd_ini+0x134>
		  {
			  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 8004068:	2300      	movs	r3, #0
 800406a:	73fb      	strb	r3, [r7, #15]
 800406c:	e00c      	b.n	8004088 <sd_ini+0xa4>
 800406e:	7bfc      	ldrb	r4, [r7, #15]
 8004070:	f7ff fe6f 	bl	8003d52 <SPI_ReceiveByte>
 8004074:	4603      	mov	r3, r0
 8004076:	461a      	mov	r2, r3
 8004078:	f104 0310 	add.w	r3, r4, #16
 800407c:	443b      	add	r3, r7
 800407e:	f803 2c0c 	strb.w	r2, [r3, #-12]
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	3301      	adds	r3, #1
 8004086:	73fb      	strb	r3, [r7, #15]
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	2b03      	cmp	r3, #3
 800408c:	d9ef      	bls.n	800406e <sd_ini+0x8a>
			//  sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n ", ocr[0], ocr[1], ocr[2], ocr[3]);
			//  HAL_UART_Transmit(&huart6, (uint8_t*)str1, strlen(str1), 0x1000);
			  // Get trailing return value of R7 resp
			  if (ocr[2] == 0x01 && ocr[3] == 0xAA) // The card can work at vdd range of 2.7-3.6V
 800408e:	79bb      	ldrb	r3, [r7, #6]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d17b      	bne.n	800418c <sd_ini+0x1a8>
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	2baa      	cmp	r3, #170	; 0xaa
 8004098:	d178      	bne.n	800418c <sd_ini+0x1a8>
			  {
				  for (tmr = 12000; tmr && SD_cmd(ACMD41, 1UL << 30); tmr--)
 800409a:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 800409e:	81bb      	strh	r3, [r7, #12]
 80040a0:	e005      	b.n	80040ae <sd_ini+0xca>
 80040a2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	3b01      	subs	r3, #1
 80040aa:	b29b      	uxth	r3, r3
 80040ac:	81bb      	strh	r3, [r7, #12]
 80040ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <sd_ini+0xe2>
 80040b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80040ba:	20e9      	movs	r0, #233	; 0xe9
 80040bc:	f7ff fe7e 	bl	8003dbc <SD_cmd>
 80040c0:	4603      	mov	r3, r0
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1ed      	bne.n	80040a2 <sd_ini+0xbe>
				  ;// Wait for leaving idle state (ACMD41 with HCS bit)
				  if (tmr && SD_cmd(CMD58, 0) == 0) { // Check CCS bit in the OCR
 80040c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d05e      	beq.n	800418c <sd_ini+0x1a8>
 80040ce:	2100      	movs	r1, #0
 80040d0:	207a      	movs	r0, #122	; 0x7a
 80040d2:	f7ff fe73 	bl	8003dbc <SD_cmd>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d157      	bne.n	800418c <sd_ini+0x1a8>
					  for (i = 0; i < 4; i++) ocr[i] = SPI_ReceiveByte();
 80040dc:	2300      	movs	r3, #0
 80040de:	73fb      	strb	r3, [r7, #15]
 80040e0:	e00c      	b.n	80040fc <sd_ini+0x118>
 80040e2:	7bfc      	ldrb	r4, [r7, #15]
 80040e4:	f7ff fe35 	bl	8003d52 <SPI_ReceiveByte>
 80040e8:	4603      	mov	r3, r0
 80040ea:	461a      	mov	r2, r3
 80040ec:	f104 0310 	add.w	r3, r4, #16
 80040f0:	443b      	add	r3, r7
 80040f2:	f803 2c0c 	strb.w	r2, [r3, #-12]
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	3301      	adds	r3, #1
 80040fa:	73fb      	strb	r3, [r7, #15]
 80040fc:	7bfb      	ldrb	r3, [r7, #15]
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d9ef      	bls.n	80040e2 <sd_ini+0xfe>
					//  sprintf(str1,"OCR: 0x%02X 0x%02X 0x%02X 0x%02X\r\n ", ocr[0], ocr[1], ocr[2], ocr[3]);
					//  HAL_UART_Transmit(&huart6,(uint8_t*)str1, strlen(str1), 0x1000);
					  sdinfo.type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; // SDv2 (HC or SC)
 8004102:	793b      	ldrb	r3, [r7, #4]
 8004104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004108:	2b00      	cmp	r3, #0
 800410a:	d001      	beq.n	8004110 <sd_ini+0x12c>
 800410c:	220c      	movs	r2, #12
 800410e:	e000      	b.n	8004112 <sd_ini+0x12e>
 8004110:	2204      	movs	r2, #4
 8004112:	4b22      	ldr	r3, [pc, #136]	; (800419c <sd_ini+0x1b8>)
 8004114:	701a      	strb	r2, [r3, #0]
 8004116:	e039      	b.n	800418c <sd_ini+0x1a8>
				  }
			  }
		  }
		  else //SDv1 or MMCv3
		  {
			  if (SD_cmd(ACMD41, 0) <= 1)
 8004118:	2100      	movs	r1, #0
 800411a:	20e9      	movs	r0, #233	; 0xe9
 800411c:	f7ff fe4e 	bl	8003dbc <SD_cmd>
 8004120:	4603      	mov	r3, r0
 8004122:	2b01      	cmp	r3, #1
 8004124:	d805      	bhi.n	8004132 <sd_ini+0x14e>
			  {
				  sdinfo.type = CT_SD1; cmd = ACMD41; // SDv1
 8004126:	4b1d      	ldr	r3, [pc, #116]	; (800419c <sd_ini+0x1b8>)
 8004128:	2202      	movs	r2, #2
 800412a:	701a      	strb	r2, [r3, #0]
 800412c:	23e9      	movs	r3, #233	; 0xe9
 800412e:	73bb      	strb	r3, [r7, #14]
 8004130:	e004      	b.n	800413c <sd_ini+0x158>
			  }
			  else
			  {
				  sdinfo.type = CT_MMC; cmd = CMD1; // MMCv3
 8004132:	4b1a      	ldr	r3, [pc, #104]	; (800419c <sd_ini+0x1b8>)
 8004134:	2201      	movs	r2, #1
 8004136:	701a      	strb	r2, [r3, #0]
 8004138:	2341      	movs	r3, #65	; 0x41
 800413a:	73bb      	strb	r3, [r7, #14]
			  }
			  for (tmr = 25000; tmr && SD_cmd(cmd, 0); tmr--) ; // Wait for leaving idle state
 800413c:	f246 13a8 	movw	r3, #25000	; 0x61a8
 8004140:	81bb      	strh	r3, [r7, #12]
 8004142:	e005      	b.n	8004150 <sd_ini+0x16c>
 8004144:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004148:	b29b      	uxth	r3, r3
 800414a:	3b01      	subs	r3, #1
 800414c:	b29b      	uxth	r3, r3
 800414e:	81bb      	strh	r3, [r7, #12]
 8004150:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <sd_ini+0x184>
 8004158:	7bbb      	ldrb	r3, [r7, #14]
 800415a:	2100      	movs	r1, #0
 800415c:	4618      	mov	r0, r3
 800415e:	f7ff fe2d 	bl	8003dbc <SD_cmd>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d1ed      	bne.n	8004144 <sd_ini+0x160>
			  if (!tmr || SD_cmd(CMD16, 512) != 0) // Set R/W block length to 512
 8004168:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d007      	beq.n	8004180 <sd_ini+0x19c>
 8004170:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004174:	2050      	movs	r0, #80	; 0x50
 8004176:	f7ff fe21 	bl	8003dbc <SD_cmd>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d005      	beq.n	800418c <sd_ini+0x1a8>
			  sdinfo.type = 0;
 8004180:	4b06      	ldr	r3, [pc, #24]	; (800419c <sd_ini+0x1b8>)
 8004182:	2200      	movs	r2, #0
 8004184:	701a      	strb	r2, [r3, #0]
 8004186:	e001      	b.n	800418c <sd_ini+0x1a8>
		  }
	  }
	  else
	  {
		  return 1;
 8004188:	2301      	movs	r3, #1
 800418a:	e000      	b.n	800418e <sd_ini+0x1aa>
	  }
	 // sprintf(str1,"Type SD: 0x%02X\r\n ", sdinfo.type);
	 // HAL_UART_Transmit(&huart6,(uint8_t*)str1, strlen(str1), 0x1000);
	  return 0;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3714      	adds	r7, #20
 8004192:	46bd      	mov	sp, r7
 8004194:	bd90      	pop	{r4, r7, pc}
 8004196:	bf00      	nop
 8004198:	40020800 	.word	0x40020800
 800419c:	20003498 	.word	0x20003498
 80041a0:	20000598 	.word	0x20000598
 80041a4:	40020400 	.word	0x40020400

080041a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041ae:	2300      	movs	r3, #0
 80041b0:	607b      	str	r3, [r7, #4]
 80041b2:	4b17      	ldr	r3, [pc, #92]	; (8004210 <HAL_MspInit+0x68>)
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	4a16      	ldr	r2, [pc, #88]	; (8004210 <HAL_MspInit+0x68>)
 80041b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041bc:	6453      	str	r3, [r2, #68]	; 0x44
 80041be:	4b14      	ldr	r3, [pc, #80]	; (8004210 <HAL_MspInit+0x68>)
 80041c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c6:	607b      	str	r3, [r7, #4]
 80041c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	4b10      	ldr	r3, [pc, #64]	; (8004210 <HAL_MspInit+0x68>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	4a0f      	ldr	r2, [pc, #60]	; (8004210 <HAL_MspInit+0x68>)
 80041d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d8:	6413      	str	r3, [r2, #64]	; 0x40
 80041da:	4b0d      	ldr	r3, [pc, #52]	; (8004210 <HAL_MspInit+0x68>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e2:	603b      	str	r3, [r7, #0]
 80041e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80041e6:	2200      	movs	r2, #0
 80041e8:	2100      	movs	r1, #0
 80041ea:	2005      	movs	r0, #5
 80041ec:	f001 fa1b 	bl	8005626 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 80041f0:	2005      	movs	r0, #5
 80041f2:	f001 fa34 	bl	800565e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80041f6:	2200      	movs	r2, #0
 80041f8:	2100      	movs	r1, #0
 80041fa:	2005      	movs	r0, #5
 80041fc:	f001 fa13 	bl	8005626 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004200:	2005      	movs	r0, #5
 8004202:	f001 fa2c 	bl	800565e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004206:	bf00      	nop
 8004208:	3708      	adds	r7, #8
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	40023800 	.word	0x40023800

08004214 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b08a      	sub	sp, #40	; 0x28
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800421c:	f107 0314 	add.w	r3, r7, #20
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	605a      	str	r2, [r3, #4]
 8004226:	609a      	str	r2, [r3, #8]
 8004228:	60da      	str	r2, [r3, #12]
 800422a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a34      	ldr	r2, [pc, #208]	; (8004304 <HAL_ADC_MspInit+0xf0>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d161      	bne.n	80042fa <HAL_ADC_MspInit+0xe6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004236:	2300      	movs	r3, #0
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	4b33      	ldr	r3, [pc, #204]	; (8004308 <HAL_ADC_MspInit+0xf4>)
 800423c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423e:	4a32      	ldr	r2, [pc, #200]	; (8004308 <HAL_ADC_MspInit+0xf4>)
 8004240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004244:	6453      	str	r3, [r2, #68]	; 0x44
 8004246:	4b30      	ldr	r3, [pc, #192]	; (8004308 <HAL_ADC_MspInit+0xf4>)
 8004248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800424e:	613b      	str	r3, [r7, #16]
 8004250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	4b2c      	ldr	r3, [pc, #176]	; (8004308 <HAL_ADC_MspInit+0xf4>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	4a2b      	ldr	r2, [pc, #172]	; (8004308 <HAL_ADC_MspInit+0xf4>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	6313      	str	r3, [r2, #48]	; 0x30
 8004262:	4b29      	ldr	r3, [pc, #164]	; (8004308 <HAL_ADC_MspInit+0xf4>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4;
 800426e:	2313      	movs	r3, #19
 8004270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004272:	2303      	movs	r3, #3
 8004274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800427a:	f107 0314 	add.w	r3, r7, #20
 800427e:	4619      	mov	r1, r3
 8004280:	4822      	ldr	r0, [pc, #136]	; (800430c <HAL_ADC_MspInit+0xf8>)
 8004282:	f001 fe09 	bl	8005e98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004286:	4b22      	ldr	r3, [pc, #136]	; (8004310 <HAL_ADC_MspInit+0xfc>)
 8004288:	4a22      	ldr	r2, [pc, #136]	; (8004314 <HAL_ADC_MspInit+0x100>)
 800428a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800428c:	4b20      	ldr	r3, [pc, #128]	; (8004310 <HAL_ADC_MspInit+0xfc>)
 800428e:	2200      	movs	r2, #0
 8004290:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004292:	4b1f      	ldr	r3, [pc, #124]	; (8004310 <HAL_ADC_MspInit+0xfc>)
 8004294:	2200      	movs	r2, #0
 8004296:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004298:	4b1d      	ldr	r3, [pc, #116]	; (8004310 <HAL_ADC_MspInit+0xfc>)
 800429a:	2200      	movs	r2, #0
 800429c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800429e:	4b1c      	ldr	r3, [pc, #112]	; (8004310 <HAL_ADC_MspInit+0xfc>)
 80042a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042a4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042a6:	4b1a      	ldr	r3, [pc, #104]	; (8004310 <HAL_ADC_MspInit+0xfc>)
 80042a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80042ae:	4b18      	ldr	r3, [pc, #96]	; (8004310 <HAL_ADC_MspInit+0xfc>)
 80042b0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042b4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80042b6:	4b16      	ldr	r3, [pc, #88]	; (8004310 <HAL_ADC_MspInit+0xfc>)
 80042b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042bc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80042be:	4b14      	ldr	r3, [pc, #80]	; (8004310 <HAL_ADC_MspInit+0xfc>)
 80042c0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80042c4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80042c6:	4b12      	ldr	r3, [pc, #72]	; (8004310 <HAL_ADC_MspInit+0xfc>)
 80042c8:	2204      	movs	r2, #4
 80042ca:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80042cc:	4b10      	ldr	r3, [pc, #64]	; (8004310 <HAL_ADC_MspInit+0xfc>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 80042d2:	4b0f      	ldr	r3, [pc, #60]	; (8004310 <HAL_ADC_MspInit+0xfc>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80042d8:	4b0d      	ldr	r3, [pc, #52]	; (8004310 <HAL_ADC_MspInit+0xfc>)
 80042da:	2200      	movs	r2, #0
 80042dc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80042de:	480c      	ldr	r0, [pc, #48]	; (8004310 <HAL_ADC_MspInit+0xfc>)
 80042e0:	f001 f9d8 	bl	8005694 <HAL_DMA_Init>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <HAL_ADC_MspInit+0xda>
    {
      Error_Handler();
 80042ea:	f7ff fcf5 	bl	8003cd8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a07      	ldr	r2, [pc, #28]	; (8004310 <HAL_ADC_MspInit+0xfc>)
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38
 80042f4:	4a06      	ldr	r2, [pc, #24]	; (8004310 <HAL_ADC_MspInit+0xfc>)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80042fa:	bf00      	nop
 80042fc:	3728      	adds	r7, #40	; 0x28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}
 8004302:	bf00      	nop
 8004304:	40012000 	.word	0x40012000
 8004308:	40023800 	.word	0x40023800
 800430c:	40020000 	.word	0x40020000
 8004310:	200004e0 	.word	0x200004e0
 8004314:	40026410 	.word	0x40026410

08004318 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08c      	sub	sp, #48	; 0x30
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004320:	f107 031c 	add.w	r3, r7, #28
 8004324:	2200      	movs	r2, #0
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	605a      	str	r2, [r3, #4]
 800432a:	609a      	str	r2, [r3, #8]
 800432c:	60da      	str	r2, [r3, #12]
 800432e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a42      	ldr	r2, [pc, #264]	; (8004440 <HAL_SPI_MspInit+0x128>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d134      	bne.n	80043a4 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800433a:	2300      	movs	r3, #0
 800433c:	61bb      	str	r3, [r7, #24]
 800433e:	4b41      	ldr	r3, [pc, #260]	; (8004444 <HAL_SPI_MspInit+0x12c>)
 8004340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004342:	4a40      	ldr	r2, [pc, #256]	; (8004444 <HAL_SPI_MspInit+0x12c>)
 8004344:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004348:	6453      	str	r3, [r2, #68]	; 0x44
 800434a:	4b3e      	ldr	r3, [pc, #248]	; (8004444 <HAL_SPI_MspInit+0x12c>)
 800434c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]
 800435a:	4b3a      	ldr	r3, [pc, #232]	; (8004444 <HAL_SPI_MspInit+0x12c>)
 800435c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800435e:	4a39      	ldr	r2, [pc, #228]	; (8004444 <HAL_SPI_MspInit+0x12c>)
 8004360:	f043 0301 	orr.w	r3, r3, #1
 8004364:	6313      	str	r3, [r2, #48]	; 0x30
 8004366:	4b37      	ldr	r3, [pc, #220]	; (8004444 <HAL_SPI_MspInit+0x12c>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	617b      	str	r3, [r7, #20]
 8004370:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8004372:	23e0      	movs	r3, #224	; 0xe0
 8004374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004376:	2302      	movs	r3, #2
 8004378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800437a:	2300      	movs	r3, #0
 800437c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800437e:	2303      	movs	r3, #3
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004382:	2305      	movs	r3, #5
 8004384:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004386:	f107 031c 	add.w	r3, r7, #28
 800438a:	4619      	mov	r1, r3
 800438c:	482e      	ldr	r0, [pc, #184]	; (8004448 <HAL_SPI_MspInit+0x130>)
 800438e:	f001 fd83 	bl	8005e98 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8004392:	2200      	movs	r2, #0
 8004394:	2100      	movs	r1, #0
 8004396:	2023      	movs	r0, #35	; 0x23
 8004398:	f001 f945 	bl	8005626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800439c:	2023      	movs	r0, #35	; 0x23
 800439e:	f001 f95e 	bl	800565e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80043a2:	e049      	b.n	8004438 <HAL_SPI_MspInit+0x120>
  else if(hspi->Instance==SPI3)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a28      	ldr	r2, [pc, #160]	; (800444c <HAL_SPI_MspInit+0x134>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d144      	bne.n	8004438 <HAL_SPI_MspInit+0x120>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	4b24      	ldr	r3, [pc, #144]	; (8004444 <HAL_SPI_MspInit+0x12c>)
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	4a23      	ldr	r2, [pc, #140]	; (8004444 <HAL_SPI_MspInit+0x12c>)
 80043b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043bc:	6413      	str	r3, [r2, #64]	; 0x40
 80043be:	4b21      	ldr	r3, [pc, #132]	; (8004444 <HAL_SPI_MspInit+0x12c>)
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043c6:	613b      	str	r3, [r7, #16]
 80043c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	4b1d      	ldr	r3, [pc, #116]	; (8004444 <HAL_SPI_MspInit+0x12c>)
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <HAL_SPI_MspInit+0x12c>)
 80043d4:	f043 0302 	orr.w	r3, r3, #2
 80043d8:	6313      	str	r3, [r2, #48]	; 0x30
 80043da:	4b1a      	ldr	r3, [pc, #104]	; (8004444 <HAL_SPI_MspInit+0x12c>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80043e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80043ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ec:	2302      	movs	r3, #2
 80043ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80043f4:	2303      	movs	r3, #3
 80043f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80043f8:	2307      	movs	r3, #7
 80043fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043fc:	f107 031c 	add.w	r3, r7, #28
 8004400:	4619      	mov	r1, r3
 8004402:	4813      	ldr	r0, [pc, #76]	; (8004450 <HAL_SPI_MspInit+0x138>)
 8004404:	f001 fd48 	bl	8005e98 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004408:	2330      	movs	r3, #48	; 0x30
 800440a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800440c:	2302      	movs	r3, #2
 800440e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004410:	2300      	movs	r3, #0
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004414:	2303      	movs	r3, #3
 8004416:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004418:	2306      	movs	r3, #6
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800441c:	f107 031c 	add.w	r3, r7, #28
 8004420:	4619      	mov	r1, r3
 8004422:	480b      	ldr	r0, [pc, #44]	; (8004450 <HAL_SPI_MspInit+0x138>)
 8004424:	f001 fd38 	bl	8005e98 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8004428:	2200      	movs	r2, #0
 800442a:	2100      	movs	r1, #0
 800442c:	2033      	movs	r0, #51	; 0x33
 800442e:	f001 f8fa 	bl	8005626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004432:	2033      	movs	r0, #51	; 0x33
 8004434:	f001 f913 	bl	800565e <HAL_NVIC_EnableIRQ>
}
 8004438:	bf00      	nop
 800443a:	3730      	adds	r7, #48	; 0x30
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}
 8004440:	40013000 	.word	0x40013000
 8004444:	40023800 	.word	0x40023800
 8004448:	40020000 	.word	0x40020000
 800444c:	40003c00 	.word	0x40003c00
 8004450:	40020400 	.word	0x40020400

08004454 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a2a      	ldr	r2, [pc, #168]	; (800450c <HAL_TIM_Base_MspInit+0xb8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d116      	bne.n	8004494 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004466:	2300      	movs	r3, #0
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	4b29      	ldr	r3, [pc, #164]	; (8004510 <HAL_TIM_Base_MspInit+0xbc>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	4a28      	ldr	r2, [pc, #160]	; (8004510 <HAL_TIM_Base_MspInit+0xbc>)
 8004470:	f043 0304 	orr.w	r3, r3, #4
 8004474:	6413      	str	r3, [r2, #64]	; 0x40
 8004476:	4b26      	ldr	r3, [pc, #152]	; (8004510 <HAL_TIM_Base_MspInit+0xbc>)
 8004478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447a:	f003 0304 	and.w	r3, r3, #4
 800447e:	617b      	str	r3, [r7, #20]
 8004480:	697b      	ldr	r3, [r7, #20]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004482:	2200      	movs	r2, #0
 8004484:	2100      	movs	r1, #0
 8004486:	201e      	movs	r0, #30
 8004488:	f001 f8cd 	bl	8005626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800448c:	201e      	movs	r0, #30
 800448e:	f001 f8e6 	bl	800565e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004492:	e036      	b.n	8004502 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM10)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a1e      	ldr	r2, [pc, #120]	; (8004514 <HAL_TIM_Base_MspInit+0xc0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d116      	bne.n	80044cc <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800449e:	2300      	movs	r3, #0
 80044a0:	613b      	str	r3, [r7, #16]
 80044a2:	4b1b      	ldr	r3, [pc, #108]	; (8004510 <HAL_TIM_Base_MspInit+0xbc>)
 80044a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a6:	4a1a      	ldr	r2, [pc, #104]	; (8004510 <HAL_TIM_Base_MspInit+0xbc>)
 80044a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ac:	6453      	str	r3, [r2, #68]	; 0x44
 80044ae:	4b18      	ldr	r3, [pc, #96]	; (8004510 <HAL_TIM_Base_MspInit+0xbc>)
 80044b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80044ba:	2200      	movs	r2, #0
 80044bc:	2100      	movs	r1, #0
 80044be:	2019      	movs	r0, #25
 80044c0:	f001 f8b1 	bl	8005626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80044c4:	2019      	movs	r0, #25
 80044c6:	f001 f8ca 	bl	800565e <HAL_NVIC_EnableIRQ>
}
 80044ca:	e01a      	b.n	8004502 <HAL_TIM_Base_MspInit+0xae>
  else if(htim_base->Instance==TIM11)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a11      	ldr	r2, [pc, #68]	; (8004518 <HAL_TIM_Base_MspInit+0xc4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d115      	bne.n	8004502 <HAL_TIM_Base_MspInit+0xae>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <HAL_TIM_Base_MspInit+0xbc>)
 80044dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044de:	4a0c      	ldr	r2, [pc, #48]	; (8004510 <HAL_TIM_Base_MspInit+0xbc>)
 80044e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044e4:	6453      	str	r3, [r2, #68]	; 0x44
 80044e6:	4b0a      	ldr	r3, [pc, #40]	; (8004510 <HAL_TIM_Base_MspInit+0xbc>)
 80044e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ee:	60fb      	str	r3, [r7, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80044f2:	2200      	movs	r2, #0
 80044f4:	2100      	movs	r1, #0
 80044f6:	201a      	movs	r0, #26
 80044f8:	f001 f895 	bl	8005626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80044fc:	201a      	movs	r0, #26
 80044fe:	f001 f8ae 	bl	800565e <HAL_NVIC_EnableIRQ>
}
 8004502:	bf00      	nop
 8004504:	3718      	adds	r7, #24
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40000800 	.word	0x40000800
 8004510:	40023800 	.word	0x40023800
 8004514:	40014400 	.word	0x40014400
 8004518:	40014800 	.word	0x40014800

0800451c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a0e      	ldr	r2, [pc, #56]	; (8004564 <HAL_TIM_PWM_MspInit+0x48>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d115      	bne.n	800455a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800452e:	2300      	movs	r3, #0
 8004530:	60fb      	str	r3, [r7, #12]
 8004532:	4b0d      	ldr	r3, [pc, #52]	; (8004568 <HAL_TIM_PWM_MspInit+0x4c>)
 8004534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004536:	4a0c      	ldr	r2, [pc, #48]	; (8004568 <HAL_TIM_PWM_MspInit+0x4c>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453c:	6453      	str	r3, [r2, #68]	; 0x44
 800453e:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <HAL_TIM_PWM_MspInit+0x4c>)
 8004540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800454a:	2200      	movs	r2, #0
 800454c:	2100      	movs	r1, #0
 800454e:	2018      	movs	r0, #24
 8004550:	f001 f869 	bl	8005626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004554:	2018      	movs	r0, #24
 8004556:	f001 f882 	bl	800565e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800455a:	bf00      	nop
 800455c:	3710      	adds	r7, #16
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	40014000 	.word	0x40014000
 8004568:	40023800 	.word	0x40023800

0800456c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08a      	sub	sp, #40	; 0x28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004574:	f107 0314 	add.w	r3, r7, #20
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	605a      	str	r2, [r3, #4]
 800457e:	609a      	str	r2, [r3, #8]
 8004580:	60da      	str	r2, [r3, #12]
 8004582:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a24      	ldr	r2, [pc, #144]	; (800461c <HAL_TIM_MspPostInit+0xb0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d11e      	bne.n	80045cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800458e:	2300      	movs	r3, #0
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	4b23      	ldr	r3, [pc, #140]	; (8004620 <HAL_TIM_MspPostInit+0xb4>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	4a22      	ldr	r2, [pc, #136]	; (8004620 <HAL_TIM_MspPostInit+0xb4>)
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	6313      	str	r3, [r2, #48]	; 0x30
 800459e:	4b20      	ldr	r3, [pc, #128]	; (8004620 <HAL_TIM_MspPostInit+0xb4>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	693b      	ldr	r3, [r7, #16]
    /**TIM9 GPIO Configuration
    PA2     ------> TIM9_CH1
    PA3     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80045aa:	230c      	movs	r3, #12
 80045ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ae:	2302      	movs	r3, #2
 80045b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b6:	2300      	movs	r3, #0
 80045b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80045ba:	2303      	movs	r3, #3
 80045bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045be:	f107 0314 	add.w	r3, r7, #20
 80045c2:	4619      	mov	r1, r3
 80045c4:	4817      	ldr	r0, [pc, #92]	; (8004624 <HAL_TIM_MspPostInit+0xb8>)
 80045c6:	f001 fc67 	bl	8005e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 80045ca:	e023      	b.n	8004614 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM11)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a15      	ldr	r2, [pc, #84]	; (8004628 <HAL_TIM_MspPostInit+0xbc>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d11e      	bne.n	8004614 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80045d6:	2300      	movs	r3, #0
 80045d8:	60fb      	str	r3, [r7, #12]
 80045da:	4b11      	ldr	r3, [pc, #68]	; (8004620 <HAL_TIM_MspPostInit+0xb4>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	4a10      	ldr	r2, [pc, #64]	; (8004620 <HAL_TIM_MspPostInit+0xb4>)
 80045e0:	f043 0302 	orr.w	r3, r3, #2
 80045e4:	6313      	str	r3, [r2, #48]	; 0x30
 80045e6:	4b0e      	ldr	r3, [pc, #56]	; (8004620 <HAL_TIM_MspPostInit+0xb4>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	f003 0302 	and.w	r3, r3, #2
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80045f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045f8:	2302      	movs	r3, #2
 80045fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045fc:	2300      	movs	r3, #0
 80045fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004600:	2300      	movs	r3, #0
 8004602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8004604:	2303      	movs	r3, #3
 8004606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004608:	f107 0314 	add.w	r3, r7, #20
 800460c:	4619      	mov	r1, r3
 800460e:	4807      	ldr	r0, [pc, #28]	; (800462c <HAL_TIM_MspPostInit+0xc0>)
 8004610:	f001 fc42 	bl	8005e98 <HAL_GPIO_Init>
}
 8004614:	bf00      	nop
 8004616:	3728      	adds	r7, #40	; 0x28
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	40014000 	.word	0x40014000
 8004620:	40023800 	.word	0x40023800
 8004624:	40020000 	.word	0x40020000
 8004628:	40014800 	.word	0x40014800
 800462c:	40020400 	.word	0x40020400

08004630 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	; 0x28
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004638:	f107 0314 	add.w	r3, r7, #20
 800463c:	2200      	movs	r2, #0
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	605a      	str	r2, [r3, #4]
 8004642:	609a      	str	r2, [r3, #8]
 8004644:	60da      	str	r2, [r3, #12]
 8004646:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	4a1d      	ldr	r2, [pc, #116]	; (80046c4 <HAL_UART_MspInit+0x94>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d134      	bne.n	80046bc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004652:	2300      	movs	r3, #0
 8004654:	613b      	str	r3, [r7, #16]
 8004656:	4b1c      	ldr	r3, [pc, #112]	; (80046c8 <HAL_UART_MspInit+0x98>)
 8004658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800465a:	4a1b      	ldr	r2, [pc, #108]	; (80046c8 <HAL_UART_MspInit+0x98>)
 800465c:	f043 0310 	orr.w	r3, r3, #16
 8004660:	6453      	str	r3, [r2, #68]	; 0x44
 8004662:	4b19      	ldr	r3, [pc, #100]	; (80046c8 <HAL_UART_MspInit+0x98>)
 8004664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004666:	f003 0310 	and.w	r3, r3, #16
 800466a:	613b      	str	r3, [r7, #16]
 800466c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	4b15      	ldr	r3, [pc, #84]	; (80046c8 <HAL_UART_MspInit+0x98>)
 8004674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004676:	4a14      	ldr	r2, [pc, #80]	; (80046c8 <HAL_UART_MspInit+0x98>)
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	6313      	str	r3, [r2, #48]	; 0x30
 800467e:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <HAL_UART_MspInit+0x98>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800468a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800468e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004690:	2302      	movs	r3, #2
 8004692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004694:	2300      	movs	r3, #0
 8004696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004698:	2303      	movs	r3, #3
 800469a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800469c:	2307      	movs	r3, #7
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046a0:	f107 0314 	add.w	r3, r7, #20
 80046a4:	4619      	mov	r1, r3
 80046a6:	4809      	ldr	r0, [pc, #36]	; (80046cc <HAL_UART_MspInit+0x9c>)
 80046a8:	f001 fbf6 	bl	8005e98 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80046ac:	2200      	movs	r2, #0
 80046ae:	2100      	movs	r1, #0
 80046b0:	2025      	movs	r0, #37	; 0x25
 80046b2:	f000 ffb8 	bl	8005626 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80046b6:	2025      	movs	r0, #37	; 0x25
 80046b8:	f000 ffd1 	bl	800565e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80046bc:	bf00      	nop
 80046be:	3728      	adds	r7, #40	; 0x28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	40011000 	.word	0x40011000
 80046c8:	40023800 	.word	0x40023800
 80046cc:	40020000 	.word	0x40020000

080046d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80046d0:	b480      	push	{r7}
 80046d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80046d4:	e7fe      	b.n	80046d4 <NMI_Handler+0x4>

080046d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80046d6:	b480      	push	{r7}
 80046d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80046da:	e7fe      	b.n	80046da <HardFault_Handler+0x4>

080046dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80046e0:	e7fe      	b.n	80046e0 <MemManage_Handler+0x4>

080046e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80046e2:	b480      	push	{r7}
 80046e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80046e6:	e7fe      	b.n	80046e6 <BusFault_Handler+0x4>

080046e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80046ec:	e7fe      	b.n	80046ec <UsageFault_Handler+0x4>

080046ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80046ee:	b480      	push	{r7}
 80046f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80046f2:	bf00      	nop
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004700:	bf00      	nop
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800470a:	b480      	push	{r7}
 800470c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800470e:	bf00      	nop
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr

08004718 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800471c:	f000 f9ae 	bl	8004a7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004720:	bf00      	nop
 8004722:	bd80      	pop	{r7, pc}

08004724 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8004724:	b480      	push	{r7}
 8004726:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8004728:	bf00      	nop
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
	...

08004734 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8004738:	4802      	ldr	r0, [pc, #8]	; (8004744 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800473a:	f003 f925 	bl	8007988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800473e:	bf00      	nop
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20000638 	.word	0x20000638

08004748 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800474c:	4802      	ldr	r0, [pc, #8]	; (8004758 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800474e:	f003 f91b 	bl	8007988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004752:	bf00      	nop
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	20000680 	.word	0x20000680

0800475c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8004760:	4802      	ldr	r0, [pc, #8]	; (800476c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8004762:	f003 f911 	bl	8007988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004766:	bf00      	nop
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	200006c8 	.word	0x200006c8

08004770 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004774:	4802      	ldr	r0, [pc, #8]	; (8004780 <TIM4_IRQHandler+0x10>)
 8004776:	f003 f907 	bl	8007988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800477a:	bf00      	nop
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	200005f0 	.word	0x200005f0

08004784 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004788:	4802      	ldr	r0, [pc, #8]	; (8004794 <SPI1_IRQHandler+0x10>)
 800478a:	f002 fd15 	bl	80071b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800478e:	bf00      	nop
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	20000540 	.word	0x20000540

08004798 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800479c:	4802      	ldr	r0, [pc, #8]	; (80047a8 <USART1_IRQHandler+0x10>)
 800479e:	f004 f80b 	bl	80087b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80047a2:	bf00      	nop
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000710 	.word	0x20000710

080047ac <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80047b0:	4802      	ldr	r0, [pc, #8]	; (80047bc <SPI3_IRQHandler+0x10>)
 80047b2:	f002 fd01 	bl	80071b8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 80047b6:	bf00      	nop
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	20000598 	.word	0x20000598

080047c0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80047c4:	4802      	ldr	r0, [pc, #8]	; (80047d0 <DMA2_Stream0_IRQHandler+0x10>)
 80047c6:	f001 f8fd 	bl	80059c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80047ca:	bf00      	nop
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	200004e0 	.word	0x200004e0

080047d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
	return 1;
 80047d8:	2301      	movs	r3, #1
}
 80047da:	4618      	mov	r0, r3
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <_kill>:

int _kill(int pid, int sig)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80047ee:	f007 ffef 	bl	800c7d0 <__errno>
 80047f2:	4603      	mov	r3, r0
 80047f4:	2216      	movs	r2, #22
 80047f6:	601a      	str	r2, [r3, #0]
	return -1;
 80047f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3708      	adds	r7, #8
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <_exit>:

void _exit (int status)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800480c:	f04f 31ff 	mov.w	r1, #4294967295
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7ff ffe7 	bl	80047e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004816:	e7fe      	b.n	8004816 <_exit+0x12>

08004818 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004824:	2300      	movs	r3, #0
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	e00a      	b.n	8004840 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800482a:	f3af 8000 	nop.w
 800482e:	4601      	mov	r1, r0
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	60ba      	str	r2, [r7, #8]
 8004836:	b2ca      	uxtb	r2, r1
 8004838:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	3301      	adds	r3, #1
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	429a      	cmp	r2, r3
 8004846:	dbf0      	blt.n	800482a <_read+0x12>
	}

return len;
 8004848:	687b      	ldr	r3, [r7, #4]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b086      	sub	sp, #24
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800485e:	2300      	movs	r3, #0
 8004860:	617b      	str	r3, [r7, #20]
 8004862:	e009      	b.n	8004878 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	1c5a      	adds	r2, r3, #1
 8004868:	60ba      	str	r2, [r7, #8]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	4618      	mov	r0, r3
 800486e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	3301      	adds	r3, #1
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	697a      	ldr	r2, [r7, #20]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	429a      	cmp	r2, r3
 800487e:	dbf1      	blt.n	8004864 <_write+0x12>
	}
	return len;
 8004880:	687b      	ldr	r3, [r7, #4]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3718      	adds	r7, #24
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <_close>:

int _close(int file)
{
 800488a:	b480      	push	{r7}
 800488c:	b083      	sub	sp, #12
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
	return -1;
 8004892:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004896:	4618      	mov	r0, r3
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
 80048aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80048b2:	605a      	str	r2, [r3, #4]
	return 0;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <_isatty>:

int _isatty(int file)
{
 80048c2:	b480      	push	{r7}
 80048c4:	b083      	sub	sp, #12
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
	return 1;
 80048ca:	2301      	movs	r3, #1
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80048d8:	b480      	push	{r7}
 80048da:	b085      	sub	sp, #20
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
	return 0;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b086      	sub	sp, #24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80048fc:	4a14      	ldr	r2, [pc, #80]	; (8004950 <_sbrk+0x5c>)
 80048fe:	4b15      	ldr	r3, [pc, #84]	; (8004954 <_sbrk+0x60>)
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004908:	4b13      	ldr	r3, [pc, #76]	; (8004958 <_sbrk+0x64>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d102      	bne.n	8004916 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004910:	4b11      	ldr	r3, [pc, #68]	; (8004958 <_sbrk+0x64>)
 8004912:	4a12      	ldr	r2, [pc, #72]	; (800495c <_sbrk+0x68>)
 8004914:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004916:	4b10      	ldr	r3, [pc, #64]	; (8004958 <_sbrk+0x64>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4413      	add	r3, r2
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	429a      	cmp	r2, r3
 8004922:	d207      	bcs.n	8004934 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004924:	f007 ff54 	bl	800c7d0 <__errno>
 8004928:	4603      	mov	r3, r0
 800492a:	220c      	movs	r2, #12
 800492c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800492e:	f04f 33ff 	mov.w	r3, #4294967295
 8004932:	e009      	b.n	8004948 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004934:	4b08      	ldr	r3, [pc, #32]	; (8004958 <_sbrk+0x64>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800493a:	4b07      	ldr	r3, [pc, #28]	; (8004958 <_sbrk+0x64>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4413      	add	r3, r2
 8004942:	4a05      	ldr	r2, [pc, #20]	; (8004958 <_sbrk+0x64>)
 8004944:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004946:	68fb      	ldr	r3, [r7, #12]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3718      	adds	r7, #24
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	20020000 	.word	0x20020000
 8004954:	00000400 	.word	0x00000400
 8004958:	2000349c 	.word	0x2000349c
 800495c:	200036f0 	.word	0x200036f0

08004960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004964:	4b06      	ldr	r3, [pc, #24]	; (8004980 <SystemInit+0x20>)
 8004966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496a:	4a05      	ldr	r2, [pc, #20]	; (8004980 <SystemInit+0x20>)
 800496c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004974:	bf00      	nop
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	e000ed00 	.word	0xe000ed00

08004984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004988:	480d      	ldr	r0, [pc, #52]	; (80049c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800498a:	490e      	ldr	r1, [pc, #56]	; (80049c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800498c:	4a0e      	ldr	r2, [pc, #56]	; (80049c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800498e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004990:	e002      	b.n	8004998 <LoopCopyDataInit>

08004992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004996:	3304      	adds	r3, #4

08004998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800499a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800499c:	d3f9      	bcc.n	8004992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800499e:	4a0b      	ldr	r2, [pc, #44]	; (80049cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80049a0:	4c0b      	ldr	r4, [pc, #44]	; (80049d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80049a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049a4:	e001      	b.n	80049aa <LoopFillZerobss>

080049a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049a8:	3204      	adds	r2, #4

080049aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049ac:	d3fb      	bcc.n	80049a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80049ae:	f7ff ffd7 	bl	8004960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049b2:	f007 ff13 	bl	800c7dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049b6:	f7fd f9ef 	bl	8001d98 <main>
  bx  lr    
 80049ba:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80049bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80049c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049c4:	20000470 	.word	0x20000470
  ldr r2, =_sidata
 80049c8:	0801095c 	.word	0x0801095c
  ldr r2, =_sbss
 80049cc:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 80049d0:	200036f0 	.word	0x200036f0

080049d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049d4:	e7fe      	b.n	80049d4 <ADC_IRQHandler>
	...

080049d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80049dc:	4b0e      	ldr	r3, [pc, #56]	; (8004a18 <HAL_Init+0x40>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a0d      	ldr	r2, [pc, #52]	; (8004a18 <HAL_Init+0x40>)
 80049e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80049e8:	4b0b      	ldr	r3, [pc, #44]	; (8004a18 <HAL_Init+0x40>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a0a      	ldr	r2, [pc, #40]	; (8004a18 <HAL_Init+0x40>)
 80049ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80049f4:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <HAL_Init+0x40>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a07      	ldr	r2, [pc, #28]	; (8004a18 <HAL_Init+0x40>)
 80049fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a00:	2003      	movs	r0, #3
 8004a02:	f000 fe05 	bl	8005610 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a06:	200f      	movs	r0, #15
 8004a08:	f000 f808 	bl	8004a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a0c:	f7ff fbcc 	bl	80041a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	bd80      	pop	{r7, pc}
 8004a16:	bf00      	nop
 8004a18:	40023c00 	.word	0x40023c00

08004a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a24:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <HAL_InitTick+0x54>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	4b12      	ldr	r3, [pc, #72]	; (8004a74 <HAL_InitTick+0x58>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	4619      	mov	r1, r3
 8004a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 fe1d 	bl	800567a <HAL_SYSTICK_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e00e      	b.n	8004a68 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b0f      	cmp	r3, #15
 8004a4e:	d80a      	bhi.n	8004a66 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a50:	2200      	movs	r2, #0
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	f04f 30ff 	mov.w	r0, #4294967295
 8004a58:	f000 fde5 	bl	8005626 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a5c:	4a06      	ldr	r2, [pc, #24]	; (8004a78 <HAL_InitTick+0x5c>)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
 8004a64:	e000      	b.n	8004a68 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3708      	adds	r7, #8
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	20000280 	.word	0x20000280
 8004a74:	20000288 	.word	0x20000288
 8004a78:	20000284 	.word	0x20000284

08004a7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a80:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <HAL_IncTick+0x20>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	461a      	mov	r2, r3
 8004a86:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <HAL_IncTick+0x24>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	4a04      	ldr	r2, [pc, #16]	; (8004aa0 <HAL_IncTick+0x24>)
 8004a8e:	6013      	str	r3, [r2, #0]
}
 8004a90:	bf00      	nop
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	20000288 	.word	0x20000288
 8004aa0:	200034a0 	.word	0x200034a0

08004aa4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8004aa8:	4b03      	ldr	r3, [pc, #12]	; (8004ab8 <HAL_GetTick+0x14>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	200034a0 	.word	0x200034a0

08004abc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ac4:	f7ff ffee 	bl	8004aa4 <HAL_GetTick>
 8004ac8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d005      	beq.n	8004ae2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ad6:	4b0a      	ldr	r3, [pc, #40]	; (8004b00 <HAL_Delay+0x44>)
 8004ad8:	781b      	ldrb	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	4413      	add	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004ae2:	bf00      	nop
 8004ae4:	f7ff ffde 	bl	8004aa4 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	68fa      	ldr	r2, [r7, #12]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d8f7      	bhi.n	8004ae4 <HAL_Delay+0x28>
  {
  }
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20000288 	.word	0x20000288

08004b04 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e033      	b.n	8004b82 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d109      	bne.n	8004b36 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7ff fb76 	bl	8004214 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d118      	bne.n	8004b74 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b4a:	f023 0302 	bic.w	r3, r3, #2
 8004b4e:	f043 0202 	orr.w	r2, r3, #2
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fb0c 	bl	8005174 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b66:	f023 0303 	bic.w	r3, r3, #3
 8004b6a:	f043 0201 	orr.w	r2, r3, #1
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	641a      	str	r2, [r3, #64]	; 0x40
 8004b72:	e001      	b.n	8004b78 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d101      	bne.n	8004ba6 <HAL_ADC_Start_IT+0x1a>
 8004ba2:	2302      	movs	r3, #2
 8004ba4:	e0a1      	b.n	8004cea <HAL_ADC_Start_IT+0x15e>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d018      	beq.n	8004bee <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	689a      	ldr	r2, [r3, #8]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004bcc:	4b4a      	ldr	r3, [pc, #296]	; (8004cf8 <HAL_ADC_Start_IT+0x16c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a4a      	ldr	r2, [pc, #296]	; (8004cfc <HAL_ADC_Start_IT+0x170>)
 8004bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd6:	0c9a      	lsrs	r2, r3, #18
 8004bd8:	4613      	mov	r3, r2
 8004bda:	005b      	lsls	r3, r3, #1
 8004bdc:	4413      	add	r3, r2
 8004bde:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004be0:	e002      	b.n	8004be8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f9      	bne.n	8004be2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d169      	bne.n	8004cd0 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c00:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004c04:	f023 0301 	bic.w	r3, r3, #1
 8004c08:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d007      	beq.n	8004c2e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c26:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c3a:	d106      	bne.n	8004c4a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c40:	f023 0206 	bic.w	r2, r3, #6
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	645a      	str	r2, [r3, #68]	; 0x44
 8004c48:	e002      	b.n	8004c50 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c58:	4b29      	ldr	r3, [pc, #164]	; (8004d00 <HAL_ADC_Start_IT+0x174>)
 8004c5a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004c64:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6812      	ldr	r2, [r2, #0]
 8004c70:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c74:	f043 0320 	orr.w	r3, r3, #32
 8004c78:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 031f 	and.w	r3, r3, #31
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d10f      	bne.n	8004ca6 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d129      	bne.n	8004ce8 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ca2:	609a      	str	r2, [r3, #8]
 8004ca4:	e020      	b.n	8004ce8 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a16      	ldr	r2, [pc, #88]	; (8004d04 <HAL_ADC_Start_IT+0x178>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d11b      	bne.n	8004ce8 <HAL_ADC_Start_IT+0x15c>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	689b      	ldr	r3, [r3, #8]
 8004cb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d114      	bne.n	8004ce8 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	689a      	ldr	r2, [r3, #8]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ccc:	609a      	str	r2, [r3, #8]
 8004cce:	e00b      	b.n	8004ce8 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	f043 0210 	orr.w	r2, r3, #16
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce0:	f043 0201 	orr.w	r2, r3, #1
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	20000280 	.word	0x20000280
 8004cfc:	431bde83 	.word	0x431bde83
 8004d00:	40012300 	.word	0x40012300
 8004d04:	40012000 	.word	0x40012000

08004d08 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b086      	sub	sp, #24
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_ADC_Start_DMA+0x1e>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e0ce      	b.n	8004ec4 <HAL_ADC_Start_DMA+0x1bc>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d018      	beq.n	8004d6e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0201 	orr.w	r2, r2, #1
 8004d4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004d4c:	4b5f      	ldr	r3, [pc, #380]	; (8004ecc <HAL_ADC_Start_DMA+0x1c4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a5f      	ldr	r2, [pc, #380]	; (8004ed0 <HAL_ADC_Start_DMA+0x1c8>)
 8004d52:	fba2 2303 	umull	r2, r3, r2, r3
 8004d56:	0c9a      	lsrs	r2, r3, #18
 8004d58:	4613      	mov	r3, r2
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	4413      	add	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004d60:	e002      	b.n	8004d68 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	3b01      	subs	r3, #1
 8004d66:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f9      	bne.n	8004d62 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7c:	d107      	bne.n	8004d8e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	f040 8086 	bne.w	8004eaa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004da6:	f023 0301 	bic.w	r3, r3, #1
 8004daa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d007      	beq.n	8004dd0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004dc8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ddc:	d106      	bne.n	8004dec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004de2:	f023 0206 	bic.w	r2, r3, #6
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	645a      	str	r2, [r3, #68]	; 0x44
 8004dea:	e002      	b.n	8004df2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2200      	movs	r2, #0
 8004df0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	2200      	movs	r2, #0
 8004df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004dfa:	4b36      	ldr	r3, [pc, #216]	; (8004ed4 <HAL_ADC_Start_DMA+0x1cc>)
 8004dfc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e02:	4a35      	ldr	r2, [pc, #212]	; (8004ed8 <HAL_ADC_Start_DMA+0x1d0>)
 8004e04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0a:	4a34      	ldr	r2, [pc, #208]	; (8004edc <HAL_ADC_Start_DMA+0x1d4>)
 8004e0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e12:	4a33      	ldr	r2, [pc, #204]	; (8004ee0 <HAL_ADC_Start_DMA+0x1d8>)
 8004e14:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004e1e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	685a      	ldr	r2, [r3, #4]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8004e2e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689a      	ldr	r2, [r3, #8]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e3e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	334c      	adds	r3, #76	; 0x4c
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	68ba      	ldr	r2, [r7, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f000 fcce 	bl	80057f0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f003 031f 	and.w	r3, r3, #31
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10f      	bne.n	8004e80 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d129      	bne.n	8004ec2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e7c:	609a      	str	r2, [r3, #8]
 8004e7e:	e020      	b.n	8004ec2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a17      	ldr	r2, [pc, #92]	; (8004ee4 <HAL_ADC_Start_DMA+0x1dc>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d11b      	bne.n	8004ec2 <HAL_ADC_Start_DMA+0x1ba>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d114      	bne.n	8004ec2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ea6:	609a      	str	r2, [r3, #8]
 8004ea8:	e00b      	b.n	8004ec2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eae:	f043 0210 	orr.w	r2, r3, #16
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	f043 0201 	orr.w	r2, r3, #1
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3718      	adds	r7, #24
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bd80      	pop	{r7, pc}
 8004ecc:	20000280 	.word	0x20000280
 8004ed0:	431bde83 	.word	0x431bde83
 8004ed4:	40012300 	.word	0x40012300
 8004ed8:	0800536d 	.word	0x0800536d
 8004edc:	08005427 	.word	0x08005427
 8004ee0:	08005443 	.word	0x08005443
 8004ee4:	40012000 	.word	0x40012000

08004ee8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b083      	sub	sp, #12
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004ef0:	bf00      	nop
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b083      	sub	sp, #12
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004f04:	bf00      	nop
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d101      	bne.n	8004f2c <HAL_ADC_ConfigChannel+0x1c>
 8004f28:	2302      	movs	r3, #2
 8004f2a:	e113      	b.n	8005154 <HAL_ADC_ConfigChannel+0x244>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b09      	cmp	r3, #9
 8004f3a:	d925      	bls.n	8004f88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	68d9      	ldr	r1, [r3, #12]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	461a      	mov	r2, r3
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	005b      	lsls	r3, r3, #1
 8004f4e:	4413      	add	r3, r2
 8004f50:	3b1e      	subs	r3, #30
 8004f52:	2207      	movs	r2, #7
 8004f54:	fa02 f303 	lsl.w	r3, r2, r3
 8004f58:	43da      	mvns	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	400a      	ands	r2, r1
 8004f60:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68d9      	ldr	r1, [r3, #12]
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	b29b      	uxth	r3, r3
 8004f72:	4618      	mov	r0, r3
 8004f74:	4603      	mov	r3, r0
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	4403      	add	r3, r0
 8004f7a:	3b1e      	subs	r3, #30
 8004f7c:	409a      	lsls	r2, r3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	430a      	orrs	r2, r1
 8004f84:	60da      	str	r2, [r3, #12]
 8004f86:	e022      	b.n	8004fce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6919      	ldr	r1, [r3, #16]
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	461a      	mov	r2, r3
 8004f96:	4613      	mov	r3, r2
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	4413      	add	r3, r2
 8004f9c:	2207      	movs	r2, #7
 8004f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa2:	43da      	mvns	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	400a      	ands	r2, r1
 8004faa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6919      	ldr	r1, [r3, #16]
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	4403      	add	r3, r0
 8004fc4:	409a      	lsls	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	2b06      	cmp	r3, #6
 8004fd4:	d824      	bhi.n	8005020 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	3b05      	subs	r3, #5
 8004fe8:	221f      	movs	r2, #31
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43da      	mvns	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	400a      	ands	r2, r1
 8004ff6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	b29b      	uxth	r3, r3
 8005004:	4618      	mov	r0, r3
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	3b05      	subs	r3, #5
 8005012:	fa00 f203 	lsl.w	r2, r0, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	430a      	orrs	r2, r1
 800501c:	635a      	str	r2, [r3, #52]	; 0x34
 800501e:	e04c      	b.n	80050ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	2b0c      	cmp	r3, #12
 8005026:	d824      	bhi.n	8005072 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	3b23      	subs	r3, #35	; 0x23
 800503a:	221f      	movs	r2, #31
 800503c:	fa02 f303 	lsl.w	r3, r2, r3
 8005040:	43da      	mvns	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	400a      	ands	r2, r1
 8005048:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	b29b      	uxth	r3, r3
 8005056:	4618      	mov	r0, r3
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	685a      	ldr	r2, [r3, #4]
 800505c:	4613      	mov	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	4413      	add	r3, r2
 8005062:	3b23      	subs	r3, #35	; 0x23
 8005064:	fa00 f203 	lsl.w	r2, r0, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	631a      	str	r2, [r3, #48]	; 0x30
 8005070:	e023      	b.n	80050ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	3b41      	subs	r3, #65	; 0x41
 8005084:	221f      	movs	r2, #31
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43da      	mvns	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	400a      	ands	r2, r1
 8005092:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	b29b      	uxth	r3, r3
 80050a0:	4618      	mov	r0, r3
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	685a      	ldr	r2, [r3, #4]
 80050a6:	4613      	mov	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	3b41      	subs	r3, #65	; 0x41
 80050ae:	fa00 f203 	lsl.w	r2, r0, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80050ba:	4b29      	ldr	r3, [pc, #164]	; (8005160 <HAL_ADC_ConfigChannel+0x250>)
 80050bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a28      	ldr	r2, [pc, #160]	; (8005164 <HAL_ADC_ConfigChannel+0x254>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d10f      	bne.n	80050e8 <HAL_ADC_ConfigChannel+0x1d8>
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b12      	cmp	r3, #18
 80050ce:	d10b      	bne.n	80050e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a1d      	ldr	r2, [pc, #116]	; (8005164 <HAL_ADC_ConfigChannel+0x254>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d12b      	bne.n	800514a <HAL_ADC_ConfigChannel+0x23a>
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a1c      	ldr	r2, [pc, #112]	; (8005168 <HAL_ADC_ConfigChannel+0x258>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d003      	beq.n	8005104 <HAL_ADC_ConfigChannel+0x1f4>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b11      	cmp	r3, #17
 8005102:	d122      	bne.n	800514a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a11      	ldr	r2, [pc, #68]	; (8005168 <HAL_ADC_ConfigChannel+0x258>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d111      	bne.n	800514a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005126:	4b11      	ldr	r3, [pc, #68]	; (800516c <HAL_ADC_ConfigChannel+0x25c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a11      	ldr	r2, [pc, #68]	; (8005170 <HAL_ADC_ConfigChannel+0x260>)
 800512c:	fba2 2303 	umull	r2, r3, r2, r3
 8005130:	0c9a      	lsrs	r2, r3, #18
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800513c:	e002      	b.n	8005144 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	3b01      	subs	r3, #1
 8005142:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1f9      	bne.n	800513e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr
 8005160:	40012300 	.word	0x40012300
 8005164:	40012000 	.word	0x40012000
 8005168:	10000012 	.word	0x10000012
 800516c:	20000280 	.word	0x20000280
 8005170:	431bde83 	.word	0x431bde83

08005174 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005174:	b480      	push	{r7}
 8005176:	b085      	sub	sp, #20
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800517c:	4b79      	ldr	r3, [pc, #484]	; (8005364 <ADC_Init+0x1f0>)
 800517e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	685a      	ldr	r2, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	431a      	orrs	r2, r3
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	685a      	ldr	r2, [r3, #4]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6859      	ldr	r1, [r3, #4]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	021a      	lsls	r2, r3, #8
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	685a      	ldr	r2, [r3, #4]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80051cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6859      	ldr	r1, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689a      	ldr	r2, [r3, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	430a      	orrs	r2, r1
 80051de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689a      	ldr	r2, [r3, #8]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6899      	ldr	r1, [r3, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68da      	ldr	r2, [r3, #12]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005206:	4a58      	ldr	r2, [pc, #352]	; (8005368 <ADC_Init+0x1f4>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d022      	beq.n	8005252 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800521a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	6899      	ldr	r1, [r3, #8]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800523c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6899      	ldr	r1, [r3, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	609a      	str	r2, [r3, #8]
 8005250:	e00f      	b.n	8005272 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	689a      	ldr	r2, [r3, #8]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005270:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689a      	ldr	r2, [r3, #8]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f022 0202 	bic.w	r2, r2, #2
 8005280:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6899      	ldr	r1, [r3, #8]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	7e1b      	ldrb	r3, [r3, #24]
 800528c:	005a      	lsls	r2, r3, #1
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d01b      	beq.n	80052d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	685a      	ldr	r2, [r3, #4]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80052be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6859      	ldr	r1, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ca:	3b01      	subs	r3, #1
 80052cc:	035a      	lsls	r2, r3, #13
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	430a      	orrs	r2, r1
 80052d4:	605a      	str	r2, [r3, #4]
 80052d6:	e007      	b.n	80052e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80052f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	69db      	ldr	r3, [r3, #28]
 8005302:	3b01      	subs	r3, #1
 8005304:	051a      	lsls	r2, r3, #20
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	430a      	orrs	r2, r1
 800530c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800531c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6899      	ldr	r1, [r3, #8]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800532a:	025a      	lsls	r2, r3, #9
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005342:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6899      	ldr	r1, [r3, #8]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	695b      	ldr	r3, [r3, #20]
 800534e:	029a      	lsls	r2, r3, #10
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	430a      	orrs	r2, r1
 8005356:	609a      	str	r2, [r3, #8]
}
 8005358:	bf00      	nop
 800535a:	3714      	adds	r7, #20
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	40012300 	.word	0x40012300
 8005368:	0f000001 	.word	0x0f000001

0800536c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005382:	2b00      	cmp	r3, #0
 8005384:	d13c      	bne.n	8005400 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800539c:	2b00      	cmp	r3, #0
 800539e:	d12b      	bne.n	80053f8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d127      	bne.n	80053f8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d006      	beq.n	80053c4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d119      	bne.n	80053f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 0220 	bic.w	r2, r2, #32
 80053d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d105      	bne.n	80053f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	f043 0201 	orr.w	r2, r3, #1
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	f7fe fc63 	bl	8003cc4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80053fe:	e00e      	b.n	800541e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	f003 0310 	and.w	r3, r3, #16
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f7ff fd75 	bl	8004efc <HAL_ADC_ErrorCallback>
}
 8005412:	e004      	b.n	800541e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	4798      	blx	r3
}
 800541e:	bf00      	nop
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}

08005426 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005426:	b580      	push	{r7, lr}
 8005428:	b084      	sub	sp, #16
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005432:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f7ff fd57 	bl	8004ee8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800543a:	bf00      	nop
 800543c:	3710      	adds	r7, #16
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b084      	sub	sp, #16
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2240      	movs	r2, #64	; 0x40
 8005454:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800545a:	f043 0204 	orr.w	r2, r3, #4
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f7ff fd4a 	bl	8004efc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005468:	bf00      	nop
 800546a:	3710      	adds	r7, #16
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005480:	4b0c      	ldr	r3, [pc, #48]	; (80054b4 <__NVIC_SetPriorityGrouping+0x44>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800548c:	4013      	ands	r3, r2
 800548e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005498:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800549c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054a2:	4a04      	ldr	r2, [pc, #16]	; (80054b4 <__NVIC_SetPriorityGrouping+0x44>)
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	60d3      	str	r3, [r2, #12]
}
 80054a8:	bf00      	nop
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	e000ed00 	.word	0xe000ed00

080054b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054bc:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <__NVIC_GetPriorityGrouping+0x18>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	0a1b      	lsrs	r3, r3, #8
 80054c2:	f003 0307 	and.w	r3, r3, #7
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	e000ed00 	.word	0xe000ed00

080054d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	db0b      	blt.n	80054fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054e6:	79fb      	ldrb	r3, [r7, #7]
 80054e8:	f003 021f 	and.w	r2, r3, #31
 80054ec:	4907      	ldr	r1, [pc, #28]	; (800550c <__NVIC_EnableIRQ+0x38>)
 80054ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	2001      	movs	r0, #1
 80054f6:	fa00 f202 	lsl.w	r2, r0, r2
 80054fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	e000e100 	.word	0xe000e100

08005510 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	6039      	str	r1, [r7, #0]
 800551a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800551c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005520:	2b00      	cmp	r3, #0
 8005522:	db0a      	blt.n	800553a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	b2da      	uxtb	r2, r3
 8005528:	490c      	ldr	r1, [pc, #48]	; (800555c <__NVIC_SetPriority+0x4c>)
 800552a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552e:	0112      	lsls	r2, r2, #4
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	440b      	add	r3, r1
 8005534:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005538:	e00a      	b.n	8005550 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	b2da      	uxtb	r2, r3
 800553e:	4908      	ldr	r1, [pc, #32]	; (8005560 <__NVIC_SetPriority+0x50>)
 8005540:	79fb      	ldrb	r3, [r7, #7]
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	3b04      	subs	r3, #4
 8005548:	0112      	lsls	r2, r2, #4
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	440b      	add	r3, r1
 800554e:	761a      	strb	r2, [r3, #24]
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr
 800555c:	e000e100 	.word	0xe000e100
 8005560:	e000ed00 	.word	0xe000ed00

08005564 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005564:	b480      	push	{r7}
 8005566:	b089      	sub	sp, #36	; 0x24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f003 0307 	and.w	r3, r3, #7
 8005576:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	f1c3 0307 	rsb	r3, r3, #7
 800557e:	2b04      	cmp	r3, #4
 8005580:	bf28      	it	cs
 8005582:	2304      	movcs	r3, #4
 8005584:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	3304      	adds	r3, #4
 800558a:	2b06      	cmp	r3, #6
 800558c:	d902      	bls.n	8005594 <NVIC_EncodePriority+0x30>
 800558e:	69fb      	ldr	r3, [r7, #28]
 8005590:	3b03      	subs	r3, #3
 8005592:	e000      	b.n	8005596 <NVIC_EncodePriority+0x32>
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005598:	f04f 32ff 	mov.w	r2, #4294967295
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	fa02 f303 	lsl.w	r3, r2, r3
 80055a2:	43da      	mvns	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	401a      	ands	r2, r3
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055ac:	f04f 31ff 	mov.w	r1, #4294967295
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	fa01 f303 	lsl.w	r3, r1, r3
 80055b6:	43d9      	mvns	r1, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055bc:	4313      	orrs	r3, r2
         );
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3724      	adds	r7, #36	; 0x24
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
	...

080055cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3b01      	subs	r3, #1
 80055d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80055dc:	d301      	bcc.n	80055e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80055de:	2301      	movs	r3, #1
 80055e0:	e00f      	b.n	8005602 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80055e2:	4a0a      	ldr	r2, [pc, #40]	; (800560c <SysTick_Config+0x40>)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80055ea:	210f      	movs	r1, #15
 80055ec:	f04f 30ff 	mov.w	r0, #4294967295
 80055f0:	f7ff ff8e 	bl	8005510 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <SysTick_Config+0x40>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80055fa:	4b04      	ldr	r3, [pc, #16]	; (800560c <SysTick_Config+0x40>)
 80055fc:	2207      	movs	r2, #7
 80055fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
 800560a:	bf00      	nop
 800560c:	e000e010 	.word	0xe000e010

08005610 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f7ff ff29 	bl	8005470 <__NVIC_SetPriorityGrouping>
}
 800561e:	bf00      	nop
 8005620:	3708      	adds	r7, #8
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005626:	b580      	push	{r7, lr}
 8005628:	b086      	sub	sp, #24
 800562a:	af00      	add	r7, sp, #0
 800562c:	4603      	mov	r3, r0
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
 8005632:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005634:	2300      	movs	r3, #0
 8005636:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005638:	f7ff ff3e 	bl	80054b8 <__NVIC_GetPriorityGrouping>
 800563c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	6978      	ldr	r0, [r7, #20]
 8005644:	f7ff ff8e 	bl	8005564 <NVIC_EncodePriority>
 8005648:	4602      	mov	r2, r0
 800564a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800564e:	4611      	mov	r1, r2
 8005650:	4618      	mov	r0, r3
 8005652:	f7ff ff5d 	bl	8005510 <__NVIC_SetPriority>
}
 8005656:	bf00      	nop
 8005658:	3718      	adds	r7, #24
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}

0800565e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800565e:	b580      	push	{r7, lr}
 8005660:	b082      	sub	sp, #8
 8005662:	af00      	add	r7, sp, #0
 8005664:	4603      	mov	r3, r0
 8005666:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800566c:	4618      	mov	r0, r3
 800566e:	f7ff ff31 	bl	80054d4 <__NVIC_EnableIRQ>
}
 8005672:	bf00      	nop
 8005674:	3708      	adds	r7, #8
 8005676:	46bd      	mov	sp, r7
 8005678:	bd80      	pop	{r7, pc}

0800567a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff ffa2 	bl	80055cc <SysTick_Config>
 8005688:	4603      	mov	r3, r0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800569c:	2300      	movs	r3, #0
 800569e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80056a0:	f7ff fa00 	bl	8004aa4 <HAL_GetTick>
 80056a4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e099      	b.n	80057e4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2202      	movs	r2, #2
 80056b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0201 	bic.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056d0:	e00f      	b.n	80056f2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056d2:	f7ff f9e7 	bl	8004aa4 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b05      	cmp	r3, #5
 80056de:	d908      	bls.n	80056f2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2220      	movs	r2, #32
 80056e4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2203      	movs	r2, #3
 80056ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e078      	b.n	80057e4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 0301 	and.w	r3, r3, #1
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1e8      	bne.n	80056d2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	4b38      	ldr	r3, [pc, #224]	; (80057ec <HAL_DMA_Init+0x158>)
 800570c:	4013      	ands	r3, r2
 800570e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800571e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	691b      	ldr	r3, [r3, #16]
 8005724:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800572a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	699b      	ldr	r3, [r3, #24]
 8005730:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005736:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	4313      	orrs	r3, r2
 8005742:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005748:	2b04      	cmp	r3, #4
 800574a:	d107      	bne.n	800575c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	4313      	orrs	r3, r2
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f023 0307 	bic.w	r3, r3, #7
 8005772:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	4313      	orrs	r3, r2
 800577c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	2b04      	cmp	r3, #4
 8005784:	d117      	bne.n	80057b6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	4313      	orrs	r3, r2
 800578e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00e      	beq.n	80057b6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 fb01 	bl	8005da0 <DMA_CheckFifoParam>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d008      	beq.n	80057b6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2240      	movs	r2, #64	; 0x40
 80057a8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80057b2:	2301      	movs	r3, #1
 80057b4:	e016      	b.n	80057e4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fab8 	bl	8005d34 <DMA_CalcBaseAndBitshift>
 80057c4:	4603      	mov	r3, r0
 80057c6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057cc:	223f      	movs	r2, #63	; 0x3f
 80057ce:	409a      	lsls	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	f010803f 	.word	0xf010803f

080057f0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80057fe:	2300      	movs	r3, #0
 8005800:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005806:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_DMA_Start_IT+0x26>
 8005812:	2302      	movs	r3, #2
 8005814:	e040      	b.n	8005898 <HAL_DMA_Start_IT+0xa8>
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2b01      	cmp	r3, #1
 8005828:	d12f      	bne.n	800588a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2202      	movs	r2, #2
 800582e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2200      	movs	r2, #0
 8005836:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	68b9      	ldr	r1, [r7, #8]
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 fa4a 	bl	8005cd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005848:	223f      	movs	r2, #63	; 0x3f
 800584a:	409a      	lsls	r2, r3
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f042 0216 	orr.w	r2, r2, #22
 800585e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	2b00      	cmp	r3, #0
 8005866:	d007      	beq.n	8005878 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f042 0208 	orr.w	r2, r2, #8
 8005876:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0201 	orr.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	e005      	b.n	8005896 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005892:	2302      	movs	r3, #2
 8005894:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005896:	7dfb      	ldrb	r3, [r7, #23]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3718      	adds	r7, #24
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ac:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80058ae:	f7ff f8f9 	bl	8004aa4 <HAL_GetTick>
 80058b2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058ba:	b2db      	uxtb	r3, r3
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d008      	beq.n	80058d2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2280      	movs	r2, #128	; 0x80
 80058c4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e052      	b.n	8005978 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0216 	bic.w	r2, r2, #22
 80058e0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	695a      	ldr	r2, [r3, #20]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058f0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d103      	bne.n	8005902 <HAL_DMA_Abort+0x62>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d007      	beq.n	8005912 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0208 	bic.w	r2, r2, #8
 8005910:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0201 	bic.w	r2, r2, #1
 8005920:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005922:	e013      	b.n	800594c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005924:	f7ff f8be 	bl	8004aa4 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	2b05      	cmp	r3, #5
 8005930:	d90c      	bls.n	800594c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2220      	movs	r2, #32
 8005936:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2203      	movs	r2, #3
 800593c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e015      	b.n	8005978 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 0301 	and.w	r3, r3, #1
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1e4      	bne.n	8005924 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800595e:	223f      	movs	r2, #63	; 0x3f
 8005960:	409a      	lsls	r2, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005976:	2300      	movs	r3, #0
}
 8005978:	4618      	mov	r0, r3
 800597a:	3710      	adds	r7, #16
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	d004      	beq.n	800599e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2280      	movs	r2, #128	; 0x80
 8005998:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e00c      	b.n	80059b8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2205      	movs	r2, #5
 80059a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0201 	bic.w	r2, r2, #1
 80059b4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80059d0:	4b8e      	ldr	r3, [pc, #568]	; (8005c0c <HAL_DMA_IRQHandler+0x248>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	4a8e      	ldr	r2, [pc, #568]	; (8005c10 <HAL_DMA_IRQHandler+0x24c>)
 80059d6:	fba2 2303 	umull	r2, r3, r2, r3
 80059da:	0a9b      	lsrs	r3, r3, #10
 80059dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059ee:	2208      	movs	r2, #8
 80059f0:	409a      	lsls	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	4013      	ands	r3, r2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d01a      	beq.n	8005a30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0304 	and.w	r3, r3, #4
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d013      	beq.n	8005a30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f022 0204 	bic.w	r2, r2, #4
 8005a16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a1c:	2208      	movs	r2, #8
 8005a1e:	409a      	lsls	r2, r3
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a28:	f043 0201 	orr.w	r2, r3, #1
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a34:	2201      	movs	r2, #1
 8005a36:	409a      	lsls	r2, r3
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	4013      	ands	r3, r2
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d012      	beq.n	8005a66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00b      	beq.n	8005a66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a52:	2201      	movs	r2, #1
 8005a54:	409a      	lsls	r2, r3
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a5e:	f043 0202 	orr.w	r2, r3, #2
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a6a:	2204      	movs	r2, #4
 8005a6c:	409a      	lsls	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	4013      	ands	r3, r2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d012      	beq.n	8005a9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0302 	and.w	r3, r3, #2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00b      	beq.n	8005a9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a88:	2204      	movs	r2, #4
 8005a8a:	409a      	lsls	r2, r3
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a94:	f043 0204 	orr.w	r2, r3, #4
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa0:	2210      	movs	r2, #16
 8005aa2:	409a      	lsls	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4013      	ands	r3, r2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d043      	beq.n	8005b34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f003 0308 	and.w	r3, r3, #8
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d03c      	beq.n	8005b34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005abe:	2210      	movs	r2, #16
 8005ac0:	409a      	lsls	r2, r3
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d018      	beq.n	8005b06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d108      	bne.n	8005af4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d024      	beq.n	8005b34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	4798      	blx	r3
 8005af2:	e01f      	b.n	8005b34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d01b      	beq.n	8005b34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	4798      	blx	r3
 8005b04:	e016      	b.n	8005b34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d107      	bne.n	8005b24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 0208 	bic.w	r2, r2, #8
 8005b22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d003      	beq.n	8005b34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b38:	2220      	movs	r2, #32
 8005b3a:	409a      	lsls	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 808f 	beq.w	8005c64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f003 0310 	and.w	r3, r3, #16
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	f000 8087 	beq.w	8005c64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b5a:	2220      	movs	r2, #32
 8005b5c:	409a      	lsls	r2, r3
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b05      	cmp	r3, #5
 8005b6c:	d136      	bne.n	8005bdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0216 	bic.w	r2, r2, #22
 8005b7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	695a      	ldr	r2, [r3, #20]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d103      	bne.n	8005b9e <HAL_DMA_IRQHandler+0x1da>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d007      	beq.n	8005bae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	681a      	ldr	r2, [r3, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f022 0208 	bic.w	r2, r2, #8
 8005bac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bb2:	223f      	movs	r2, #63	; 0x3f
 8005bb4:	409a      	lsls	r2, r3
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d07e      	beq.n	8005cd0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	4798      	blx	r3
        }
        return;
 8005bda:	e079      	b.n	8005cd0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d01d      	beq.n	8005c26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10d      	bne.n	8005c14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d031      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c04:	6878      	ldr	r0, [r7, #4]
 8005c06:	4798      	blx	r3
 8005c08:	e02c      	b.n	8005c64 <HAL_DMA_IRQHandler+0x2a0>
 8005c0a:	bf00      	nop
 8005c0c:	20000280 	.word	0x20000280
 8005c10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d023      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	4798      	blx	r3
 8005c24:	e01e      	b.n	8005c64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d10f      	bne.n	8005c54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f022 0210 	bic.w	r2, r2, #16
 8005c42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d032      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d022      	beq.n	8005cbe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2205      	movs	r2, #5
 8005c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0201 	bic.w	r2, r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	3301      	adds	r3, #1
 8005c94:	60bb      	str	r3, [r7, #8]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d307      	bcc.n	8005cac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1f2      	bne.n	8005c90 <HAL_DMA_IRQHandler+0x2cc>
 8005caa:	e000      	b.n	8005cae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005cac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d005      	beq.n	8005cd2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	4798      	blx	r3
 8005cce:	e000      	b.n	8005cd2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005cd0:	bf00      	nop
    }
  }
}
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	607a      	str	r2, [r7, #4]
 8005ce4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005cf4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	2b40      	cmp	r3, #64	; 0x40
 8005d04:	d108      	bne.n	8005d18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005d16:	e007      	b.n	8005d28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	60da      	str	r2, [r3, #12]
}
 8005d28:	bf00      	nop
 8005d2a:	3714      	adds	r7, #20
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	3b10      	subs	r3, #16
 8005d44:	4a14      	ldr	r2, [pc, #80]	; (8005d98 <DMA_CalcBaseAndBitshift+0x64>)
 8005d46:	fba2 2303 	umull	r2, r3, r2, r3
 8005d4a:	091b      	lsrs	r3, r3, #4
 8005d4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005d4e:	4a13      	ldr	r2, [pc, #76]	; (8005d9c <DMA_CalcBaseAndBitshift+0x68>)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	4413      	add	r3, r2
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	461a      	mov	r2, r3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b03      	cmp	r3, #3
 8005d60:	d909      	bls.n	8005d76 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d6a:	f023 0303 	bic.w	r3, r3, #3
 8005d6e:	1d1a      	adds	r2, r3, #4
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	659a      	str	r2, [r3, #88]	; 0x58
 8005d74:	e007      	b.n	8005d86 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005d7e:	f023 0303 	bic.w	r3, r3, #3
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	aaaaaaab 	.word	0xaaaaaaab
 8005d9c:	08010128 	.word	0x08010128

08005da0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005da8:	2300      	movs	r3, #0
 8005daa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005db0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d11f      	bne.n	8005dfa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d856      	bhi.n	8005e6e <DMA_CheckFifoParam+0xce>
 8005dc0:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <DMA_CheckFifoParam+0x28>)
 8005dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc6:	bf00      	nop
 8005dc8:	08005dd9 	.word	0x08005dd9
 8005dcc:	08005deb 	.word	0x08005deb
 8005dd0:	08005dd9 	.word	0x08005dd9
 8005dd4:	08005e6f 	.word	0x08005e6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d046      	beq.n	8005e72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005de8:	e043      	b.n	8005e72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005df2:	d140      	bne.n	8005e76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005df8:	e03d      	b.n	8005e76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e02:	d121      	bne.n	8005e48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	2b03      	cmp	r3, #3
 8005e08:	d837      	bhi.n	8005e7a <DMA_CheckFifoParam+0xda>
 8005e0a:	a201      	add	r2, pc, #4	; (adr r2, 8005e10 <DMA_CheckFifoParam+0x70>)
 8005e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e10:	08005e21 	.word	0x08005e21
 8005e14:	08005e27 	.word	0x08005e27
 8005e18:	08005e21 	.word	0x08005e21
 8005e1c:	08005e39 	.word	0x08005e39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	73fb      	strb	r3, [r7, #15]
      break;
 8005e24:	e030      	b.n	8005e88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d025      	beq.n	8005e7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005e36:	e022      	b.n	8005e7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005e40:	d11f      	bne.n	8005e82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005e46:	e01c      	b.n	8005e82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d903      	bls.n	8005e56 <DMA_CheckFifoParam+0xb6>
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	2b03      	cmp	r3, #3
 8005e52:	d003      	beq.n	8005e5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005e54:	e018      	b.n	8005e88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	73fb      	strb	r3, [r7, #15]
      break;
 8005e5a:	e015      	b.n	8005e88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00e      	beq.n	8005e86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e6c:	e00b      	b.n	8005e86 <DMA_CheckFifoParam+0xe6>
      break;
 8005e6e:	bf00      	nop
 8005e70:	e00a      	b.n	8005e88 <DMA_CheckFifoParam+0xe8>
      break;
 8005e72:	bf00      	nop
 8005e74:	e008      	b.n	8005e88 <DMA_CheckFifoParam+0xe8>
      break;
 8005e76:	bf00      	nop
 8005e78:	e006      	b.n	8005e88 <DMA_CheckFifoParam+0xe8>
      break;
 8005e7a:	bf00      	nop
 8005e7c:	e004      	b.n	8005e88 <DMA_CheckFifoParam+0xe8>
      break;
 8005e7e:	bf00      	nop
 8005e80:	e002      	b.n	8005e88 <DMA_CheckFifoParam+0xe8>
      break;   
 8005e82:	bf00      	nop
 8005e84:	e000      	b.n	8005e88 <DMA_CheckFifoParam+0xe8>
      break;
 8005e86:	bf00      	nop
    }
  } 
  
  return status; 
 8005e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3714      	adds	r7, #20
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e94:	4770      	bx	lr
 8005e96:	bf00      	nop

08005e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b089      	sub	sp, #36	; 0x24
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61fb      	str	r3, [r7, #28]
 8005eb2:	e159      	b.n	8006168 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ebc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	f040 8148 	bne.w	8006162 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f003 0303 	and.w	r3, r3, #3
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d005      	beq.n	8005eea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d130      	bne.n	8005f4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005ef0:	69fb      	ldr	r3, [r7, #28]
 8005ef2:	005b      	lsls	r3, r3, #1
 8005ef4:	2203      	movs	r2, #3
 8005ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8005efa:	43db      	mvns	r3, r3
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	4013      	ands	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68da      	ldr	r2, [r3, #12]
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	005b      	lsls	r3, r3, #1
 8005f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	4313      	orrs	r3, r2
 8005f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005f20:	2201      	movs	r2, #1
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	fa02 f303 	lsl.w	r3, r2, r3
 8005f28:	43db      	mvns	r3, r3
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	091b      	lsrs	r3, r3, #4
 8005f36:	f003 0201 	and.w	r2, r3, #1
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f003 0303 	and.w	r3, r3, #3
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d017      	beq.n	8005f88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005f5e:	69fb      	ldr	r3, [r7, #28]
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	2203      	movs	r2, #3
 8005f64:	fa02 f303 	lsl.w	r3, r2, r3
 8005f68:	43db      	mvns	r3, r3
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	689a      	ldr	r2, [r3, #8]
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7c:	69ba      	ldr	r2, [r7, #24]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	69ba      	ldr	r2, [r7, #24]
 8005f86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f003 0303 	and.w	r3, r3, #3
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d123      	bne.n	8005fdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	08da      	lsrs	r2, r3, #3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	3208      	adds	r2, #8
 8005f9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	f003 0307 	and.w	r3, r3, #7
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	220f      	movs	r2, #15
 8005fac:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb0:	43db      	mvns	r3, r3
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	691a      	ldr	r2, [r3, #16]
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	f003 0307 	and.w	r3, r3, #7
 8005fc2:	009b      	lsls	r3, r3, #2
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	08da      	lsrs	r2, r3, #3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3208      	adds	r2, #8
 8005fd6:	69b9      	ldr	r1, [r7, #24]
 8005fd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	2203      	movs	r2, #3
 8005fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8005fec:	43db      	mvns	r3, r3
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	f003 0203 	and.w	r2, r3, #3
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	005b      	lsls	r3, r3, #1
 8006000:	fa02 f303 	lsl.w	r3, r2, r3
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	4313      	orrs	r3, r2
 8006008:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006018:	2b00      	cmp	r3, #0
 800601a:	f000 80a2 	beq.w	8006162 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800601e:	2300      	movs	r3, #0
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	4b57      	ldr	r3, [pc, #348]	; (8006180 <HAL_GPIO_Init+0x2e8>)
 8006024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006026:	4a56      	ldr	r2, [pc, #344]	; (8006180 <HAL_GPIO_Init+0x2e8>)
 8006028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800602c:	6453      	str	r3, [r2, #68]	; 0x44
 800602e:	4b54      	ldr	r3, [pc, #336]	; (8006180 <HAL_GPIO_Init+0x2e8>)
 8006030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006036:	60fb      	str	r3, [r7, #12]
 8006038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800603a:	4a52      	ldr	r2, [pc, #328]	; (8006184 <HAL_GPIO_Init+0x2ec>)
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	089b      	lsrs	r3, r3, #2
 8006040:	3302      	adds	r3, #2
 8006042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006046:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	f003 0303 	and.w	r3, r3, #3
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	220f      	movs	r2, #15
 8006052:	fa02 f303 	lsl.w	r3, r2, r3
 8006056:	43db      	mvns	r3, r3
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	4013      	ands	r3, r2
 800605c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	4a49      	ldr	r2, [pc, #292]	; (8006188 <HAL_GPIO_Init+0x2f0>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d019      	beq.n	800609a <HAL_GPIO_Init+0x202>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	4a48      	ldr	r2, [pc, #288]	; (800618c <HAL_GPIO_Init+0x2f4>)
 800606a:	4293      	cmp	r3, r2
 800606c:	d013      	beq.n	8006096 <HAL_GPIO_Init+0x1fe>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	4a47      	ldr	r2, [pc, #284]	; (8006190 <HAL_GPIO_Init+0x2f8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d00d      	beq.n	8006092 <HAL_GPIO_Init+0x1fa>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a46      	ldr	r2, [pc, #280]	; (8006194 <HAL_GPIO_Init+0x2fc>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d007      	beq.n	800608e <HAL_GPIO_Init+0x1f6>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a45      	ldr	r2, [pc, #276]	; (8006198 <HAL_GPIO_Init+0x300>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d101      	bne.n	800608a <HAL_GPIO_Init+0x1f2>
 8006086:	2304      	movs	r3, #4
 8006088:	e008      	b.n	800609c <HAL_GPIO_Init+0x204>
 800608a:	2307      	movs	r3, #7
 800608c:	e006      	b.n	800609c <HAL_GPIO_Init+0x204>
 800608e:	2303      	movs	r3, #3
 8006090:	e004      	b.n	800609c <HAL_GPIO_Init+0x204>
 8006092:	2302      	movs	r3, #2
 8006094:	e002      	b.n	800609c <HAL_GPIO_Init+0x204>
 8006096:	2301      	movs	r3, #1
 8006098:	e000      	b.n	800609c <HAL_GPIO_Init+0x204>
 800609a:	2300      	movs	r3, #0
 800609c:	69fa      	ldr	r2, [r7, #28]
 800609e:	f002 0203 	and.w	r2, r2, #3
 80060a2:	0092      	lsls	r2, r2, #2
 80060a4:	4093      	lsls	r3, r2
 80060a6:	69ba      	ldr	r2, [r7, #24]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80060ac:	4935      	ldr	r1, [pc, #212]	; (8006184 <HAL_GPIO_Init+0x2ec>)
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	089b      	lsrs	r3, r3, #2
 80060b2:	3302      	adds	r3, #2
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80060ba:	4b38      	ldr	r3, [pc, #224]	; (800619c <HAL_GPIO_Init+0x304>)
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	43db      	mvns	r3, r3
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	4013      	ands	r3, r2
 80060c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	4313      	orrs	r3, r2
 80060dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80060de:	4a2f      	ldr	r2, [pc, #188]	; (800619c <HAL_GPIO_Init+0x304>)
 80060e0:	69bb      	ldr	r3, [r7, #24]
 80060e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80060e4:	4b2d      	ldr	r3, [pc, #180]	; (800619c <HAL_GPIO_Init+0x304>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	43db      	mvns	r3, r3
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	4013      	ands	r3, r2
 80060f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	4313      	orrs	r3, r2
 8006106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006108:	4a24      	ldr	r2, [pc, #144]	; (800619c <HAL_GPIO_Init+0x304>)
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800610e:	4b23      	ldr	r3, [pc, #140]	; (800619c <HAL_GPIO_Init+0x304>)
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	43db      	mvns	r3, r3
 8006118:	69ba      	ldr	r2, [r7, #24]
 800611a:	4013      	ands	r3, r2
 800611c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	4313      	orrs	r3, r2
 8006130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006132:	4a1a      	ldr	r2, [pc, #104]	; (800619c <HAL_GPIO_Init+0x304>)
 8006134:	69bb      	ldr	r3, [r7, #24]
 8006136:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006138:	4b18      	ldr	r3, [pc, #96]	; (800619c <HAL_GPIO_Init+0x304>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	43db      	mvns	r3, r3
 8006142:	69ba      	ldr	r2, [r7, #24]
 8006144:	4013      	ands	r3, r2
 8006146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4313      	orrs	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800615c:	4a0f      	ldr	r2, [pc, #60]	; (800619c <HAL_GPIO_Init+0x304>)
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	3301      	adds	r3, #1
 8006166:	61fb      	str	r3, [r7, #28]
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	2b0f      	cmp	r3, #15
 800616c:	f67f aea2 	bls.w	8005eb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006170:	bf00      	nop
 8006172:	bf00      	nop
 8006174:	3724      	adds	r7, #36	; 0x24
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	40023800 	.word	0x40023800
 8006184:	40013800 	.word	0x40013800
 8006188:	40020000 	.word	0x40020000
 800618c:	40020400 	.word	0x40020400
 8006190:	40020800 	.word	0x40020800
 8006194:	40020c00 	.word	0x40020c00
 8006198:	40021000 	.word	0x40021000
 800619c:	40013c00 	.word	0x40013c00

080061a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	460b      	mov	r3, r1
 80061aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	691a      	ldr	r2, [r3, #16]
 80061b0:	887b      	ldrh	r3, [r7, #2]
 80061b2:	4013      	ands	r3, r2
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061b8:	2301      	movs	r3, #1
 80061ba:	73fb      	strb	r3, [r7, #15]
 80061bc:	e001      	b.n	80061c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061be:	2300      	movs	r3, #0
 80061c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3714      	adds	r7, #20
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	460b      	mov	r3, r1
 80061da:	807b      	strh	r3, [r7, #2]
 80061dc:	4613      	mov	r3, r2
 80061de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80061e0:	787b      	ldrb	r3, [r7, #1]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80061e6:	887a      	ldrh	r2, [r7, #2]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80061ec:	e003      	b.n	80061f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80061ee:	887b      	ldrh	r3, [r7, #2]
 80061f0:	041a      	lsls	r2, r3, #16
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	619a      	str	r2, [r3, #24]
}
 80061f6:	bf00      	nop
 80061f8:	370c      	adds	r7, #12
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr

08006202 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006202:	b480      	push	{r7}
 8006204:	b085      	sub	sp, #20
 8006206:	af00      	add	r7, sp, #0
 8006208:	6078      	str	r0, [r7, #4]
 800620a:	460b      	mov	r3, r1
 800620c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006214:	887a      	ldrh	r2, [r7, #2]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4013      	ands	r3, r2
 800621a:	041a      	lsls	r2, r3, #16
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	43d9      	mvns	r1, r3
 8006220:	887b      	ldrh	r3, [r7, #2]
 8006222:	400b      	ands	r3, r1
 8006224:	431a      	orrs	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	619a      	str	r2, [r3, #24]
}
 800622a:	bf00      	nop
 800622c:	3714      	adds	r7, #20
 800622e:	46bd      	mov	sp, r7
 8006230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006234:	4770      	bx	lr
	...

08006238 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d101      	bne.n	800624a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e267      	b.n	800671a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 0301 	and.w	r3, r3, #1
 8006252:	2b00      	cmp	r3, #0
 8006254:	d075      	beq.n	8006342 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006256:	4b88      	ldr	r3, [pc, #544]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f003 030c 	and.w	r3, r3, #12
 800625e:	2b04      	cmp	r3, #4
 8006260:	d00c      	beq.n	800627c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006262:	4b85      	ldr	r3, [pc, #532]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800626a:	2b08      	cmp	r3, #8
 800626c:	d112      	bne.n	8006294 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800626e:	4b82      	ldr	r3, [pc, #520]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006276:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800627a:	d10b      	bne.n	8006294 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800627c:	4b7e      	ldr	r3, [pc, #504]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d05b      	beq.n	8006340 <HAL_RCC_OscConfig+0x108>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d157      	bne.n	8006340 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e242      	b.n	800671a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800629c:	d106      	bne.n	80062ac <HAL_RCC_OscConfig+0x74>
 800629e:	4b76      	ldr	r3, [pc, #472]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a75      	ldr	r2, [pc, #468]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 80062a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a8:	6013      	str	r3, [r2, #0]
 80062aa:	e01d      	b.n	80062e8 <HAL_RCC_OscConfig+0xb0>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062b4:	d10c      	bne.n	80062d0 <HAL_RCC_OscConfig+0x98>
 80062b6:	4b70      	ldr	r3, [pc, #448]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a6f      	ldr	r2, [pc, #444]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 80062bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062c0:	6013      	str	r3, [r2, #0]
 80062c2:	4b6d      	ldr	r3, [pc, #436]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	4a6c      	ldr	r2, [pc, #432]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 80062c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	e00b      	b.n	80062e8 <HAL_RCC_OscConfig+0xb0>
 80062d0:	4b69      	ldr	r3, [pc, #420]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a68      	ldr	r2, [pc, #416]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 80062d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062da:	6013      	str	r3, [r2, #0]
 80062dc:	4b66      	ldr	r3, [pc, #408]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a65      	ldr	r2, [pc, #404]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 80062e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80062e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d013      	beq.n	8006318 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f0:	f7fe fbd8 	bl	8004aa4 <HAL_GetTick>
 80062f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062f6:	e008      	b.n	800630a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062f8:	f7fe fbd4 	bl	8004aa4 <HAL_GetTick>
 80062fc:	4602      	mov	r2, r0
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	2b64      	cmp	r3, #100	; 0x64
 8006304:	d901      	bls.n	800630a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e207      	b.n	800671a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800630a:	4b5b      	ldr	r3, [pc, #364]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006312:	2b00      	cmp	r3, #0
 8006314:	d0f0      	beq.n	80062f8 <HAL_RCC_OscConfig+0xc0>
 8006316:	e014      	b.n	8006342 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006318:	f7fe fbc4 	bl	8004aa4 <HAL_GetTick>
 800631c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800631e:	e008      	b.n	8006332 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006320:	f7fe fbc0 	bl	8004aa4 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b64      	cmp	r3, #100	; 0x64
 800632c:	d901      	bls.n	8006332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e1f3      	b.n	800671a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006332:	4b51      	ldr	r3, [pc, #324]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1f0      	bne.n	8006320 <HAL_RCC_OscConfig+0xe8>
 800633e:	e000      	b.n	8006342 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006340:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f003 0302 	and.w	r3, r3, #2
 800634a:	2b00      	cmp	r3, #0
 800634c:	d063      	beq.n	8006416 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800634e:	4b4a      	ldr	r3, [pc, #296]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f003 030c 	and.w	r3, r3, #12
 8006356:	2b00      	cmp	r3, #0
 8006358:	d00b      	beq.n	8006372 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800635a:	4b47      	ldr	r3, [pc, #284]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006362:	2b08      	cmp	r3, #8
 8006364:	d11c      	bne.n	80063a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006366:	4b44      	ldr	r3, [pc, #272]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d116      	bne.n	80063a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006372:	4b41      	ldr	r3, [pc, #260]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	d005      	beq.n	800638a <HAL_RCC_OscConfig+0x152>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d001      	beq.n	800638a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	e1c7      	b.n	800671a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800638a:	4b3b      	ldr	r3, [pc, #236]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	00db      	lsls	r3, r3, #3
 8006398:	4937      	ldr	r1, [pc, #220]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 800639a:	4313      	orrs	r3, r2
 800639c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800639e:	e03a      	b.n	8006416 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d020      	beq.n	80063ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80063a8:	4b34      	ldr	r3, [pc, #208]	; (800647c <HAL_RCC_OscConfig+0x244>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063ae:	f7fe fb79 	bl	8004aa4 <HAL_GetTick>
 80063b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063b4:	e008      	b.n	80063c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063b6:	f7fe fb75 	bl	8004aa4 <HAL_GetTick>
 80063ba:	4602      	mov	r2, r0
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	1ad3      	subs	r3, r2, r3
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d901      	bls.n	80063c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e1a8      	b.n	800671a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063c8:	4b2b      	ldr	r3, [pc, #172]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0302 	and.w	r3, r3, #2
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0f0      	beq.n	80063b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063d4:	4b28      	ldr	r3, [pc, #160]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	4925      	ldr	r1, [pc, #148]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	600b      	str	r3, [r1, #0]
 80063e8:	e015      	b.n	8006416 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80063ea:	4b24      	ldr	r3, [pc, #144]	; (800647c <HAL_RCC_OscConfig+0x244>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f0:	f7fe fb58 	bl	8004aa4 <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063f8:	f7fe fb54 	bl	8004aa4 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e187      	b.n	800671a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800640a:	4b1b      	ldr	r3, [pc, #108]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1f0      	bne.n	80063f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d036      	beq.n	8006490 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	695b      	ldr	r3, [r3, #20]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d016      	beq.n	8006458 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800642a:	4b15      	ldr	r3, [pc, #84]	; (8006480 <HAL_RCC_OscConfig+0x248>)
 800642c:	2201      	movs	r2, #1
 800642e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006430:	f7fe fb38 	bl	8004aa4 <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006438:	f7fe fb34 	bl	8004aa4 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e167      	b.n	800671a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800644a:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <HAL_RCC_OscConfig+0x240>)
 800644c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d0f0      	beq.n	8006438 <HAL_RCC_OscConfig+0x200>
 8006456:	e01b      	b.n	8006490 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006458:	4b09      	ldr	r3, [pc, #36]	; (8006480 <HAL_RCC_OscConfig+0x248>)
 800645a:	2200      	movs	r2, #0
 800645c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800645e:	f7fe fb21 	bl	8004aa4 <HAL_GetTick>
 8006462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006464:	e00e      	b.n	8006484 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006466:	f7fe fb1d 	bl	8004aa4 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d907      	bls.n	8006484 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e150      	b.n	800671a <HAL_RCC_OscConfig+0x4e2>
 8006478:	40023800 	.word	0x40023800
 800647c:	42470000 	.word	0x42470000
 8006480:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006484:	4b88      	ldr	r3, [pc, #544]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 8006486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006488:	f003 0302 	and.w	r3, r3, #2
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1ea      	bne.n	8006466 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0304 	and.w	r3, r3, #4
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 8097 	beq.w	80065cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800649e:	2300      	movs	r3, #0
 80064a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064a2:	4b81      	ldr	r3, [pc, #516]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d10f      	bne.n	80064ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80064ae:	2300      	movs	r3, #0
 80064b0:	60bb      	str	r3, [r7, #8]
 80064b2:	4b7d      	ldr	r3, [pc, #500]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	4a7c      	ldr	r2, [pc, #496]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 80064b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064bc:	6413      	str	r3, [r2, #64]	; 0x40
 80064be:	4b7a      	ldr	r3, [pc, #488]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 80064c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064c6:	60bb      	str	r3, [r7, #8]
 80064c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064ca:	2301      	movs	r3, #1
 80064cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ce:	4b77      	ldr	r3, [pc, #476]	; (80066ac <HAL_RCC_OscConfig+0x474>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d118      	bne.n	800650c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80064da:	4b74      	ldr	r3, [pc, #464]	; (80066ac <HAL_RCC_OscConfig+0x474>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a73      	ldr	r2, [pc, #460]	; (80066ac <HAL_RCC_OscConfig+0x474>)
 80064e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80064e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80064e6:	f7fe fadd 	bl	8004aa4 <HAL_GetTick>
 80064ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80064ec:	e008      	b.n	8006500 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064ee:	f7fe fad9 	bl	8004aa4 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	2b02      	cmp	r3, #2
 80064fa:	d901      	bls.n	8006500 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e10c      	b.n	800671a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006500:	4b6a      	ldr	r3, [pc, #424]	; (80066ac <HAL_RCC_OscConfig+0x474>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006508:	2b00      	cmp	r3, #0
 800650a:	d0f0      	beq.n	80064ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d106      	bne.n	8006522 <HAL_RCC_OscConfig+0x2ea>
 8006514:	4b64      	ldr	r3, [pc, #400]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 8006516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006518:	4a63      	ldr	r2, [pc, #396]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 800651a:	f043 0301 	orr.w	r3, r3, #1
 800651e:	6713      	str	r3, [r2, #112]	; 0x70
 8006520:	e01c      	b.n	800655c <HAL_RCC_OscConfig+0x324>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2b05      	cmp	r3, #5
 8006528:	d10c      	bne.n	8006544 <HAL_RCC_OscConfig+0x30c>
 800652a:	4b5f      	ldr	r3, [pc, #380]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 800652c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652e:	4a5e      	ldr	r2, [pc, #376]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 8006530:	f043 0304 	orr.w	r3, r3, #4
 8006534:	6713      	str	r3, [r2, #112]	; 0x70
 8006536:	4b5c      	ldr	r3, [pc, #368]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 8006538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800653a:	4a5b      	ldr	r2, [pc, #364]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 800653c:	f043 0301 	orr.w	r3, r3, #1
 8006540:	6713      	str	r3, [r2, #112]	; 0x70
 8006542:	e00b      	b.n	800655c <HAL_RCC_OscConfig+0x324>
 8006544:	4b58      	ldr	r3, [pc, #352]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 8006546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006548:	4a57      	ldr	r2, [pc, #348]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 800654a:	f023 0301 	bic.w	r3, r3, #1
 800654e:	6713      	str	r3, [r2, #112]	; 0x70
 8006550:	4b55      	ldr	r3, [pc, #340]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 8006552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006554:	4a54      	ldr	r2, [pc, #336]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 8006556:	f023 0304 	bic.w	r3, r3, #4
 800655a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d015      	beq.n	8006590 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006564:	f7fe fa9e 	bl	8004aa4 <HAL_GetTick>
 8006568:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800656a:	e00a      	b.n	8006582 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800656c:	f7fe fa9a 	bl	8004aa4 <HAL_GetTick>
 8006570:	4602      	mov	r2, r0
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	1ad3      	subs	r3, r2, r3
 8006576:	f241 3288 	movw	r2, #5000	; 0x1388
 800657a:	4293      	cmp	r3, r2
 800657c:	d901      	bls.n	8006582 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800657e:	2303      	movs	r3, #3
 8006580:	e0cb      	b.n	800671a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006582:	4b49      	ldr	r3, [pc, #292]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 8006584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006586:	f003 0302 	and.w	r3, r3, #2
 800658a:	2b00      	cmp	r3, #0
 800658c:	d0ee      	beq.n	800656c <HAL_RCC_OscConfig+0x334>
 800658e:	e014      	b.n	80065ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006590:	f7fe fa88 	bl	8004aa4 <HAL_GetTick>
 8006594:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006596:	e00a      	b.n	80065ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006598:	f7fe fa84 	bl	8004aa4 <HAL_GetTick>
 800659c:	4602      	mov	r2, r0
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d901      	bls.n	80065ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80065aa:	2303      	movs	r3, #3
 80065ac:	e0b5      	b.n	800671a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80065ae:	4b3e      	ldr	r3, [pc, #248]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 80065b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065b2:	f003 0302 	and.w	r3, r3, #2
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1ee      	bne.n	8006598 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065ba:	7dfb      	ldrb	r3, [r7, #23]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d105      	bne.n	80065cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065c0:	4b39      	ldr	r3, [pc, #228]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	4a38      	ldr	r2, [pc, #224]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 80065c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80065ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	699b      	ldr	r3, [r3, #24]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f000 80a1 	beq.w	8006718 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80065d6:	4b34      	ldr	r3, [pc, #208]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f003 030c 	and.w	r3, r3, #12
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d05c      	beq.n	800669c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	2b02      	cmp	r3, #2
 80065e8:	d141      	bne.n	800666e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065ea:	4b31      	ldr	r3, [pc, #196]	; (80066b0 <HAL_RCC_OscConfig+0x478>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80065f0:	f7fe fa58 	bl	8004aa4 <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065f6:	e008      	b.n	800660a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80065f8:	f7fe fa54 	bl	8004aa4 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d901      	bls.n	800660a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006606:	2303      	movs	r3, #3
 8006608:	e087      	b.n	800671a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800660a:	4b27      	ldr	r3, [pc, #156]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006612:	2b00      	cmp	r3, #0
 8006614:	d1f0      	bne.n	80065f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	69da      	ldr	r2, [r3, #28]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a1b      	ldr	r3, [r3, #32]
 800661e:	431a      	orrs	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006624:	019b      	lsls	r3, r3, #6
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662c:	085b      	lsrs	r3, r3, #1
 800662e:	3b01      	subs	r3, #1
 8006630:	041b      	lsls	r3, r3, #16
 8006632:	431a      	orrs	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	061b      	lsls	r3, r3, #24
 800663a:	491b      	ldr	r1, [pc, #108]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 800663c:	4313      	orrs	r3, r2
 800663e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006640:	4b1b      	ldr	r3, [pc, #108]	; (80066b0 <HAL_RCC_OscConfig+0x478>)
 8006642:	2201      	movs	r2, #1
 8006644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006646:	f7fe fa2d 	bl	8004aa4 <HAL_GetTick>
 800664a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800664c:	e008      	b.n	8006660 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800664e:	f7fe fa29 	bl	8004aa4 <HAL_GetTick>
 8006652:	4602      	mov	r2, r0
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	1ad3      	subs	r3, r2, r3
 8006658:	2b02      	cmp	r3, #2
 800665a:	d901      	bls.n	8006660 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800665c:	2303      	movs	r3, #3
 800665e:	e05c      	b.n	800671a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006660:	4b11      	ldr	r3, [pc, #68]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d0f0      	beq.n	800664e <HAL_RCC_OscConfig+0x416>
 800666c:	e054      	b.n	8006718 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800666e:	4b10      	ldr	r3, [pc, #64]	; (80066b0 <HAL_RCC_OscConfig+0x478>)
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006674:	f7fe fa16 	bl	8004aa4 <HAL_GetTick>
 8006678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800667a:	e008      	b.n	800668e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800667c:	f7fe fa12 	bl	8004aa4 <HAL_GetTick>
 8006680:	4602      	mov	r2, r0
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	2b02      	cmp	r3, #2
 8006688:	d901      	bls.n	800668e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800668a:	2303      	movs	r3, #3
 800668c:	e045      	b.n	800671a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800668e:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <HAL_RCC_OscConfig+0x470>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1f0      	bne.n	800667c <HAL_RCC_OscConfig+0x444>
 800669a:	e03d      	b.n	8006718 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	699b      	ldr	r3, [r3, #24]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d107      	bne.n	80066b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e038      	b.n	800671a <HAL_RCC_OscConfig+0x4e2>
 80066a8:	40023800 	.word	0x40023800
 80066ac:	40007000 	.word	0x40007000
 80066b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80066b4:	4b1b      	ldr	r3, [pc, #108]	; (8006724 <HAL_RCC_OscConfig+0x4ec>)
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d028      	beq.n	8006714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d121      	bne.n	8006714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80066da:	429a      	cmp	r2, r3
 80066dc:	d11a      	bne.n	8006714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066e4:	4013      	ands	r3, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d111      	bne.n	8006714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fa:	085b      	lsrs	r3, r3, #1
 80066fc:	3b01      	subs	r3, #1
 80066fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006700:	429a      	cmp	r2, r3
 8006702:	d107      	bne.n	8006714 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800670e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006710:	429a      	cmp	r2, r3
 8006712:	d001      	beq.n	8006718 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e000      	b.n	800671a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	3718      	adds	r7, #24
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	40023800 	.word	0x40023800

08006728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d101      	bne.n	800673c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e0cc      	b.n	80068d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800673c:	4b68      	ldr	r3, [pc, #416]	; (80068e0 <HAL_RCC_ClockConfig+0x1b8>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	683a      	ldr	r2, [r7, #0]
 8006746:	429a      	cmp	r2, r3
 8006748:	d90c      	bls.n	8006764 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800674a:	4b65      	ldr	r3, [pc, #404]	; (80068e0 <HAL_RCC_ClockConfig+0x1b8>)
 800674c:	683a      	ldr	r2, [r7, #0]
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006752:	4b63      	ldr	r3, [pc, #396]	; (80068e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0307 	and.w	r3, r3, #7
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	429a      	cmp	r2, r3
 800675e:	d001      	beq.n	8006764 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	e0b8      	b.n	80068d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0302 	and.w	r3, r3, #2
 800676c:	2b00      	cmp	r3, #0
 800676e:	d020      	beq.n	80067b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b00      	cmp	r3, #0
 800677a:	d005      	beq.n	8006788 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800677c:	4b59      	ldr	r3, [pc, #356]	; (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	4a58      	ldr	r2, [pc, #352]	; (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006786:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f003 0308 	and.w	r3, r3, #8
 8006790:	2b00      	cmp	r3, #0
 8006792:	d005      	beq.n	80067a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006794:	4b53      	ldr	r3, [pc, #332]	; (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006796:	689b      	ldr	r3, [r3, #8]
 8006798:	4a52      	ldr	r2, [pc, #328]	; (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 800679a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800679e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067a0:	4b50      	ldr	r3, [pc, #320]	; (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	494d      	ldr	r1, [pc, #308]	; (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 80067ae:	4313      	orrs	r3, r2
 80067b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0301 	and.w	r3, r3, #1
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d044      	beq.n	8006848 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d107      	bne.n	80067d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067c6:	4b47      	ldr	r3, [pc, #284]	; (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d119      	bne.n	8006806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e07f      	b.n	80068d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d003      	beq.n	80067e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80067e2:	2b03      	cmp	r3, #3
 80067e4:	d107      	bne.n	80067f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067e6:	4b3f      	ldr	r3, [pc, #252]	; (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d109      	bne.n	8006806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e06f      	b.n	80068d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067f6:	4b3b      	ldr	r3, [pc, #236]	; (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e067      	b.n	80068d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006806:	4b37      	ldr	r3, [pc, #220]	; (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f023 0203 	bic.w	r2, r3, #3
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	4934      	ldr	r1, [pc, #208]	; (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006814:	4313      	orrs	r3, r2
 8006816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006818:	f7fe f944 	bl	8004aa4 <HAL_GetTick>
 800681c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800681e:	e00a      	b.n	8006836 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006820:	f7fe f940 	bl	8004aa4 <HAL_GetTick>
 8006824:	4602      	mov	r2, r0
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	1ad3      	subs	r3, r2, r3
 800682a:	f241 3288 	movw	r2, #5000	; 0x1388
 800682e:	4293      	cmp	r3, r2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e04f      	b.n	80068d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006836:	4b2b      	ldr	r3, [pc, #172]	; (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 020c 	and.w	r2, r3, #12
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	429a      	cmp	r2, r3
 8006846:	d1eb      	bne.n	8006820 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006848:	4b25      	ldr	r3, [pc, #148]	; (80068e0 <HAL_RCC_ClockConfig+0x1b8>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d20c      	bcs.n	8006870 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006856:	4b22      	ldr	r3, [pc, #136]	; (80068e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006858:	683a      	ldr	r2, [r7, #0]
 800685a:	b2d2      	uxtb	r2, r2
 800685c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800685e:	4b20      	ldr	r3, [pc, #128]	; (80068e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0307 	and.w	r3, r3, #7
 8006866:	683a      	ldr	r2, [r7, #0]
 8006868:	429a      	cmp	r2, r3
 800686a:	d001      	beq.n	8006870 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e032      	b.n	80068d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	d008      	beq.n	800688e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800687c:	4b19      	ldr	r3, [pc, #100]	; (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	4916      	ldr	r1, [pc, #88]	; (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 800688a:	4313      	orrs	r3, r2
 800688c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0308 	and.w	r3, r3, #8
 8006896:	2b00      	cmp	r3, #0
 8006898:	d009      	beq.n	80068ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800689a:	4b12      	ldr	r3, [pc, #72]	; (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	691b      	ldr	r3, [r3, #16]
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	490e      	ldr	r1, [pc, #56]	; (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068ae:	f000 f821 	bl	80068f4 <HAL_RCC_GetSysClockFreq>
 80068b2:	4602      	mov	r2, r0
 80068b4:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <HAL_RCC_ClockConfig+0x1bc>)
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	091b      	lsrs	r3, r3, #4
 80068ba:	f003 030f 	and.w	r3, r3, #15
 80068be:	490a      	ldr	r1, [pc, #40]	; (80068e8 <HAL_RCC_ClockConfig+0x1c0>)
 80068c0:	5ccb      	ldrb	r3, [r1, r3]
 80068c2:	fa22 f303 	lsr.w	r3, r2, r3
 80068c6:	4a09      	ldr	r2, [pc, #36]	; (80068ec <HAL_RCC_ClockConfig+0x1c4>)
 80068c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80068ca:	4b09      	ldr	r3, [pc, #36]	; (80068f0 <HAL_RCC_ClockConfig+0x1c8>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4618      	mov	r0, r3
 80068d0:	f7fe f8a4 	bl	8004a1c <HAL_InitTick>

  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	40023c00 	.word	0x40023c00
 80068e4:	40023800 	.word	0x40023800
 80068e8:	08010110 	.word	0x08010110
 80068ec:	20000280 	.word	0x20000280
 80068f0:	20000284 	.word	0x20000284

080068f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068f8:	b090      	sub	sp, #64	; 0x40
 80068fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006900:	2300      	movs	r3, #0
 8006902:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006904:	2300      	movs	r3, #0
 8006906:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800690c:	4b59      	ldr	r3, [pc, #356]	; (8006a74 <HAL_RCC_GetSysClockFreq+0x180>)
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f003 030c 	and.w	r3, r3, #12
 8006914:	2b08      	cmp	r3, #8
 8006916:	d00d      	beq.n	8006934 <HAL_RCC_GetSysClockFreq+0x40>
 8006918:	2b08      	cmp	r3, #8
 800691a:	f200 80a1 	bhi.w	8006a60 <HAL_RCC_GetSysClockFreq+0x16c>
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <HAL_RCC_GetSysClockFreq+0x34>
 8006922:	2b04      	cmp	r3, #4
 8006924:	d003      	beq.n	800692e <HAL_RCC_GetSysClockFreq+0x3a>
 8006926:	e09b      	b.n	8006a60 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006928:	4b53      	ldr	r3, [pc, #332]	; (8006a78 <HAL_RCC_GetSysClockFreq+0x184>)
 800692a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800692c:	e09b      	b.n	8006a66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800692e:	4b53      	ldr	r3, [pc, #332]	; (8006a7c <HAL_RCC_GetSysClockFreq+0x188>)
 8006930:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006932:	e098      	b.n	8006a66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006934:	4b4f      	ldr	r3, [pc, #316]	; (8006a74 <HAL_RCC_GetSysClockFreq+0x180>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800693c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800693e:	4b4d      	ldr	r3, [pc, #308]	; (8006a74 <HAL_RCC_GetSysClockFreq+0x180>)
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d028      	beq.n	800699c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800694a:	4b4a      	ldr	r3, [pc, #296]	; (8006a74 <HAL_RCC_GetSysClockFreq+0x180>)
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	099b      	lsrs	r3, r3, #6
 8006950:	2200      	movs	r2, #0
 8006952:	623b      	str	r3, [r7, #32]
 8006954:	627a      	str	r2, [r7, #36]	; 0x24
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800695c:	2100      	movs	r1, #0
 800695e:	4b47      	ldr	r3, [pc, #284]	; (8006a7c <HAL_RCC_GetSysClockFreq+0x188>)
 8006960:	fb03 f201 	mul.w	r2, r3, r1
 8006964:	2300      	movs	r3, #0
 8006966:	fb00 f303 	mul.w	r3, r0, r3
 800696a:	4413      	add	r3, r2
 800696c:	4a43      	ldr	r2, [pc, #268]	; (8006a7c <HAL_RCC_GetSysClockFreq+0x188>)
 800696e:	fba0 1202 	umull	r1, r2, r0, r2
 8006972:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006974:	460a      	mov	r2, r1
 8006976:	62ba      	str	r2, [r7, #40]	; 0x28
 8006978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800697a:	4413      	add	r3, r2
 800697c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800697e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006980:	2200      	movs	r2, #0
 8006982:	61bb      	str	r3, [r7, #24]
 8006984:	61fa      	str	r2, [r7, #28]
 8006986:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800698a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800698e:	f7fa f963 	bl	8000c58 <__aeabi_uldivmod>
 8006992:	4602      	mov	r2, r0
 8006994:	460b      	mov	r3, r1
 8006996:	4613      	mov	r3, r2
 8006998:	63fb      	str	r3, [r7, #60]	; 0x3c
 800699a:	e053      	b.n	8006a44 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800699c:	4b35      	ldr	r3, [pc, #212]	; (8006a74 <HAL_RCC_GetSysClockFreq+0x180>)
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	099b      	lsrs	r3, r3, #6
 80069a2:	2200      	movs	r2, #0
 80069a4:	613b      	str	r3, [r7, #16]
 80069a6:	617a      	str	r2, [r7, #20]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80069ae:	f04f 0b00 	mov.w	fp, #0
 80069b2:	4652      	mov	r2, sl
 80069b4:	465b      	mov	r3, fp
 80069b6:	f04f 0000 	mov.w	r0, #0
 80069ba:	f04f 0100 	mov.w	r1, #0
 80069be:	0159      	lsls	r1, r3, #5
 80069c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80069c4:	0150      	lsls	r0, r2, #5
 80069c6:	4602      	mov	r2, r0
 80069c8:	460b      	mov	r3, r1
 80069ca:	ebb2 080a 	subs.w	r8, r2, sl
 80069ce:	eb63 090b 	sbc.w	r9, r3, fp
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	f04f 0300 	mov.w	r3, #0
 80069da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80069de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80069e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80069e6:	ebb2 0408 	subs.w	r4, r2, r8
 80069ea:	eb63 0509 	sbc.w	r5, r3, r9
 80069ee:	f04f 0200 	mov.w	r2, #0
 80069f2:	f04f 0300 	mov.w	r3, #0
 80069f6:	00eb      	lsls	r3, r5, #3
 80069f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80069fc:	00e2      	lsls	r2, r4, #3
 80069fe:	4614      	mov	r4, r2
 8006a00:	461d      	mov	r5, r3
 8006a02:	eb14 030a 	adds.w	r3, r4, sl
 8006a06:	603b      	str	r3, [r7, #0]
 8006a08:	eb45 030b 	adc.w	r3, r5, fp
 8006a0c:	607b      	str	r3, [r7, #4]
 8006a0e:	f04f 0200 	mov.w	r2, #0
 8006a12:	f04f 0300 	mov.w	r3, #0
 8006a16:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a1a:	4629      	mov	r1, r5
 8006a1c:	028b      	lsls	r3, r1, #10
 8006a1e:	4621      	mov	r1, r4
 8006a20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a24:	4621      	mov	r1, r4
 8006a26:	028a      	lsls	r2, r1, #10
 8006a28:	4610      	mov	r0, r2
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2e:	2200      	movs	r2, #0
 8006a30:	60bb      	str	r3, [r7, #8]
 8006a32:	60fa      	str	r2, [r7, #12]
 8006a34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a38:	f7fa f90e 	bl	8000c58 <__aeabi_uldivmod>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	4613      	mov	r3, r2
 8006a42:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006a44:	4b0b      	ldr	r3, [pc, #44]	; (8006a74 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	0c1b      	lsrs	r3, r3, #16
 8006a4a:	f003 0303 	and.w	r3, r3, #3
 8006a4e:	3301      	adds	r3, #1
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006a54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a5c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a5e:	e002      	b.n	8006a66 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006a60:	4b05      	ldr	r3, [pc, #20]	; (8006a78 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a62:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006a64:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3740      	adds	r7, #64	; 0x40
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a72:	bf00      	nop
 8006a74:	40023800 	.word	0x40023800
 8006a78:	00f42400 	.word	0x00f42400
 8006a7c:	017d7840 	.word	0x017d7840

08006a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006a80:	b480      	push	{r7}
 8006a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006a84:	4b03      	ldr	r3, [pc, #12]	; (8006a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8006a86:	681b      	ldr	r3, [r3, #0]
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	20000280 	.word	0x20000280

08006a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006a9c:	f7ff fff0 	bl	8006a80 <HAL_RCC_GetHCLKFreq>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	4b05      	ldr	r3, [pc, #20]	; (8006ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	0a9b      	lsrs	r3, r3, #10
 8006aa8:	f003 0307 	and.w	r3, r3, #7
 8006aac:	4903      	ldr	r1, [pc, #12]	; (8006abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006aae:	5ccb      	ldrb	r3, [r1, r3]
 8006ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	40023800 	.word	0x40023800
 8006abc:	08010120 	.word	0x08010120

08006ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ac4:	f7ff ffdc 	bl	8006a80 <HAL_RCC_GetHCLKFreq>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	0b5b      	lsrs	r3, r3, #13
 8006ad0:	f003 0307 	and.w	r3, r3, #7
 8006ad4:	4903      	ldr	r1, [pc, #12]	; (8006ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ad6:	5ccb      	ldrb	r3, [r1, r3]
 8006ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	bd80      	pop	{r7, pc}
 8006ae0:	40023800 	.word	0x40023800
 8006ae4:	08010120 	.word	0x08010120

08006ae8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e07b      	b.n	8006bf2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d108      	bne.n	8006b14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b0a:	d009      	beq.n	8006b20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	61da      	str	r2, [r3, #28]
 8006b12:	e005      	b.n	8006b20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2200      	movs	r2, #0
 8006b18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2200      	movs	r2, #0
 8006b24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d106      	bne.n	8006b40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7fd fbec 	bl	8004318 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2202      	movs	r2, #2
 8006b44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006b68:	431a      	orrs	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b72:	431a      	orrs	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	691b      	ldr	r3, [r3, #16]
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	431a      	orrs	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	431a      	orrs	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	699b      	ldr	r3, [r3, #24]
 8006b8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b90:	431a      	orrs	r2, r3
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	69db      	ldr	r3, [r3, #28]
 8006b96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006b9a:	431a      	orrs	r2, r3
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba4:	ea42 0103 	orr.w	r1, r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	430a      	orrs	r2, r1
 8006bb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	0c1b      	lsrs	r3, r3, #16
 8006bbe:	f003 0104 	and.w	r1, r3, #4
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc6:	f003 0210 	and.w	r2, r3, #16
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	430a      	orrs	r2, r1
 8006bd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	69da      	ldr	r2, [r3, #28]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006be0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b088      	sub	sp, #32
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	60f8      	str	r0, [r7, #12]
 8006c02:	60b9      	str	r1, [r7, #8]
 8006c04:	603b      	str	r3, [r7, #0]
 8006c06:	4613      	mov	r3, r2
 8006c08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d101      	bne.n	8006c1c <HAL_SPI_Transmit+0x22>
 8006c18:	2302      	movs	r3, #2
 8006c1a:	e126      	b.n	8006e6a <HAL_SPI_Transmit+0x270>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c24:	f7fd ff3e 	bl	8004aa4 <HAL_GetTick>
 8006c28:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006c2a:	88fb      	ldrh	r3, [r7, #6]
 8006c2c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c34:	b2db      	uxtb	r3, r3
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d002      	beq.n	8006c40 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c3e:	e10b      	b.n	8006e58 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <HAL_SPI_Transmit+0x52>
 8006c46:	88fb      	ldrh	r3, [r7, #6]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d102      	bne.n	8006c52 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c50:	e102      	b.n	8006e58 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2203      	movs	r2, #3
 8006c56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	88fa      	ldrh	r2, [r7, #6]
 8006c6a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	88fa      	ldrh	r2, [r7, #6]
 8006c70:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2200      	movs	r2, #0
 8006c76:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c98:	d10f      	bne.n	8006cba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ca8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cb8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc4:	2b40      	cmp	r3, #64	; 0x40
 8006cc6:	d007      	beq.n	8006cd8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ce0:	d14b      	bne.n	8006d7a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d002      	beq.n	8006cf0 <HAL_SPI_Transmit+0xf6>
 8006cea:	8afb      	ldrh	r3, [r7, #22]
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d13e      	bne.n	8006d6e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf4:	881a      	ldrh	r2, [r3, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d00:	1c9a      	adds	r2, r3, #2
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	3b01      	subs	r3, #1
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006d14:	e02b      	b.n	8006d6e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d112      	bne.n	8006d4a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d28:	881a      	ldrh	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	1c9a      	adds	r2, r3, #2
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	3b01      	subs	r3, #1
 8006d42:	b29a      	uxth	r2, r3
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d48:	e011      	b.n	8006d6e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d4a:	f7fd feab 	bl	8004aa4 <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	683a      	ldr	r2, [r7, #0]
 8006d56:	429a      	cmp	r2, r3
 8006d58:	d803      	bhi.n	8006d62 <HAL_SPI_Transmit+0x168>
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d102      	bne.n	8006d68 <HAL_SPI_Transmit+0x16e>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d102      	bne.n	8006d6e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006d68:	2303      	movs	r3, #3
 8006d6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d6c:	e074      	b.n	8006e58 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1ce      	bne.n	8006d16 <HAL_SPI_Transmit+0x11c>
 8006d78:	e04c      	b.n	8006e14 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d002      	beq.n	8006d88 <HAL_SPI_Transmit+0x18e>
 8006d82:	8afb      	ldrh	r3, [r7, #22]
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d140      	bne.n	8006e0a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	330c      	adds	r3, #12
 8006d92:	7812      	ldrb	r2, [r2, #0]
 8006d94:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d9a:	1c5a      	adds	r2, r3, #1
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	3b01      	subs	r3, #1
 8006da8:	b29a      	uxth	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006dae:	e02c      	b.n	8006e0a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d113      	bne.n	8006de6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	330c      	adds	r3, #12
 8006dc8:	7812      	ldrb	r2, [r2, #0]
 8006dca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd0:	1c5a      	adds	r2, r3, #1
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	86da      	strh	r2, [r3, #54]	; 0x36
 8006de4:	e011      	b.n	8006e0a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006de6:	f7fd fe5d 	bl	8004aa4 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d803      	bhi.n	8006dfe <HAL_SPI_Transmit+0x204>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dfc:	d102      	bne.n	8006e04 <HAL_SPI_Transmit+0x20a>
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d102      	bne.n	8006e0a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006e04:	2303      	movs	r3, #3
 8006e06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e08:	e026      	b.n	8006e58 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e0e:	b29b      	uxth	r3, r3
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1cd      	bne.n	8006db0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006e14:	69ba      	ldr	r2, [r7, #24]
 8006e16:	6839      	ldr	r1, [r7, #0]
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f000 fb73 	bl	8007504 <SPI_EndRxTxTransaction>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d002      	beq.n	8006e2a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	2220      	movs	r2, #32
 8006e28:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	689b      	ldr	r3, [r3, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10a      	bne.n	8006e48 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006e32:	2300      	movs	r3, #0
 8006e34:	613b      	str	r3, [r7, #16]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	613b      	str	r3, [r7, #16]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	613b      	str	r3, [r7, #16]
 8006e46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	77fb      	strb	r3, [r7, #31]
 8006e54:	e000      	b.n	8006e58 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006e56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e68:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3720      	adds	r7, #32
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}

08006e72 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b08c      	sub	sp, #48	; 0x30
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	60f8      	str	r0, [r7, #12]
 8006e7a:	60b9      	str	r1, [r7, #8]
 8006e7c:	607a      	str	r2, [r7, #4]
 8006e7e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006e80:	2301      	movs	r3, #1
 8006e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d101      	bne.n	8006e98 <HAL_SPI_TransmitReceive+0x26>
 8006e94:	2302      	movs	r3, #2
 8006e96:	e18a      	b.n	80071ae <HAL_SPI_TransmitReceive+0x33c>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006ea0:	f7fd fe00 	bl	8004aa4 <HAL_GetTick>
 8006ea4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006eac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006eb6:	887b      	ldrh	r3, [r7, #2]
 8006eb8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006eba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d00f      	beq.n	8006ee2 <HAL_SPI_TransmitReceive+0x70>
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ec8:	d107      	bne.n	8006eda <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d103      	bne.n	8006eda <HAL_SPI_TransmitReceive+0x68>
 8006ed2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006ed6:	2b04      	cmp	r3, #4
 8006ed8:	d003      	beq.n	8006ee2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006eda:	2302      	movs	r3, #2
 8006edc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006ee0:	e15b      	b.n	800719a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <HAL_SPI_TransmitReceive+0x82>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d002      	beq.n	8006ef4 <HAL_SPI_TransmitReceive+0x82>
 8006eee:	887b      	ldrh	r3, [r7, #2]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d103      	bne.n	8006efc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006efa:	e14e      	b.n	800719a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	d003      	beq.n	8006f10 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	2205      	movs	r2, #5
 8006f0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2200      	movs	r2, #0
 8006f14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	887a      	ldrh	r2, [r7, #2]
 8006f20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	887a      	ldrh	r2, [r7, #2]
 8006f26:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	887a      	ldrh	r2, [r7, #2]
 8006f32:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	887a      	ldrh	r2, [r7, #2]
 8006f38:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2200      	movs	r2, #0
 8006f44:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f50:	2b40      	cmp	r3, #64	; 0x40
 8006f52:	d007      	beq.n	8006f64 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f6c:	d178      	bne.n	8007060 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d002      	beq.n	8006f7c <HAL_SPI_TransmitReceive+0x10a>
 8006f76:	8b7b      	ldrh	r3, [r7, #26]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d166      	bne.n	800704a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f80:	881a      	ldrh	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f8c:	1c9a      	adds	r2, r3, #2
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f96:	b29b      	uxth	r3, r3
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006fa0:	e053      	b.n	800704a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f003 0302 	and.w	r3, r3, #2
 8006fac:	2b02      	cmp	r3, #2
 8006fae:	d11b      	bne.n	8006fe8 <HAL_SPI_TransmitReceive+0x176>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d016      	beq.n	8006fe8 <HAL_SPI_TransmitReceive+0x176>
 8006fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbc:	2b01      	cmp	r3, #1
 8006fbe:	d113      	bne.n	8006fe8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc4:	881a      	ldrh	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fd0:	1c9a      	adds	r2, r3, #2
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006fda:	b29b      	uxth	r3, r3
 8006fdc:	3b01      	subs	r3, #1
 8006fde:	b29a      	uxth	r2, r3
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d119      	bne.n	800702a <HAL_SPI_TransmitReceive+0x1b8>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d014      	beq.n	800702a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800700a:	b292      	uxth	r2, r2
 800700c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007012:	1c9a      	adds	r2, r3, #2
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800701c:	b29b      	uxth	r3, r3
 800701e:	3b01      	subs	r3, #1
 8007020:	b29a      	uxth	r2, r3
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007026:	2301      	movs	r3, #1
 8007028:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800702a:	f7fd fd3b 	bl	8004aa4 <HAL_GetTick>
 800702e:	4602      	mov	r2, r0
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007036:	429a      	cmp	r2, r3
 8007038:	d807      	bhi.n	800704a <HAL_SPI_TransmitReceive+0x1d8>
 800703a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800703c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007040:	d003      	beq.n	800704a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007042:	2303      	movs	r3, #3
 8007044:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007048:	e0a7      	b.n	800719a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800704e:	b29b      	uxth	r3, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1a6      	bne.n	8006fa2 <HAL_SPI_TransmitReceive+0x130>
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007058:	b29b      	uxth	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1a1      	bne.n	8006fa2 <HAL_SPI_TransmitReceive+0x130>
 800705e:	e07c      	b.n	800715a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <HAL_SPI_TransmitReceive+0x1fc>
 8007068:	8b7b      	ldrh	r3, [r7, #26]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d16b      	bne.n	8007146 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	330c      	adds	r3, #12
 8007078:	7812      	ldrb	r2, [r2, #0]
 800707a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800708a:	b29b      	uxth	r3, r3
 800708c:	3b01      	subs	r3, #1
 800708e:	b29a      	uxth	r2, r3
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007094:	e057      	b.n	8007146 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d11c      	bne.n	80070de <HAL_SPI_TransmitReceive+0x26c>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d017      	beq.n	80070de <HAL_SPI_TransmitReceive+0x26c>
 80070ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d114      	bne.n	80070de <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	330c      	adds	r3, #12
 80070be:	7812      	ldrb	r2, [r2, #0]
 80070c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c6:	1c5a      	adds	r2, r3, #1
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3b01      	subs	r3, #1
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070da:	2300      	movs	r3, #0
 80070dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f003 0301 	and.w	r3, r3, #1
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d119      	bne.n	8007120 <HAL_SPI_TransmitReceive+0x2ae>
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f0:	b29b      	uxth	r3, r3
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d014      	beq.n	8007120 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68da      	ldr	r2, [r3, #12]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007100:	b2d2      	uxtb	r2, r2
 8007102:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007108:	1c5a      	adds	r2, r3, #1
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007112:	b29b      	uxth	r3, r3
 8007114:	3b01      	subs	r3, #1
 8007116:	b29a      	uxth	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800711c:	2301      	movs	r3, #1
 800711e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007120:	f7fd fcc0 	bl	8004aa4 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800712c:	429a      	cmp	r2, r3
 800712e:	d803      	bhi.n	8007138 <HAL_SPI_TransmitReceive+0x2c6>
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007136:	d102      	bne.n	800713e <HAL_SPI_TransmitReceive+0x2cc>
 8007138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800713a:	2b00      	cmp	r3, #0
 800713c:	d103      	bne.n	8007146 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007144:	e029      	b.n	800719a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800714a:	b29b      	uxth	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1a2      	bne.n	8007096 <HAL_SPI_TransmitReceive+0x224>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007154:	b29b      	uxth	r3, r3
 8007156:	2b00      	cmp	r3, #0
 8007158:	d19d      	bne.n	8007096 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800715a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800715c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f000 f9d0 	bl	8007504 <SPI_EndRxTxTransaction>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d006      	beq.n	8007178 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007176:	e010      	b.n	800719a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d10b      	bne.n	8007198 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007180:	2300      	movs	r3, #0
 8007182:	617b      	str	r3, [r7, #20]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	617b      	str	r3, [r7, #20]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	617b      	str	r3, [r7, #20]
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	e000      	b.n	800719a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007198:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3730      	adds	r7, #48	; 0x30
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
	...

080071b8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	099b      	lsrs	r3, r3, #6
 80071d4:	f003 0301 	and.w	r3, r3, #1
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10f      	bne.n	80071fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00a      	beq.n	80071fc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	099b      	lsrs	r3, r3, #6
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d004      	beq.n	80071fc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	4798      	blx	r3
    return;
 80071fa:	e0d7      	b.n	80073ac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80071fc:	69bb      	ldr	r3, [r7, #24]
 80071fe:	085b      	lsrs	r3, r3, #1
 8007200:	f003 0301 	and.w	r3, r3, #1
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00a      	beq.n	800721e <HAL_SPI_IRQHandler+0x66>
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	09db      	lsrs	r3, r3, #7
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d004      	beq.n	800721e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	4798      	blx	r3
    return;
 800721c:	e0c6      	b.n	80073ac <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	095b      	lsrs	r3, r3, #5
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10c      	bne.n	8007244 <HAL_SPI_IRQHandler+0x8c>
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	099b      	lsrs	r3, r3, #6
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d106      	bne.n	8007244 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	0a1b      	lsrs	r3, r3, #8
 800723a:	f003 0301 	and.w	r3, r3, #1
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 80b4 	beq.w	80073ac <HAL_SPI_IRQHandler+0x1f4>
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	095b      	lsrs	r3, r3, #5
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 80ad 	beq.w	80073ac <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	099b      	lsrs	r3, r3, #6
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d023      	beq.n	80072a6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007264:	b2db      	uxtb	r3, r3
 8007266:	2b03      	cmp	r3, #3
 8007268:	d011      	beq.n	800728e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726e:	f043 0204 	orr.w	r2, r3, #4
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007276:	2300      	movs	r3, #0
 8007278:	617b      	str	r3, [r7, #20]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	617b      	str	r3, [r7, #20]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	617b      	str	r3, [r7, #20]
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	e00b      	b.n	80072a6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800728e:	2300      	movs	r3, #0
 8007290:	613b      	str	r3, [r7, #16]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	613b      	str	r3, [r7, #16]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	613b      	str	r3, [r7, #16]
 80072a2:	693b      	ldr	r3, [r7, #16]
        return;
 80072a4:	e082      	b.n	80073ac <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	095b      	lsrs	r3, r3, #5
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d014      	beq.n	80072dc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b6:	f043 0201 	orr.w	r2, r3, #1
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80072be:	2300      	movs	r3, #0
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	60fb      	str	r3, [r7, #12]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	681a      	ldr	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072d8:	601a      	str	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	0a1b      	lsrs	r3, r3, #8
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00c      	beq.n	8007302 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ec:	f043 0208 	orr.w	r2, r3, #8
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80072f4:	2300      	movs	r3, #0
 80072f6:	60bb      	str	r3, [r7, #8]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	60bb      	str	r3, [r7, #8]
 8007300:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007306:	2b00      	cmp	r3, #0
 8007308:	d04f      	beq.n	80073aa <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007318:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	f003 0302 	and.w	r3, r3, #2
 8007328:	2b00      	cmp	r3, #0
 800732a:	d104      	bne.n	8007336 <HAL_SPI_IRQHandler+0x17e>
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	2b00      	cmp	r3, #0
 8007334:	d034      	beq.n	80073a0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	685a      	ldr	r2, [r3, #4]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f022 0203 	bic.w	r2, r2, #3
 8007344:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800734a:	2b00      	cmp	r3, #0
 800734c:	d011      	beq.n	8007372 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007352:	4a18      	ldr	r2, [pc, #96]	; (80073b4 <HAL_SPI_IRQHandler+0x1fc>)
 8007354:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800735a:	4618      	mov	r0, r3
 800735c:	f7fe fb10 	bl	8005980 <HAL_DMA_Abort_IT>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d005      	beq.n	8007372 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800736a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007376:	2b00      	cmp	r3, #0
 8007378:	d016      	beq.n	80073a8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800737e:	4a0d      	ldr	r2, [pc, #52]	; (80073b4 <HAL_SPI_IRQHandler+0x1fc>)
 8007380:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007386:	4618      	mov	r0, r3
 8007388:	f7fe fafa 	bl	8005980 <HAL_DMA_Abort_IT>
 800738c:	4603      	mov	r3, r0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00a      	beq.n	80073a8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007396:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800739e:	e003      	b.n	80073a8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	f000 f809 	bl	80073b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80073a6:	e000      	b.n	80073aa <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80073a8:	bf00      	nop
    return;
 80073aa:	bf00      	nop
  }
}
 80073ac:	3720      	adds	r7, #32
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	080073cd 	.word	0x080073cd

080073b8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80073e6:	68f8      	ldr	r0, [r7, #12]
 80073e8:	f7ff ffe6 	bl	80073b8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80073ec:	bf00      	nop
 80073ee:	3710      	adds	r7, #16
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b088      	sub	sp, #32
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	603b      	str	r3, [r7, #0]
 8007400:	4613      	mov	r3, r2
 8007402:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007404:	f7fd fb4e 	bl	8004aa4 <HAL_GetTick>
 8007408:	4602      	mov	r2, r0
 800740a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800740c:	1a9b      	subs	r3, r3, r2
 800740e:	683a      	ldr	r2, [r7, #0]
 8007410:	4413      	add	r3, r2
 8007412:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007414:	f7fd fb46 	bl	8004aa4 <HAL_GetTick>
 8007418:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800741a:	4b39      	ldr	r3, [pc, #228]	; (8007500 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	015b      	lsls	r3, r3, #5
 8007420:	0d1b      	lsrs	r3, r3, #20
 8007422:	69fa      	ldr	r2, [r7, #28]
 8007424:	fb02 f303 	mul.w	r3, r2, r3
 8007428:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800742a:	e054      	b.n	80074d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007432:	d050      	beq.n	80074d6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007434:	f7fd fb36 	bl	8004aa4 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	69fa      	ldr	r2, [r7, #28]
 8007440:	429a      	cmp	r2, r3
 8007442:	d902      	bls.n	800744a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d13d      	bne.n	80074c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007458:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	685b      	ldr	r3, [r3, #4]
 800745e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007462:	d111      	bne.n	8007488 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800746c:	d004      	beq.n	8007478 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007476:	d107      	bne.n	8007488 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007486:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800748c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007490:	d10f      	bne.n	80074b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80074c2:	2303      	movs	r3, #3
 80074c4:	e017      	b.n	80074f6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80074cc:	2300      	movs	r3, #0
 80074ce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	3b01      	subs	r3, #1
 80074d4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	4013      	ands	r3, r2
 80074e0:	68ba      	ldr	r2, [r7, #8]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	bf0c      	ite	eq
 80074e6:	2301      	moveq	r3, #1
 80074e8:	2300      	movne	r3, #0
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	461a      	mov	r2, r3
 80074ee:	79fb      	ldrb	r3, [r7, #7]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d19b      	bne.n	800742c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3720      	adds	r7, #32
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20000280 	.word	0x20000280

08007504 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af02      	add	r7, sp, #8
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007510:	4b1b      	ldr	r3, [pc, #108]	; (8007580 <SPI_EndRxTxTransaction+0x7c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	4a1b      	ldr	r2, [pc, #108]	; (8007584 <SPI_EndRxTxTransaction+0x80>)
 8007516:	fba2 2303 	umull	r2, r3, r2, r3
 800751a:	0d5b      	lsrs	r3, r3, #21
 800751c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007520:	fb02 f303 	mul.w	r3, r2, r3
 8007524:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800752e:	d112      	bne.n	8007556 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	9300      	str	r3, [sp, #0]
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	2200      	movs	r2, #0
 8007538:	2180      	movs	r1, #128	; 0x80
 800753a:	68f8      	ldr	r0, [r7, #12]
 800753c:	f7ff ff5a 	bl	80073f4 <SPI_WaitFlagStateUntilTimeout>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d016      	beq.n	8007574 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754a:	f043 0220 	orr.w	r2, r3, #32
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e00f      	b.n	8007576 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00a      	beq.n	8007572 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	3b01      	subs	r3, #1
 8007560:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800756c:	2b80      	cmp	r3, #128	; 0x80
 800756e:	d0f2      	beq.n	8007556 <SPI_EndRxTxTransaction+0x52>
 8007570:	e000      	b.n	8007574 <SPI_EndRxTxTransaction+0x70>
        break;
 8007572:	bf00      	nop
  }

  return HAL_OK;
 8007574:	2300      	movs	r3, #0
}
 8007576:	4618      	mov	r0, r3
 8007578:	3718      	adds	r7, #24
 800757a:	46bd      	mov	sp, r7
 800757c:	bd80      	pop	{r7, pc}
 800757e:	bf00      	nop
 8007580:	20000280 	.word	0x20000280
 8007584:	165e9f81 	.word	0x165e9f81

08007588 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b082      	sub	sp, #8
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d101      	bne.n	800759a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e041      	b.n	800761e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d106      	bne.n	80075b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2200      	movs	r2, #0
 80075aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7fc ff50 	bl	8004454 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2202      	movs	r2, #2
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	3304      	adds	r3, #4
 80075c4:	4619      	mov	r1, r3
 80075c6:	4610      	mov	r0, r2
 80075c8:	f000 fc98 	bl	8007efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2201      	movs	r2, #1
 80075d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2201      	movs	r2, #1
 80075e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2201      	movs	r2, #1
 80075f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2201      	movs	r2, #1
 8007600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2201      	movs	r2, #1
 8007618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
	...

08007628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007628:	b480      	push	{r7}
 800762a:	b085      	sub	sp, #20
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b01      	cmp	r3, #1
 800763a:	d001      	beq.n	8007640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e044      	b.n	80076ca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	68da      	ldr	r2, [r3, #12]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0201 	orr.w	r2, r2, #1
 8007656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a1e      	ldr	r2, [pc, #120]	; (80076d8 <HAL_TIM_Base_Start_IT+0xb0>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d018      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x6c>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800766a:	d013      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x6c>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a1a      	ldr	r2, [pc, #104]	; (80076dc <HAL_TIM_Base_Start_IT+0xb4>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d00e      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x6c>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a19      	ldr	r2, [pc, #100]	; (80076e0 <HAL_TIM_Base_Start_IT+0xb8>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d009      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x6c>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a17      	ldr	r2, [pc, #92]	; (80076e4 <HAL_TIM_Base_Start_IT+0xbc>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d004      	beq.n	8007694 <HAL_TIM_Base_Start_IT+0x6c>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a16      	ldr	r2, [pc, #88]	; (80076e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d111      	bne.n	80076b8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f003 0307 	and.w	r3, r3, #7
 800769e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2b06      	cmp	r3, #6
 80076a4:	d010      	beq.n	80076c8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f042 0201 	orr.w	r2, r2, #1
 80076b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b6:	e007      	b.n	80076c8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0201 	orr.w	r2, r2, #1
 80076c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80076c8:	2300      	movs	r3, #0
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3714      	adds	r7, #20
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
 80076d6:	bf00      	nop
 80076d8:	40010000 	.word	0x40010000
 80076dc:	40000400 	.word	0x40000400
 80076e0:	40000800 	.word	0x40000800
 80076e4:	40000c00 	.word	0x40000c00
 80076e8:	40014000 	.word	0x40014000

080076ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e041      	b.n	8007782 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007704:	b2db      	uxtb	r3, r3
 8007706:	2b00      	cmp	r3, #0
 8007708:	d106      	bne.n	8007718 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2200      	movs	r2, #0
 800770e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7fc ff02 	bl	800451c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	3304      	adds	r3, #4
 8007728:	4619      	mov	r1, r3
 800772a:	4610      	mov	r0, r2
 800772c:	f000 fbe6 	bl	8007efc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3708      	adds	r7, #8
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
	...

0800778c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007796:	2300      	movs	r3, #0
 8007798:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d109      	bne.n	80077b4 <HAL_TIM_PWM_Start_IT+0x28>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	bf14      	ite	ne
 80077ac:	2301      	movne	r3, #1
 80077ae:	2300      	moveq	r3, #0
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	e022      	b.n	80077fa <HAL_TIM_PWM_Start_IT+0x6e>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2b04      	cmp	r3, #4
 80077b8:	d109      	bne.n	80077ce <HAL_TIM_PWM_Start_IT+0x42>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	bf14      	ite	ne
 80077c6:	2301      	movne	r3, #1
 80077c8:	2300      	moveq	r3, #0
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	e015      	b.n	80077fa <HAL_TIM_PWM_Start_IT+0x6e>
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	d109      	bne.n	80077e8 <HAL_TIM_PWM_Start_IT+0x5c>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077da:	b2db      	uxtb	r3, r3
 80077dc:	2b01      	cmp	r3, #1
 80077de:	bf14      	ite	ne
 80077e0:	2301      	movne	r3, #1
 80077e2:	2300      	moveq	r3, #0
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	e008      	b.n	80077fa <HAL_TIM_PWM_Start_IT+0x6e>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	bf14      	ite	ne
 80077f4:	2301      	movne	r3, #1
 80077f6:	2300      	moveq	r3, #0
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e0b3      	b.n	800796a <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d104      	bne.n	8007812 <HAL_TIM_PWM_Start_IT+0x86>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007810:	e013      	b.n	800783a <HAL_TIM_PWM_Start_IT+0xae>
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2b04      	cmp	r3, #4
 8007816:	d104      	bne.n	8007822 <HAL_TIM_PWM_Start_IT+0x96>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007820:	e00b      	b.n	800783a <HAL_TIM_PWM_Start_IT+0xae>
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	2b08      	cmp	r3, #8
 8007826:	d104      	bne.n	8007832 <HAL_TIM_PWM_Start_IT+0xa6>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007830:	e003      	b.n	800783a <HAL_TIM_PWM_Start_IT+0xae>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2202      	movs	r2, #2
 8007836:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b0c      	cmp	r3, #12
 800783e:	d841      	bhi.n	80078c4 <HAL_TIM_PWM_Start_IT+0x138>
 8007840:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <HAL_TIM_PWM_Start_IT+0xbc>)
 8007842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007846:	bf00      	nop
 8007848:	0800787d 	.word	0x0800787d
 800784c:	080078c5 	.word	0x080078c5
 8007850:	080078c5 	.word	0x080078c5
 8007854:	080078c5 	.word	0x080078c5
 8007858:	0800788f 	.word	0x0800788f
 800785c:	080078c5 	.word	0x080078c5
 8007860:	080078c5 	.word	0x080078c5
 8007864:	080078c5 	.word	0x080078c5
 8007868:	080078a1 	.word	0x080078a1
 800786c:	080078c5 	.word	0x080078c5
 8007870:	080078c5 	.word	0x080078c5
 8007874:	080078c5 	.word	0x080078c5
 8007878:	080078b3 	.word	0x080078b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68da      	ldr	r2, [r3, #12]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f042 0202 	orr.w	r2, r2, #2
 800788a:	60da      	str	r2, [r3, #12]
      break;
 800788c:	e01d      	b.n	80078ca <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68da      	ldr	r2, [r3, #12]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f042 0204 	orr.w	r2, r2, #4
 800789c:	60da      	str	r2, [r3, #12]
      break;
 800789e:	e014      	b.n	80078ca <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	68da      	ldr	r2, [r3, #12]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f042 0208 	orr.w	r2, r2, #8
 80078ae:	60da      	str	r2, [r3, #12]
      break;
 80078b0:	e00b      	b.n	80078ca <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68da      	ldr	r2, [r3, #12]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f042 0210 	orr.w	r2, r2, #16
 80078c0:	60da      	str	r2, [r3, #12]
      break;
 80078c2:	e002      	b.n	80078ca <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	73fb      	strb	r3, [r7, #15]
      break;
 80078c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80078ca:	7bfb      	ldrb	r3, [r7, #15]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d14b      	bne.n	8007968 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2201      	movs	r2, #1
 80078d6:	6839      	ldr	r1, [r7, #0]
 80078d8:	4618      	mov	r0, r3
 80078da:	f000 fdb5 	bl	8008448 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a24      	ldr	r2, [pc, #144]	; (8007974 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d107      	bne.n	80078f8 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078f6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a1d      	ldr	r2, [pc, #116]	; (8007974 <HAL_TIM_PWM_Start_IT+0x1e8>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d018      	beq.n	8007934 <HAL_TIM_PWM_Start_IT+0x1a8>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800790a:	d013      	beq.n	8007934 <HAL_TIM_PWM_Start_IT+0x1a8>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a19      	ldr	r2, [pc, #100]	; (8007978 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d00e      	beq.n	8007934 <HAL_TIM_PWM_Start_IT+0x1a8>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a18      	ldr	r2, [pc, #96]	; (800797c <HAL_TIM_PWM_Start_IT+0x1f0>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d009      	beq.n	8007934 <HAL_TIM_PWM_Start_IT+0x1a8>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a16      	ldr	r2, [pc, #88]	; (8007980 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d004      	beq.n	8007934 <HAL_TIM_PWM_Start_IT+0x1a8>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a15      	ldr	r2, [pc, #84]	; (8007984 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d111      	bne.n	8007958 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	689b      	ldr	r3, [r3, #8]
 800793a:	f003 0307 	and.w	r3, r3, #7
 800793e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2b06      	cmp	r3, #6
 8007944:	d010      	beq.n	8007968 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f042 0201 	orr.w	r2, r2, #1
 8007954:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007956:	e007      	b.n	8007968 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f042 0201 	orr.w	r2, r2, #1
 8007966:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007968:	7bfb      	ldrb	r3, [r7, #15]
}
 800796a:	4618      	mov	r0, r3
 800796c:	3710      	adds	r7, #16
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}
 8007972:	bf00      	nop
 8007974:	40010000 	.word	0x40010000
 8007978:	40000400 	.word	0x40000400
 800797c:	40000800 	.word	0x40000800
 8007980:	40000c00 	.word	0x40000c00
 8007984:	40014000 	.word	0x40014000

08007988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b02      	cmp	r3, #2
 800799c:	d122      	bne.n	80079e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f003 0302 	and.w	r3, r3, #2
 80079a8:	2b02      	cmp	r3, #2
 80079aa:	d11b      	bne.n	80079e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f06f 0202 	mvn.w	r2, #2
 80079b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	f003 0303 	and.w	r3, r3, #3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d003      	beq.n	80079d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f000 fa77 	bl	8007ebe <HAL_TIM_IC_CaptureCallback>
 80079d0:	e005      	b.n	80079de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fa69 	bl	8007eaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fa7a 	bl	8007ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	f003 0304 	and.w	r3, r3, #4
 80079ee:	2b04      	cmp	r3, #4
 80079f0:	d122      	bne.n	8007a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	68db      	ldr	r3, [r3, #12]
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b04      	cmp	r3, #4
 80079fe:	d11b      	bne.n	8007a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f06f 0204 	mvn.w	r2, #4
 8007a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2202      	movs	r2, #2
 8007a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fa4d 	bl	8007ebe <HAL_TIM_IC_CaptureCallback>
 8007a24:	e005      	b.n	8007a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 fa3f 	bl	8007eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f000 fa50 	bl	8007ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	691b      	ldr	r3, [r3, #16]
 8007a3e:	f003 0308 	and.w	r3, r3, #8
 8007a42:	2b08      	cmp	r3, #8
 8007a44:	d122      	bne.n	8007a8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f003 0308 	and.w	r3, r3, #8
 8007a50:	2b08      	cmp	r3, #8
 8007a52:	d11b      	bne.n	8007a8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f06f 0208 	mvn.w	r2, #8
 8007a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2204      	movs	r2, #4
 8007a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	f003 0303 	and.w	r3, r3, #3
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d003      	beq.n	8007a7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fa23 	bl	8007ebe <HAL_TIM_IC_CaptureCallback>
 8007a78:	e005      	b.n	8007a86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fa15 	bl	8007eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fa26 	bl	8007ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	691b      	ldr	r3, [r3, #16]
 8007a92:	f003 0310 	and.w	r3, r3, #16
 8007a96:	2b10      	cmp	r3, #16
 8007a98:	d122      	bne.n	8007ae0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f003 0310 	and.w	r3, r3, #16
 8007aa4:	2b10      	cmp	r3, #16
 8007aa6:	d11b      	bne.n	8007ae0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f06f 0210 	mvn.w	r2, #16
 8007ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2208      	movs	r2, #8
 8007ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	69db      	ldr	r3, [r3, #28]
 8007abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d003      	beq.n	8007ace <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 f9f9 	bl	8007ebe <HAL_TIM_IC_CaptureCallback>
 8007acc:	e005      	b.n	8007ada <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 f9eb 	bl	8007eaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 f9fc 	bl	8007ed2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	691b      	ldr	r3, [r3, #16]
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b01      	cmp	r3, #1
 8007aec:	d10e      	bne.n	8007b0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	f003 0301 	and.w	r3, r3, #1
 8007af8:	2b01      	cmp	r3, #1
 8007afa:	d107      	bne.n	8007b0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f06f 0201 	mvn.w	r2, #1
 8007b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f7fb ff1e 	bl	8003948 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b16:	2b80      	cmp	r3, #128	; 0x80
 8007b18:	d10e      	bne.n	8007b38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b24:	2b80      	cmp	r3, #128	; 0x80
 8007b26:	d107      	bne.n	8007b38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fd26 	bl	8008584 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	691b      	ldr	r3, [r3, #16]
 8007b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b42:	2b40      	cmp	r3, #64	; 0x40
 8007b44:	d10e      	bne.n	8007b64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b50:	2b40      	cmp	r3, #64	; 0x40
 8007b52:	d107      	bne.n	8007b64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f000 f9c1 	bl	8007ee6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	691b      	ldr	r3, [r3, #16]
 8007b6a:	f003 0320 	and.w	r3, r3, #32
 8007b6e:	2b20      	cmp	r3, #32
 8007b70:	d10e      	bne.n	8007b90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68db      	ldr	r3, [r3, #12]
 8007b78:	f003 0320 	and.w	r3, r3, #32
 8007b7c:	2b20      	cmp	r3, #32
 8007b7e:	d107      	bne.n	8007b90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f06f 0220 	mvn.w	r2, #32
 8007b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fcf0 	bl	8008570 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b90:	bf00      	nop
 8007b92:	3708      	adds	r7, #8
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b086      	sub	sp, #24
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	60f8      	str	r0, [r7, #12]
 8007ba0:	60b9      	str	r1, [r7, #8]
 8007ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d101      	bne.n	8007bb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	e0ae      	b.n	8007d14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2201      	movs	r2, #1
 8007bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2b0c      	cmp	r3, #12
 8007bc2:	f200 809f 	bhi.w	8007d04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007bc6:	a201      	add	r2, pc, #4	; (adr r2, 8007bcc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bcc:	08007c01 	.word	0x08007c01
 8007bd0:	08007d05 	.word	0x08007d05
 8007bd4:	08007d05 	.word	0x08007d05
 8007bd8:	08007d05 	.word	0x08007d05
 8007bdc:	08007c41 	.word	0x08007c41
 8007be0:	08007d05 	.word	0x08007d05
 8007be4:	08007d05 	.word	0x08007d05
 8007be8:	08007d05 	.word	0x08007d05
 8007bec:	08007c83 	.word	0x08007c83
 8007bf0:	08007d05 	.word	0x08007d05
 8007bf4:	08007d05 	.word	0x08007d05
 8007bf8:	08007d05 	.word	0x08007d05
 8007bfc:	08007cc3 	.word	0x08007cc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	68b9      	ldr	r1, [r7, #8]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 f9f8 	bl	8007ffc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	699a      	ldr	r2, [r3, #24]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f042 0208 	orr.w	r2, r2, #8
 8007c1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699a      	ldr	r2, [r3, #24]
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f022 0204 	bic.w	r2, r2, #4
 8007c2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	6999      	ldr	r1, [r3, #24]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	691a      	ldr	r2, [r3, #16]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	619a      	str	r2, [r3, #24]
      break;
 8007c3e:	e064      	b.n	8007d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	68b9      	ldr	r1, [r7, #8]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 fa3e 	bl	80080c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	699a      	ldr	r2, [r3, #24]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699a      	ldr	r2, [r3, #24]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	6999      	ldr	r1, [r3, #24]
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	021a      	lsls	r2, r3, #8
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	430a      	orrs	r2, r1
 8007c7e:	619a      	str	r2, [r3, #24]
      break;
 8007c80:	e043      	b.n	8007d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68b9      	ldr	r1, [r7, #8]
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f000 fa89 	bl	80081a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	69da      	ldr	r2, [r3, #28]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f042 0208 	orr.w	r2, r2, #8
 8007c9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	69da      	ldr	r2, [r3, #28]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f022 0204 	bic.w	r2, r2, #4
 8007cac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	69d9      	ldr	r1, [r3, #28]
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	691a      	ldr	r2, [r3, #16]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	430a      	orrs	r2, r1
 8007cbe:	61da      	str	r2, [r3, #28]
      break;
 8007cc0:	e023      	b.n	8007d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	68b9      	ldr	r1, [r7, #8]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f000 fad3 	bl	8008274 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	69da      	ldr	r2, [r3, #28]
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69da      	ldr	r2, [r3, #28]
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	69d9      	ldr	r1, [r3, #28]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	691b      	ldr	r3, [r3, #16]
 8007cf8:	021a      	lsls	r2, r3, #8
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	61da      	str	r2, [r3, #28]
      break;
 8007d02:	e002      	b.n	8007d0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	75fb      	strb	r3, [r7, #23]
      break;
 8007d08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007d26:	2300      	movs	r3, #0
 8007d28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d101      	bne.n	8007d38 <HAL_TIM_ConfigClockSource+0x1c>
 8007d34:	2302      	movs	r3, #2
 8007d36:	e0b4      	b.n	8007ea2 <HAL_TIM_ConfigClockSource+0x186>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d70:	d03e      	beq.n	8007df0 <HAL_TIM_ConfigClockSource+0xd4>
 8007d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d76:	f200 8087 	bhi.w	8007e88 <HAL_TIM_ConfigClockSource+0x16c>
 8007d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d7e:	f000 8086 	beq.w	8007e8e <HAL_TIM_ConfigClockSource+0x172>
 8007d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d86:	d87f      	bhi.n	8007e88 <HAL_TIM_ConfigClockSource+0x16c>
 8007d88:	2b70      	cmp	r3, #112	; 0x70
 8007d8a:	d01a      	beq.n	8007dc2 <HAL_TIM_ConfigClockSource+0xa6>
 8007d8c:	2b70      	cmp	r3, #112	; 0x70
 8007d8e:	d87b      	bhi.n	8007e88 <HAL_TIM_ConfigClockSource+0x16c>
 8007d90:	2b60      	cmp	r3, #96	; 0x60
 8007d92:	d050      	beq.n	8007e36 <HAL_TIM_ConfigClockSource+0x11a>
 8007d94:	2b60      	cmp	r3, #96	; 0x60
 8007d96:	d877      	bhi.n	8007e88 <HAL_TIM_ConfigClockSource+0x16c>
 8007d98:	2b50      	cmp	r3, #80	; 0x50
 8007d9a:	d03c      	beq.n	8007e16 <HAL_TIM_ConfigClockSource+0xfa>
 8007d9c:	2b50      	cmp	r3, #80	; 0x50
 8007d9e:	d873      	bhi.n	8007e88 <HAL_TIM_ConfigClockSource+0x16c>
 8007da0:	2b40      	cmp	r3, #64	; 0x40
 8007da2:	d058      	beq.n	8007e56 <HAL_TIM_ConfigClockSource+0x13a>
 8007da4:	2b40      	cmp	r3, #64	; 0x40
 8007da6:	d86f      	bhi.n	8007e88 <HAL_TIM_ConfigClockSource+0x16c>
 8007da8:	2b30      	cmp	r3, #48	; 0x30
 8007daa:	d064      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x15a>
 8007dac:	2b30      	cmp	r3, #48	; 0x30
 8007dae:	d86b      	bhi.n	8007e88 <HAL_TIM_ConfigClockSource+0x16c>
 8007db0:	2b20      	cmp	r3, #32
 8007db2:	d060      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x15a>
 8007db4:	2b20      	cmp	r3, #32
 8007db6:	d867      	bhi.n	8007e88 <HAL_TIM_ConfigClockSource+0x16c>
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d05c      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x15a>
 8007dbc:	2b10      	cmp	r3, #16
 8007dbe:	d05a      	beq.n	8007e76 <HAL_TIM_ConfigClockSource+0x15a>
 8007dc0:	e062      	b.n	8007e88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6818      	ldr	r0, [r3, #0]
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	6899      	ldr	r1, [r3, #8]
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	685a      	ldr	r2, [r3, #4]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	f000 fb19 	bl	8008408 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007dde:	68bb      	ldr	r3, [r7, #8]
 8007de0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007de4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	68ba      	ldr	r2, [r7, #8]
 8007dec:	609a      	str	r2, [r3, #8]
      break;
 8007dee:	e04f      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6818      	ldr	r0, [r3, #0]
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	6899      	ldr	r1, [r3, #8]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	f000 fb02 	bl	8008408 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689a      	ldr	r2, [r3, #8]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007e12:	609a      	str	r2, [r3, #8]
      break;
 8007e14:	e03c      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6818      	ldr	r0, [r3, #0]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	6859      	ldr	r1, [r3, #4]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	461a      	mov	r2, r3
 8007e24:	f000 fa76 	bl	8008314 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	2150      	movs	r1, #80	; 0x50
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 facf 	bl	80083d2 <TIM_ITRx_SetConfig>
      break;
 8007e34:	e02c      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6818      	ldr	r0, [r3, #0]
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	6859      	ldr	r1, [r3, #4]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	461a      	mov	r2, r3
 8007e44:	f000 fa95 	bl	8008372 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2160      	movs	r1, #96	; 0x60
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 fabf 	bl	80083d2 <TIM_ITRx_SetConfig>
      break;
 8007e54:	e01c      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6818      	ldr	r0, [r3, #0]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	6859      	ldr	r1, [r3, #4]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	461a      	mov	r2, r3
 8007e64:	f000 fa56 	bl	8008314 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	2140      	movs	r1, #64	; 0x40
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 faaf 	bl	80083d2 <TIM_ITRx_SetConfig>
      break;
 8007e74:	e00c      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681a      	ldr	r2, [r3, #0]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	4610      	mov	r0, r2
 8007e82:	f000 faa6 	bl	80083d2 <TIM_ITRx_SetConfig>
      break;
 8007e86:	e003      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8007e8c:	e000      	b.n	8007e90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2201      	movs	r2, #1
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007eaa:	b480      	push	{r7}
 8007eac:	b083      	sub	sp, #12
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007eb2:	bf00      	nop
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr

08007ebe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ebe:	b480      	push	{r7}
 8007ec0:	b083      	sub	sp, #12
 8007ec2:	af00      	add	r7, sp, #0
 8007ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007ec6:	bf00      	nop
 8007ec8:	370c      	adds	r7, #12
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b083      	sub	sp, #12
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007eda:	bf00      	nop
 8007edc:	370c      	adds	r7, #12
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr

08007ee6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b083      	sub	sp, #12
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007eee:	bf00      	nop
 8007ef0:	370c      	adds	r7, #12
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
	...

08007efc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b085      	sub	sp, #20
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
 8007f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	4a34      	ldr	r2, [pc, #208]	; (8007fe0 <TIM_Base_SetConfig+0xe4>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00f      	beq.n	8007f34 <TIM_Base_SetConfig+0x38>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f1a:	d00b      	beq.n	8007f34 <TIM_Base_SetConfig+0x38>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	4a31      	ldr	r2, [pc, #196]	; (8007fe4 <TIM_Base_SetConfig+0xe8>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d007      	beq.n	8007f34 <TIM_Base_SetConfig+0x38>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	4a30      	ldr	r2, [pc, #192]	; (8007fe8 <TIM_Base_SetConfig+0xec>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d003      	beq.n	8007f34 <TIM_Base_SetConfig+0x38>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4a2f      	ldr	r2, [pc, #188]	; (8007fec <TIM_Base_SetConfig+0xf0>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d108      	bne.n	8007f46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	4a25      	ldr	r2, [pc, #148]	; (8007fe0 <TIM_Base_SetConfig+0xe4>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d01b      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f54:	d017      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a22      	ldr	r2, [pc, #136]	; (8007fe4 <TIM_Base_SetConfig+0xe8>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d013      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a21      	ldr	r2, [pc, #132]	; (8007fe8 <TIM_Base_SetConfig+0xec>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d00f      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a20      	ldr	r2, [pc, #128]	; (8007fec <TIM_Base_SetConfig+0xf0>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d00b      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a1f      	ldr	r2, [pc, #124]	; (8007ff0 <TIM_Base_SetConfig+0xf4>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d007      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	4a1e      	ldr	r2, [pc, #120]	; (8007ff4 <TIM_Base_SetConfig+0xf8>)
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	d003      	beq.n	8007f86 <TIM_Base_SetConfig+0x8a>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4a1d      	ldr	r2, [pc, #116]	; (8007ff8 <TIM_Base_SetConfig+0xfc>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d108      	bne.n	8007f98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	4313      	orrs	r3, r2
 8007f96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	68fa      	ldr	r2, [r7, #12]
 8007faa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	689a      	ldr	r2, [r3, #8]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	681a      	ldr	r2, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	4a08      	ldr	r2, [pc, #32]	; (8007fe0 <TIM_Base_SetConfig+0xe4>)
 8007fc0:	4293      	cmp	r3, r2
 8007fc2:	d103      	bne.n	8007fcc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	691a      	ldr	r2, [r3, #16]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	615a      	str	r2, [r3, #20]
}
 8007fd2:	bf00      	nop
 8007fd4:	3714      	adds	r7, #20
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	40010000 	.word	0x40010000
 8007fe4:	40000400 	.word	0x40000400
 8007fe8:	40000800 	.word	0x40000800
 8007fec:	40000c00 	.word	0x40000c00
 8007ff0:	40014000 	.word	0x40014000
 8007ff4:	40014400 	.word	0x40014400
 8007ff8:	40014800 	.word	0x40014800

08007ffc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6a1b      	ldr	r3, [r3, #32]
 800800a:	f023 0201 	bic.w	r2, r3, #1
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6a1b      	ldr	r3, [r3, #32]
 8008016:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	699b      	ldr	r3, [r3, #24]
 8008022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800802a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 0303 	bic.w	r3, r3, #3
 8008032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	4313      	orrs	r3, r2
 800803c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f023 0302 	bic.w	r3, r3, #2
 8008044:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	4313      	orrs	r3, r2
 800804e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a1c      	ldr	r2, [pc, #112]	; (80080c4 <TIM_OC1_SetConfig+0xc8>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d10c      	bne.n	8008072 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f023 0308 	bic.w	r3, r3, #8
 800805e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	4313      	orrs	r3, r2
 8008068:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	f023 0304 	bic.w	r3, r3, #4
 8008070:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	4a13      	ldr	r2, [pc, #76]	; (80080c4 <TIM_OC1_SetConfig+0xc8>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d111      	bne.n	800809e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	695b      	ldr	r3, [r3, #20]
 800808e:	693a      	ldr	r2, [r7, #16]
 8008090:	4313      	orrs	r3, r2
 8008092:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	4313      	orrs	r3, r2
 800809c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	693a      	ldr	r2, [r7, #16]
 80080a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	685a      	ldr	r2, [r3, #4]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	697a      	ldr	r2, [r7, #20]
 80080b6:	621a      	str	r2, [r3, #32]
}
 80080b8:	bf00      	nop
 80080ba:	371c      	adds	r7, #28
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr
 80080c4:	40010000 	.word	0x40010000

080080c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b087      	sub	sp, #28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6a1b      	ldr	r3, [r3, #32]
 80080d6:	f023 0210 	bic.w	r2, r3, #16
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6a1b      	ldr	r3, [r3, #32]
 80080e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	021b      	lsls	r3, r3, #8
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	4313      	orrs	r3, r2
 800810a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	f023 0320 	bic.w	r3, r3, #32
 8008112:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	011b      	lsls	r3, r3, #4
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	4313      	orrs	r3, r2
 800811e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a1e      	ldr	r2, [pc, #120]	; (800819c <TIM_OC2_SetConfig+0xd4>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d10d      	bne.n	8008144 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800812e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	011b      	lsls	r3, r3, #4
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	4313      	orrs	r3, r2
 800813a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800813c:	697b      	ldr	r3, [r7, #20]
 800813e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008142:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	4a15      	ldr	r2, [pc, #84]	; (800819c <TIM_OC2_SetConfig+0xd4>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d113      	bne.n	8008174 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800814c:	693b      	ldr	r3, [r7, #16]
 800814e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008152:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800815a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	695b      	ldr	r3, [r3, #20]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	4313      	orrs	r3, r2
 8008166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	4313      	orrs	r3, r2
 8008172:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	693a      	ldr	r2, [r7, #16]
 8008178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	68fa      	ldr	r2, [r7, #12]
 800817e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	621a      	str	r2, [r3, #32]
}
 800818e:	bf00      	nop
 8008190:	371c      	adds	r7, #28
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr
 800819a:	bf00      	nop
 800819c:	40010000 	.word	0x40010000

080081a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081a0:	b480      	push	{r7}
 80081a2:	b087      	sub	sp, #28
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	6078      	str	r0, [r7, #4]
 80081a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6a1b      	ldr	r3, [r3, #32]
 80081ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	69db      	ldr	r3, [r3, #28]
 80081c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f023 0303 	bic.w	r3, r3, #3
 80081d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80081e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	021b      	lsls	r3, r3, #8
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a1d      	ldr	r2, [pc, #116]	; (8008270 <TIM_OC3_SetConfig+0xd0>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d10d      	bne.n	800821a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008204:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	68db      	ldr	r3, [r3, #12]
 800820a:	021b      	lsls	r3, r3, #8
 800820c:	697a      	ldr	r2, [r7, #20]
 800820e:	4313      	orrs	r3, r2
 8008210:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008218:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4a14      	ldr	r2, [pc, #80]	; (8008270 <TIM_OC3_SetConfig+0xd0>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d113      	bne.n	800824a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	695b      	ldr	r3, [r3, #20]
 8008236:	011b      	lsls	r3, r3, #4
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	4313      	orrs	r3, r2
 800823c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	699b      	ldr	r3, [r3, #24]
 8008242:	011b      	lsls	r3, r3, #4
 8008244:	693a      	ldr	r2, [r7, #16]
 8008246:	4313      	orrs	r3, r2
 8008248:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	621a      	str	r2, [r3, #32]
}
 8008264:	bf00      	nop
 8008266:	371c      	adds	r7, #28
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr
 8008270:	40010000 	.word	0x40010000

08008274 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008274:	b480      	push	{r7}
 8008276:	b087      	sub	sp, #28
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a1b      	ldr	r3, [r3, #32]
 8008282:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	685b      	ldr	r3, [r3, #4]
 8008294:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	021b      	lsls	r3, r3, #8
 80082b2:	68fa      	ldr	r2, [r7, #12]
 80082b4:	4313      	orrs	r3, r2
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	689b      	ldr	r3, [r3, #8]
 80082c4:	031b      	lsls	r3, r3, #12
 80082c6:	693a      	ldr	r2, [r7, #16]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a10      	ldr	r2, [pc, #64]	; (8008310 <TIM_OC4_SetConfig+0x9c>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d109      	bne.n	80082e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80082da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	019b      	lsls	r3, r3, #6
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	4313      	orrs	r3, r2
 80082e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	697a      	ldr	r2, [r7, #20]
 80082ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	693a      	ldr	r2, [r7, #16]
 8008300:	621a      	str	r2, [r3, #32]
}
 8008302:	bf00      	nop
 8008304:	371c      	adds	r7, #28
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	40010000 	.word	0x40010000

08008314 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	60f8      	str	r0, [r7, #12]
 800831c:	60b9      	str	r1, [r7, #8]
 800831e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	6a1b      	ldr	r3, [r3, #32]
 8008324:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	6a1b      	ldr	r3, [r3, #32]
 800832a:	f023 0201 	bic.w	r2, r3, #1
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800833e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	011b      	lsls	r3, r3, #4
 8008344:	693a      	ldr	r2, [r7, #16]
 8008346:	4313      	orrs	r3, r2
 8008348:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f023 030a 	bic.w	r3, r3, #10
 8008350:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008352:	697a      	ldr	r2, [r7, #20]
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	4313      	orrs	r3, r2
 8008358:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	693a      	ldr	r2, [r7, #16]
 800835e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	697a      	ldr	r2, [r7, #20]
 8008364:	621a      	str	r2, [r3, #32]
}
 8008366:	bf00      	nop
 8008368:	371c      	adds	r7, #28
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr

08008372 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008372:	b480      	push	{r7}
 8008374:	b087      	sub	sp, #28
 8008376:	af00      	add	r7, sp, #0
 8008378:	60f8      	str	r0, [r7, #12]
 800837a:	60b9      	str	r1, [r7, #8]
 800837c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6a1b      	ldr	r3, [r3, #32]
 8008382:	f023 0210 	bic.w	r2, r3, #16
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	699b      	ldr	r3, [r3, #24]
 800838e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008396:	697b      	ldr	r3, [r7, #20]
 8008398:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800839c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	031b      	lsls	r3, r3, #12
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	011b      	lsls	r3, r3, #4
 80083b4:	693a      	ldr	r2, [r7, #16]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	697a      	ldr	r2, [r7, #20]
 80083be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	621a      	str	r2, [r3, #32]
}
 80083c6:	bf00      	nop
 80083c8:	371c      	adds	r7, #28
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b085      	sub	sp, #20
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
 80083da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80083ea:	683a      	ldr	r2, [r7, #0]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	f043 0307 	orr.w	r3, r3, #7
 80083f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	609a      	str	r2, [r3, #8]
}
 80083fc:	bf00      	nop
 80083fe:	3714      	adds	r7, #20
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008408:	b480      	push	{r7}
 800840a:	b087      	sub	sp, #28
 800840c:	af00      	add	r7, sp, #0
 800840e:	60f8      	str	r0, [r7, #12]
 8008410:	60b9      	str	r1, [r7, #8]
 8008412:	607a      	str	r2, [r7, #4]
 8008414:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	689b      	ldr	r3, [r3, #8]
 800841a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800841c:	697b      	ldr	r3, [r7, #20]
 800841e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008422:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	021a      	lsls	r2, r3, #8
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	431a      	orrs	r2, r3
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	4313      	orrs	r3, r2
 8008430:	697a      	ldr	r2, [r7, #20]
 8008432:	4313      	orrs	r3, r2
 8008434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	697a      	ldr	r2, [r7, #20]
 800843a:	609a      	str	r2, [r3, #8]
}
 800843c:	bf00      	nop
 800843e:	371c      	adds	r7, #28
 8008440:	46bd      	mov	sp, r7
 8008442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008446:	4770      	bx	lr

08008448 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008448:	b480      	push	{r7}
 800844a:	b087      	sub	sp, #28
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	f003 031f 	and.w	r3, r3, #31
 800845a:	2201      	movs	r2, #1
 800845c:	fa02 f303 	lsl.w	r3, r2, r3
 8008460:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6a1a      	ldr	r2, [r3, #32]
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	43db      	mvns	r3, r3
 800846a:	401a      	ands	r2, r3
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	6a1a      	ldr	r2, [r3, #32]
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	f003 031f 	and.w	r3, r3, #31
 800847a:	6879      	ldr	r1, [r7, #4]
 800847c:	fa01 f303 	lsl.w	r3, r1, r3
 8008480:	431a      	orrs	r2, r3
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	621a      	str	r2, [r3, #32]
}
 8008486:	bf00      	nop
 8008488:	371c      	adds	r7, #28
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
	...

08008494 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008494:	b480      	push	{r7}
 8008496:	b085      	sub	sp, #20
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d101      	bne.n	80084ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084a8:	2302      	movs	r3, #2
 80084aa:	e050      	b.n	800854e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2202      	movs	r2, #2
 80084b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	4313      	orrs	r3, r2
 80084dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a1c      	ldr	r2, [pc, #112]	; (800855c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d018      	beq.n	8008522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084f8:	d013      	beq.n	8008522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a18      	ldr	r2, [pc, #96]	; (8008560 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d00e      	beq.n	8008522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a16      	ldr	r2, [pc, #88]	; (8008564 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d009      	beq.n	8008522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a15      	ldr	r2, [pc, #84]	; (8008568 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d004      	beq.n	8008522 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a13      	ldr	r2, [pc, #76]	; (800856c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d10c      	bne.n	800853c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008528:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	68ba      	ldr	r2, [r7, #8]
 8008530:	4313      	orrs	r3, r2
 8008532:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68ba      	ldr	r2, [r7, #8]
 800853a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3714      	adds	r7, #20
 8008552:	46bd      	mov	sp, r7
 8008554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	40010000 	.word	0x40010000
 8008560:	40000400 	.word	0x40000400
 8008564:	40000800 	.word	0x40000800
 8008568:	40000c00 	.word	0x40000c00
 800856c:	40014000 	.word	0x40014000

08008570 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b082      	sub	sp, #8
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d101      	bne.n	80085aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e03f      	b.n	800862a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d106      	bne.n	80085c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f7fc f836 	bl	8004630 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2224      	movs	r2, #36	; 0x24
 80085c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68da      	ldr	r2, [r3, #12]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80085da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f000 fddf 	bl	80091a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	691a      	ldr	r2, [r3, #16]
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	695a      	ldr	r2, [r3, #20]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008600:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68da      	ldr	r2, [r3, #12]
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008610:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2200      	movs	r2, #0
 8008616:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2220      	movs	r2, #32
 800861c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2220      	movs	r2, #32
 8008624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3708      	adds	r7, #8
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b08a      	sub	sp, #40	; 0x28
 8008636:	af02      	add	r7, sp, #8
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	603b      	str	r3, [r7, #0]
 800863e:	4613      	mov	r3, r2
 8008640:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008642:	2300      	movs	r3, #0
 8008644:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800864c:	b2db      	uxtb	r3, r3
 800864e:	2b20      	cmp	r3, #32
 8008650:	d17c      	bne.n	800874c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d002      	beq.n	800865e <HAL_UART_Transmit+0x2c>
 8008658:	88fb      	ldrh	r3, [r7, #6]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d101      	bne.n	8008662 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800865e:	2301      	movs	r3, #1
 8008660:	e075      	b.n	800874e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008668:	2b01      	cmp	r3, #1
 800866a:	d101      	bne.n	8008670 <HAL_UART_Transmit+0x3e>
 800866c:	2302      	movs	r3, #2
 800866e:	e06e      	b.n	800874e <HAL_UART_Transmit+0x11c>
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2200      	movs	r2, #0
 800867c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2221      	movs	r2, #33	; 0x21
 8008682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008686:	f7fc fa0d 	bl	8004aa4 <HAL_GetTick>
 800868a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	88fa      	ldrh	r2, [r7, #6]
 8008690:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	88fa      	ldrh	r2, [r7, #6]
 8008696:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	689b      	ldr	r3, [r3, #8]
 800869c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086a0:	d108      	bne.n	80086b4 <HAL_UART_Transmit+0x82>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	691b      	ldr	r3, [r3, #16]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d104      	bne.n	80086b4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80086aa:	2300      	movs	r3, #0
 80086ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	61bb      	str	r3, [r7, #24]
 80086b2:	e003      	b.n	80086bc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086b8:	2300      	movs	r3, #0
 80086ba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80086c4:	e02a      	b.n	800871c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	9300      	str	r3, [sp, #0]
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	2200      	movs	r2, #0
 80086ce:	2180      	movs	r1, #128	; 0x80
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 fb1f 	bl	8008d14 <UART_WaitOnFlagUntilTimeout>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d001      	beq.n	80086e0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e036      	b.n	800874e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80086e0:	69fb      	ldr	r3, [r7, #28]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d10b      	bne.n	80086fe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	881b      	ldrh	r3, [r3, #0]
 80086ea:	461a      	mov	r2, r3
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80086f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80086f6:	69bb      	ldr	r3, [r7, #24]
 80086f8:	3302      	adds	r3, #2
 80086fa:	61bb      	str	r3, [r7, #24]
 80086fc:	e007      	b.n	800870e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80086fe:	69fb      	ldr	r3, [r7, #28]
 8008700:	781a      	ldrb	r2, [r3, #0]
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	3301      	adds	r3, #1
 800870c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008712:	b29b      	uxth	r3, r3
 8008714:	3b01      	subs	r3, #1
 8008716:	b29a      	uxth	r2, r3
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008720:	b29b      	uxth	r3, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1cf      	bne.n	80086c6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	9300      	str	r3, [sp, #0]
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	2200      	movs	r2, #0
 800872e:	2140      	movs	r1, #64	; 0x40
 8008730:	68f8      	ldr	r0, [r7, #12]
 8008732:	f000 faef 	bl	8008d14 <UART_WaitOnFlagUntilTimeout>
 8008736:	4603      	mov	r3, r0
 8008738:	2b00      	cmp	r3, #0
 800873a:	d001      	beq.n	8008740 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800873c:	2303      	movs	r3, #3
 800873e:	e006      	b.n	800874e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	2220      	movs	r2, #32
 8008744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	e000      	b.n	800874e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800874c:	2302      	movs	r3, #2
  }
}
 800874e:	4618      	mov	r0, r3
 8008750:	3720      	adds	r7, #32
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008756:	b580      	push	{r7, lr}
 8008758:	b084      	sub	sp, #16
 800875a:	af00      	add	r7, sp, #0
 800875c:	60f8      	str	r0, [r7, #12]
 800875e:	60b9      	str	r1, [r7, #8]
 8008760:	4613      	mov	r3, r2
 8008762:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800876a:	b2db      	uxtb	r3, r3
 800876c:	2b20      	cmp	r3, #32
 800876e:	d11d      	bne.n	80087ac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d002      	beq.n	800877c <HAL_UART_Receive_IT+0x26>
 8008776:	88fb      	ldrh	r3, [r7, #6]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d101      	bne.n	8008780 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e016      	b.n	80087ae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008786:	2b01      	cmp	r3, #1
 8008788:	d101      	bne.n	800878e <HAL_UART_Receive_IT+0x38>
 800878a:	2302      	movs	r3, #2
 800878c:	e00f      	b.n	80087ae <HAL_UART_Receive_IT+0x58>
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2200      	movs	r2, #0
 800879a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800879c:	88fb      	ldrh	r3, [r7, #6]
 800879e:	461a      	mov	r2, r3
 80087a0:	68b9      	ldr	r1, [r7, #8]
 80087a2:	68f8      	ldr	r0, [r7, #12]
 80087a4:	f000 fb24 	bl	8008df0 <UART_Start_Receive_IT>
 80087a8:	4603      	mov	r3, r0
 80087aa:	e000      	b.n	80087ae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80087ac:	2302      	movs	r3, #2
  }
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3710      	adds	r7, #16
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
	...

080087b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b0ba      	sub	sp, #232	; 0xe8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	695b      	ldr	r3, [r3, #20]
 80087da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80087de:	2300      	movs	r3, #0
 80087e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80087e4:	2300      	movs	r3, #0
 80087e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80087ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ee:	f003 030f 	and.w	r3, r3, #15
 80087f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80087f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d10f      	bne.n	800881e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008802:	f003 0320 	and.w	r3, r3, #32
 8008806:	2b00      	cmp	r3, #0
 8008808:	d009      	beq.n	800881e <HAL_UART_IRQHandler+0x66>
 800880a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800880e:	f003 0320 	and.w	r3, r3, #32
 8008812:	2b00      	cmp	r3, #0
 8008814:	d003      	beq.n	800881e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fc07 	bl	800902a <UART_Receive_IT>
      return;
 800881c:	e256      	b.n	8008ccc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800881e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008822:	2b00      	cmp	r3, #0
 8008824:	f000 80de 	beq.w	80089e4 <HAL_UART_IRQHandler+0x22c>
 8008828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800882c:	f003 0301 	and.w	r3, r3, #1
 8008830:	2b00      	cmp	r3, #0
 8008832:	d106      	bne.n	8008842 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008838:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800883c:	2b00      	cmp	r3, #0
 800883e:	f000 80d1 	beq.w	80089e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008842:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	2b00      	cmp	r3, #0
 800884c:	d00b      	beq.n	8008866 <HAL_UART_IRQHandler+0xae>
 800884e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008856:	2b00      	cmp	r3, #0
 8008858:	d005      	beq.n	8008866 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885e:	f043 0201 	orr.w	r2, r3, #1
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008866:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800886a:	f003 0304 	and.w	r3, r3, #4
 800886e:	2b00      	cmp	r3, #0
 8008870:	d00b      	beq.n	800888a <HAL_UART_IRQHandler+0xd2>
 8008872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008876:	f003 0301 	and.w	r3, r3, #1
 800887a:	2b00      	cmp	r3, #0
 800887c:	d005      	beq.n	800888a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008882:	f043 0202 	orr.w	r2, r3, #2
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800888a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800888e:	f003 0302 	and.w	r3, r3, #2
 8008892:	2b00      	cmp	r3, #0
 8008894:	d00b      	beq.n	80088ae <HAL_UART_IRQHandler+0xf6>
 8008896:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d005      	beq.n	80088ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a6:	f043 0204 	orr.w	r2, r3, #4
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80088ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088b2:	f003 0308 	and.w	r3, r3, #8
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d011      	beq.n	80088de <HAL_UART_IRQHandler+0x126>
 80088ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d105      	bne.n	80088d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80088c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088ca:	f003 0301 	and.w	r3, r3, #1
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d005      	beq.n	80088de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d6:	f043 0208 	orr.w	r2, r3, #8
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	f000 81ed 	beq.w	8008cc2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ec:	f003 0320 	and.w	r3, r3, #32
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d008      	beq.n	8008906 <HAL_UART_IRQHandler+0x14e>
 80088f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088f8:	f003 0320 	and.w	r3, r3, #32
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d002      	beq.n	8008906 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f000 fb92 	bl	800902a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	695b      	ldr	r3, [r3, #20]
 800890c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008910:	2b40      	cmp	r3, #64	; 0x40
 8008912:	bf0c      	ite	eq
 8008914:	2301      	moveq	r3, #1
 8008916:	2300      	movne	r3, #0
 8008918:	b2db      	uxtb	r3, r3
 800891a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008922:	f003 0308 	and.w	r3, r3, #8
 8008926:	2b00      	cmp	r3, #0
 8008928:	d103      	bne.n	8008932 <HAL_UART_IRQHandler+0x17a>
 800892a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800892e:	2b00      	cmp	r3, #0
 8008930:	d04f      	beq.n	80089d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fa9a 	bl	8008e6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	695b      	ldr	r3, [r3, #20]
 800893e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008942:	2b40      	cmp	r3, #64	; 0x40
 8008944:	d141      	bne.n	80089ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	3314      	adds	r3, #20
 800894c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008954:	e853 3f00 	ldrex	r3, [r3]
 8008958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800895c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008964:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3314      	adds	r3, #20
 800896e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008972:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800897e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008982:	e841 2300 	strex	r3, r2, [r1]
 8008986:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800898a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d1d9      	bne.n	8008946 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008996:	2b00      	cmp	r3, #0
 8008998:	d013      	beq.n	80089c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899e:	4a7d      	ldr	r2, [pc, #500]	; (8008b94 <HAL_UART_IRQHandler+0x3dc>)
 80089a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089a6:	4618      	mov	r0, r3
 80089a8:	f7fc ffea 	bl	8005980 <HAL_DMA_Abort_IT>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d016      	beq.n	80089e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089b8:	687a      	ldr	r2, [r7, #4]
 80089ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80089bc:	4610      	mov	r0, r2
 80089be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089c0:	e00e      	b.n	80089e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f990 	bl	8008ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089c8:	e00a      	b.n	80089e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 f98c 	bl	8008ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d0:	e006      	b.n	80089e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f988 	bl	8008ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80089de:	e170      	b.n	8008cc2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089e0:	bf00      	nop
    return;
 80089e2:	e16e      	b.n	8008cc2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	f040 814a 	bne.w	8008c82 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80089ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089f2:	f003 0310 	and.w	r3, r3, #16
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f000 8143 	beq.w	8008c82 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80089fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a00:	f003 0310 	and.w	r3, r3, #16
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 813c 	beq.w	8008c82 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	60bb      	str	r3, [r7, #8]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	60bb      	str	r3, [r7, #8]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	60bb      	str	r3, [r7, #8]
 8008a1e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a2a:	2b40      	cmp	r3, #64	; 0x40
 8008a2c:	f040 80b4 	bne.w	8008b98 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a3c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	f000 8140 	beq.w	8008cc6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	f080 8139 	bcs.w	8008cc6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a5a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a66:	f000 8088 	beq.w	8008b7a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	330c      	adds	r3, #12
 8008a70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	330c      	adds	r3, #12
 8008a92:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008a96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a9e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008aa2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008aa6:	e841 2300 	strex	r3, r2, [r1]
 8008aaa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008aae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d1d9      	bne.n	8008a6a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	3314      	adds	r3, #20
 8008abc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008abe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ac0:	e853 3f00 	ldrex	r3, [r3]
 8008ac4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008ac6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ac8:	f023 0301 	bic.w	r3, r3, #1
 8008acc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	3314      	adds	r3, #20
 8008ad6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008ada:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008ade:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ae2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ae6:	e841 2300 	strex	r3, r2, [r1]
 8008aea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1e1      	bne.n	8008ab6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	3314      	adds	r3, #20
 8008af8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008afa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008afc:	e853 3f00 	ldrex	r3, [r3]
 8008b00:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008b02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	3314      	adds	r3, #20
 8008b12:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008b16:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008b18:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008b1c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008b1e:	e841 2300 	strex	r3, r2, [r1]
 8008b22:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008b24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d1e3      	bne.n	8008af2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2220      	movs	r2, #32
 8008b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	330c      	adds	r3, #12
 8008b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b42:	e853 3f00 	ldrex	r3, [r3]
 8008b46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b4a:	f023 0310 	bic.w	r3, r3, #16
 8008b4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	330c      	adds	r3, #12
 8008b58:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b5c:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b5e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b64:	e841 2300 	strex	r3, r2, [r1]
 8008b68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d1e3      	bne.n	8008b38 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b74:	4618      	mov	r0, r3
 8008b76:	f7fc fe93 	bl	80058a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b82:	b29b      	uxth	r3, r3
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 f8b6 	bl	8008cfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b90:	e099      	b.n	8008cc6 <HAL_UART_IRQHandler+0x50e>
 8008b92:	bf00      	nop
 8008b94:	08008f33 	.word	0x08008f33
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	1ad3      	subs	r3, r2, r3
 8008ba4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008bac:	b29b      	uxth	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	f000 808b 	beq.w	8008cca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008bb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 8086 	beq.w	8008cca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	330c      	adds	r3, #12
 8008bc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008bc8:	e853 3f00 	ldrex	r3, [r3]
 8008bcc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bd0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008bd4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	330c      	adds	r3, #12
 8008bde:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008be2:	647a      	str	r2, [r7, #68]	; 0x44
 8008be4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008be8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bea:	e841 2300 	strex	r3, r2, [r1]
 8008bee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d1e3      	bne.n	8008bbe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	3314      	adds	r3, #20
 8008bfc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c00:	e853 3f00 	ldrex	r3, [r3]
 8008c04:	623b      	str	r3, [r7, #32]
   return(result);
 8008c06:	6a3b      	ldr	r3, [r7, #32]
 8008c08:	f023 0301 	bic.w	r3, r3, #1
 8008c0c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	3314      	adds	r3, #20
 8008c16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008c1a:	633a      	str	r2, [r7, #48]	; 0x30
 8008c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e3      	bne.n	8008bf6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2220      	movs	r2, #32
 8008c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	330c      	adds	r3, #12
 8008c42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c44:	693b      	ldr	r3, [r7, #16]
 8008c46:	e853 3f00 	ldrex	r3, [r3]
 8008c4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f023 0310 	bic.w	r3, r3, #16
 8008c52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	330c      	adds	r3, #12
 8008c5c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008c60:	61fa      	str	r2, [r7, #28]
 8008c62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c64:	69b9      	ldr	r1, [r7, #24]
 8008c66:	69fa      	ldr	r2, [r7, #28]
 8008c68:	e841 2300 	strex	r3, r2, [r1]
 8008c6c:	617b      	str	r3, [r7, #20]
   return(result);
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d1e3      	bne.n	8008c3c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f83e 	bl	8008cfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c80:	e023      	b.n	8008cca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d009      	beq.n	8008ca2 <HAL_UART_IRQHandler+0x4ea>
 8008c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 f95d 	bl	8008f5a <UART_Transmit_IT>
    return;
 8008ca0:	e014      	b.n	8008ccc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d00e      	beq.n	8008ccc <HAL_UART_IRQHandler+0x514>
 8008cae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d008      	beq.n	8008ccc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 f99d 	bl	8008ffa <UART_EndTransmit_IT>
    return;
 8008cc0:	e004      	b.n	8008ccc <HAL_UART_IRQHandler+0x514>
    return;
 8008cc2:	bf00      	nop
 8008cc4:	e002      	b.n	8008ccc <HAL_UART_IRQHandler+0x514>
      return;
 8008cc6:	bf00      	nop
 8008cc8:	e000      	b.n	8008ccc <HAL_UART_IRQHandler+0x514>
      return;
 8008cca:	bf00      	nop
  }
}
 8008ccc:	37e8      	adds	r7, #232	; 0xe8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop

08008cd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b083      	sub	sp, #12
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b083      	sub	sp, #12
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	460b      	mov	r3, r1
 8008d06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b090      	sub	sp, #64	; 0x40
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	603b      	str	r3, [r7, #0]
 8008d20:	4613      	mov	r3, r2
 8008d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d24:	e050      	b.n	8008dc8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2c:	d04c      	beq.n	8008dc8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008d2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d007      	beq.n	8008d44 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d34:	f7fb feb6 	bl	8004aa4 <HAL_GetTick>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d40:	429a      	cmp	r2, r3
 8008d42:	d241      	bcs.n	8008dc8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	330c      	adds	r3, #12
 8008d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4e:	e853 3f00 	ldrex	r3, [r3]
 8008d52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	330c      	adds	r3, #12
 8008d62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d64:	637a      	str	r2, [r7, #52]	; 0x34
 8008d66:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d6c:	e841 2300 	strex	r3, r2, [r1]
 8008d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d1e5      	bne.n	8008d44 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	3314      	adds	r3, #20
 8008d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	e853 3f00 	ldrex	r3, [r3]
 8008d86:	613b      	str	r3, [r7, #16]
   return(result);
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	f023 0301 	bic.w	r3, r3, #1
 8008d8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	3314      	adds	r3, #20
 8008d96:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008d98:	623a      	str	r2, [r7, #32]
 8008d9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d9c:	69f9      	ldr	r1, [r7, #28]
 8008d9e:	6a3a      	ldr	r2, [r7, #32]
 8008da0:	e841 2300 	strex	r3, r2, [r1]
 8008da4:	61bb      	str	r3, [r7, #24]
   return(result);
 8008da6:	69bb      	ldr	r3, [r7, #24]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d1e5      	bne.n	8008d78 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2220      	movs	r2, #32
 8008db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2220      	movs	r2, #32
 8008db8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e00f      	b.n	8008de8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	681a      	ldr	r2, [r3, #0]
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	4013      	ands	r3, r2
 8008dd2:	68ba      	ldr	r2, [r7, #8]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	bf0c      	ite	eq
 8008dd8:	2301      	moveq	r3, #1
 8008dda:	2300      	movne	r3, #0
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	461a      	mov	r2, r3
 8008de0:	79fb      	ldrb	r3, [r7, #7]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d09f      	beq.n	8008d26 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3740      	adds	r7, #64	; 0x40
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b085      	sub	sp, #20
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	88fa      	ldrh	r2, [r7, #6]
 8008e08:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	88fa      	ldrh	r2, [r7, #6]
 8008e0e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2222      	movs	r2, #34	; 0x22
 8008e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2200      	movs	r2, #0
 8008e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	691b      	ldr	r3, [r3, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d007      	beq.n	8008e3e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68da      	ldr	r2, [r3, #12]
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e3c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	695a      	ldr	r2, [r3, #20]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f042 0201 	orr.w	r2, r2, #1
 8008e4c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	68da      	ldr	r2, [r3, #12]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f042 0220 	orr.w	r2, r2, #32
 8008e5c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008e5e:	2300      	movs	r3, #0
}
 8008e60:	4618      	mov	r0, r3
 8008e62:	3714      	adds	r7, #20
 8008e64:	46bd      	mov	sp, r7
 8008e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6a:	4770      	bx	lr

08008e6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008e6c:	b480      	push	{r7}
 8008e6e:	b095      	sub	sp, #84	; 0x54
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	330c      	adds	r3, #12
 8008e7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e7e:	e853 3f00 	ldrex	r3, [r3]
 8008e82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	330c      	adds	r3, #12
 8008e92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e94:	643a      	str	r2, [r7, #64]	; 0x40
 8008e96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e9c:	e841 2300 	strex	r3, r2, [r1]
 8008ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d1e5      	bne.n	8008e74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	3314      	adds	r3, #20
 8008eae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb0:	6a3b      	ldr	r3, [r7, #32]
 8008eb2:	e853 3f00 	ldrex	r3, [r3]
 8008eb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8008eb8:	69fb      	ldr	r3, [r7, #28]
 8008eba:	f023 0301 	bic.w	r3, r3, #1
 8008ebe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3314      	adds	r3, #20
 8008ec6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ec8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008eca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ed0:	e841 2300 	strex	r3, r2, [r1]
 8008ed4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d1e5      	bne.n	8008ea8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d119      	bne.n	8008f18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	330c      	adds	r3, #12
 8008eea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	e853 3f00 	ldrex	r3, [r3]
 8008ef2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ef4:	68bb      	ldr	r3, [r7, #8]
 8008ef6:	f023 0310 	bic.w	r3, r3, #16
 8008efa:	647b      	str	r3, [r7, #68]	; 0x44
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	330c      	adds	r3, #12
 8008f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f04:	61ba      	str	r2, [r7, #24]
 8008f06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f08:	6979      	ldr	r1, [r7, #20]
 8008f0a:	69ba      	ldr	r2, [r7, #24]
 8008f0c:	e841 2300 	strex	r3, r2, [r1]
 8008f10:	613b      	str	r3, [r7, #16]
   return(result);
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d1e5      	bne.n	8008ee4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2220      	movs	r2, #32
 8008f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008f26:	bf00      	nop
 8008f28:	3754      	adds	r7, #84	; 0x54
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008f32:	b580      	push	{r7, lr}
 8008f34:	b084      	sub	sp, #16
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2200      	movs	r2, #0
 8008f44:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f7ff fecb 	bl	8008ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f52:	bf00      	nop
 8008f54:	3710      	adds	r7, #16
 8008f56:	46bd      	mov	sp, r7
 8008f58:	bd80      	pop	{r7, pc}

08008f5a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b085      	sub	sp, #20
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b21      	cmp	r3, #33	; 0x21
 8008f6c:	d13e      	bne.n	8008fec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f76:	d114      	bne.n	8008fa2 <UART_Transmit_IT+0x48>
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	691b      	ldr	r3, [r3, #16]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d110      	bne.n	8008fa2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6a1b      	ldr	r3, [r3, #32]
 8008f84:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	881b      	ldrh	r3, [r3, #0]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f94:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6a1b      	ldr	r3, [r3, #32]
 8008f9a:	1c9a      	adds	r2, r3, #2
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	621a      	str	r2, [r3, #32]
 8008fa0:	e008      	b.n	8008fb4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	1c59      	adds	r1, r3, #1
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	6211      	str	r1, [r2, #32]
 8008fac:	781a      	ldrb	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008fb8:	b29b      	uxth	r3, r3
 8008fba:	3b01      	subs	r3, #1
 8008fbc:	b29b      	uxth	r3, r3
 8008fbe:	687a      	ldr	r2, [r7, #4]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d10f      	bne.n	8008fe8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	68da      	ldr	r2, [r3, #12]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008fd6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	68da      	ldr	r2, [r3, #12]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008fe6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	e000      	b.n	8008fee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008fec:	2302      	movs	r3, #2
  }
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b082      	sub	sp, #8
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	68da      	ldr	r2, [r3, #12]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009010:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2220      	movs	r2, #32
 8009016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f7ff fe5a 	bl	8008cd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b08c      	sub	sp, #48	; 0x30
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b22      	cmp	r3, #34	; 0x22
 800903c:	f040 80ab 	bne.w	8009196 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009048:	d117      	bne.n	800907a <UART_Receive_IT+0x50>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	691b      	ldr	r3, [r3, #16]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d113      	bne.n	800907a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009052:	2300      	movs	r3, #0
 8009054:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800905a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	b29b      	uxth	r3, r3
 8009064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009068:	b29a      	uxth	r2, r3
 800906a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009072:	1c9a      	adds	r2, r3, #2
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	629a      	str	r2, [r3, #40]	; 0x28
 8009078:	e026      	b.n	80090c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800907e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009080:	2300      	movs	r3, #0
 8009082:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689b      	ldr	r3, [r3, #8]
 8009088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800908c:	d007      	beq.n	800909e <UART_Receive_IT+0x74>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	689b      	ldr	r3, [r3, #8]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10a      	bne.n	80090ac <UART_Receive_IT+0x82>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	691b      	ldr	r3, [r3, #16]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d106      	bne.n	80090ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	b2da      	uxtb	r2, r3
 80090a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a8:	701a      	strb	r2, [r3, #0]
 80090aa:	e008      	b.n	80090be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	b2db      	uxtb	r3, r3
 80090b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090b8:	b2da      	uxtb	r2, r3
 80090ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090c2:	1c5a      	adds	r2, r3, #1
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	3b01      	subs	r3, #1
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	687a      	ldr	r2, [r7, #4]
 80090d4:	4619      	mov	r1, r3
 80090d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d15a      	bne.n	8009192 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68da      	ldr	r2, [r3, #12]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f022 0220 	bic.w	r2, r2, #32
 80090ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68da      	ldr	r2, [r3, #12]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	695a      	ldr	r2, [r3, #20]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f022 0201 	bic.w	r2, r2, #1
 800910a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2220      	movs	r2, #32
 8009110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009118:	2b01      	cmp	r3, #1
 800911a:	d135      	bne.n	8009188 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	330c      	adds	r3, #12
 8009128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	613b      	str	r3, [r7, #16]
   return(result);
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	f023 0310 	bic.w	r3, r3, #16
 8009138:	627b      	str	r3, [r7, #36]	; 0x24
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	330c      	adds	r3, #12
 8009140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009142:	623a      	str	r2, [r7, #32]
 8009144:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009146:	69f9      	ldr	r1, [r7, #28]
 8009148:	6a3a      	ldr	r2, [r7, #32]
 800914a:	e841 2300 	strex	r3, r2, [r1]
 800914e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009150:	69bb      	ldr	r3, [r7, #24]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d1e5      	bne.n	8009122 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 0310 	and.w	r3, r3, #16
 8009160:	2b10      	cmp	r3, #16
 8009162:	d10a      	bne.n	800917a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009164:	2300      	movs	r3, #0
 8009166:	60fb      	str	r3, [r7, #12]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	60fb      	str	r3, [r7, #12]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	60fb      	str	r3, [r7, #12]
 8009178:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f7ff fdbb 	bl	8008cfc <HAL_UARTEx_RxEventCallback>
 8009186:	e002      	b.n	800918e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7fa fbbf 	bl	800390c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800918e:	2300      	movs	r3, #0
 8009190:	e002      	b.n	8009198 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	e000      	b.n	8009198 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009196:	2302      	movs	r3, #2
  }
}
 8009198:	4618      	mov	r0, r3
 800919a:	3730      	adds	r7, #48	; 0x30
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}

080091a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80091a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80091a4:	b0c0      	sub	sp, #256	; 0x100
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	691b      	ldr	r3, [r3, #16]
 80091b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80091b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091bc:	68d9      	ldr	r1, [r3, #12]
 80091be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091c2:	681a      	ldr	r2, [r3, #0]
 80091c4:	ea40 0301 	orr.w	r3, r0, r1
 80091c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80091ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091ce:	689a      	ldr	r2, [r3, #8]
 80091d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	431a      	orrs	r2, r3
 80091d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091dc:	695b      	ldr	r3, [r3, #20]
 80091de:	431a      	orrs	r2, r3
 80091e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091e4:	69db      	ldr	r3, [r3, #28]
 80091e6:	4313      	orrs	r3, r2
 80091e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80091ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80091f8:	f021 010c 	bic.w	r1, r1, #12
 80091fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009206:	430b      	orrs	r3, r1
 8009208:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800920a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	695b      	ldr	r3, [r3, #20]
 8009212:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009216:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800921a:	6999      	ldr	r1, [r3, #24]
 800921c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	ea40 0301 	orr.w	r3, r0, r1
 8009226:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	4b8f      	ldr	r3, [pc, #572]	; (800946c <UART_SetConfig+0x2cc>)
 8009230:	429a      	cmp	r2, r3
 8009232:	d005      	beq.n	8009240 <UART_SetConfig+0xa0>
 8009234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	4b8d      	ldr	r3, [pc, #564]	; (8009470 <UART_SetConfig+0x2d0>)
 800923c:	429a      	cmp	r2, r3
 800923e:	d104      	bne.n	800924a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009240:	f7fd fc3e 	bl	8006ac0 <HAL_RCC_GetPCLK2Freq>
 8009244:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009248:	e003      	b.n	8009252 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800924a:	f7fd fc25 	bl	8006a98 <HAL_RCC_GetPCLK1Freq>
 800924e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009256:	69db      	ldr	r3, [r3, #28]
 8009258:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800925c:	f040 810c 	bne.w	8009478 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009260:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009264:	2200      	movs	r2, #0
 8009266:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800926a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800926e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009272:	4622      	mov	r2, r4
 8009274:	462b      	mov	r3, r5
 8009276:	1891      	adds	r1, r2, r2
 8009278:	65b9      	str	r1, [r7, #88]	; 0x58
 800927a:	415b      	adcs	r3, r3
 800927c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800927e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009282:	4621      	mov	r1, r4
 8009284:	eb12 0801 	adds.w	r8, r2, r1
 8009288:	4629      	mov	r1, r5
 800928a:	eb43 0901 	adc.w	r9, r3, r1
 800928e:	f04f 0200 	mov.w	r2, #0
 8009292:	f04f 0300 	mov.w	r3, #0
 8009296:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800929a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800929e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80092a2:	4690      	mov	r8, r2
 80092a4:	4699      	mov	r9, r3
 80092a6:	4623      	mov	r3, r4
 80092a8:	eb18 0303 	adds.w	r3, r8, r3
 80092ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80092b0:	462b      	mov	r3, r5
 80092b2:	eb49 0303 	adc.w	r3, r9, r3
 80092b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80092ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	2200      	movs	r2, #0
 80092c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80092c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80092ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80092ce:	460b      	mov	r3, r1
 80092d0:	18db      	adds	r3, r3, r3
 80092d2:	653b      	str	r3, [r7, #80]	; 0x50
 80092d4:	4613      	mov	r3, r2
 80092d6:	eb42 0303 	adc.w	r3, r2, r3
 80092da:	657b      	str	r3, [r7, #84]	; 0x54
 80092dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80092e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80092e4:	f7f7 fcb8 	bl	8000c58 <__aeabi_uldivmod>
 80092e8:	4602      	mov	r2, r0
 80092ea:	460b      	mov	r3, r1
 80092ec:	4b61      	ldr	r3, [pc, #388]	; (8009474 <UART_SetConfig+0x2d4>)
 80092ee:	fba3 2302 	umull	r2, r3, r3, r2
 80092f2:	095b      	lsrs	r3, r3, #5
 80092f4:	011c      	lsls	r4, r3, #4
 80092f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092fa:	2200      	movs	r2, #0
 80092fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009300:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009304:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009308:	4642      	mov	r2, r8
 800930a:	464b      	mov	r3, r9
 800930c:	1891      	adds	r1, r2, r2
 800930e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009310:	415b      	adcs	r3, r3
 8009312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009314:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009318:	4641      	mov	r1, r8
 800931a:	eb12 0a01 	adds.w	sl, r2, r1
 800931e:	4649      	mov	r1, r9
 8009320:	eb43 0b01 	adc.w	fp, r3, r1
 8009324:	f04f 0200 	mov.w	r2, #0
 8009328:	f04f 0300 	mov.w	r3, #0
 800932c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009330:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009338:	4692      	mov	sl, r2
 800933a:	469b      	mov	fp, r3
 800933c:	4643      	mov	r3, r8
 800933e:	eb1a 0303 	adds.w	r3, sl, r3
 8009342:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009346:	464b      	mov	r3, r9
 8009348:	eb4b 0303 	adc.w	r3, fp, r3
 800934c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009354:	685b      	ldr	r3, [r3, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800935c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009360:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009364:	460b      	mov	r3, r1
 8009366:	18db      	adds	r3, r3, r3
 8009368:	643b      	str	r3, [r7, #64]	; 0x40
 800936a:	4613      	mov	r3, r2
 800936c:	eb42 0303 	adc.w	r3, r2, r3
 8009370:	647b      	str	r3, [r7, #68]	; 0x44
 8009372:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009376:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800937a:	f7f7 fc6d 	bl	8000c58 <__aeabi_uldivmod>
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	4611      	mov	r1, r2
 8009384:	4b3b      	ldr	r3, [pc, #236]	; (8009474 <UART_SetConfig+0x2d4>)
 8009386:	fba3 2301 	umull	r2, r3, r3, r1
 800938a:	095b      	lsrs	r3, r3, #5
 800938c:	2264      	movs	r2, #100	; 0x64
 800938e:	fb02 f303 	mul.w	r3, r2, r3
 8009392:	1acb      	subs	r3, r1, r3
 8009394:	00db      	lsls	r3, r3, #3
 8009396:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800939a:	4b36      	ldr	r3, [pc, #216]	; (8009474 <UART_SetConfig+0x2d4>)
 800939c:	fba3 2302 	umull	r2, r3, r3, r2
 80093a0:	095b      	lsrs	r3, r3, #5
 80093a2:	005b      	lsls	r3, r3, #1
 80093a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80093a8:	441c      	add	r4, r3
 80093aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093ae:	2200      	movs	r2, #0
 80093b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80093b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80093b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80093bc:	4642      	mov	r2, r8
 80093be:	464b      	mov	r3, r9
 80093c0:	1891      	adds	r1, r2, r2
 80093c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80093c4:	415b      	adcs	r3, r3
 80093c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80093cc:	4641      	mov	r1, r8
 80093ce:	1851      	adds	r1, r2, r1
 80093d0:	6339      	str	r1, [r7, #48]	; 0x30
 80093d2:	4649      	mov	r1, r9
 80093d4:	414b      	adcs	r3, r1
 80093d6:	637b      	str	r3, [r7, #52]	; 0x34
 80093d8:	f04f 0200 	mov.w	r2, #0
 80093dc:	f04f 0300 	mov.w	r3, #0
 80093e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80093e4:	4659      	mov	r1, fp
 80093e6:	00cb      	lsls	r3, r1, #3
 80093e8:	4651      	mov	r1, sl
 80093ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093ee:	4651      	mov	r1, sl
 80093f0:	00ca      	lsls	r2, r1, #3
 80093f2:	4610      	mov	r0, r2
 80093f4:	4619      	mov	r1, r3
 80093f6:	4603      	mov	r3, r0
 80093f8:	4642      	mov	r2, r8
 80093fa:	189b      	adds	r3, r3, r2
 80093fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009400:	464b      	mov	r3, r9
 8009402:	460a      	mov	r2, r1
 8009404:	eb42 0303 	adc.w	r3, r2, r3
 8009408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800940c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009418:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800941c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009420:	460b      	mov	r3, r1
 8009422:	18db      	adds	r3, r3, r3
 8009424:	62bb      	str	r3, [r7, #40]	; 0x28
 8009426:	4613      	mov	r3, r2
 8009428:	eb42 0303 	adc.w	r3, r2, r3
 800942c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800942e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009432:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009436:	f7f7 fc0f 	bl	8000c58 <__aeabi_uldivmod>
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	4b0d      	ldr	r3, [pc, #52]	; (8009474 <UART_SetConfig+0x2d4>)
 8009440:	fba3 1302 	umull	r1, r3, r3, r2
 8009444:	095b      	lsrs	r3, r3, #5
 8009446:	2164      	movs	r1, #100	; 0x64
 8009448:	fb01 f303 	mul.w	r3, r1, r3
 800944c:	1ad3      	subs	r3, r2, r3
 800944e:	00db      	lsls	r3, r3, #3
 8009450:	3332      	adds	r3, #50	; 0x32
 8009452:	4a08      	ldr	r2, [pc, #32]	; (8009474 <UART_SetConfig+0x2d4>)
 8009454:	fba2 2303 	umull	r2, r3, r2, r3
 8009458:	095b      	lsrs	r3, r3, #5
 800945a:	f003 0207 	and.w	r2, r3, #7
 800945e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4422      	add	r2, r4
 8009466:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009468:	e105      	b.n	8009676 <UART_SetConfig+0x4d6>
 800946a:	bf00      	nop
 800946c:	40011000 	.word	0x40011000
 8009470:	40011400 	.word	0x40011400
 8009474:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009478:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800947c:	2200      	movs	r2, #0
 800947e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009482:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009486:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800948a:	4642      	mov	r2, r8
 800948c:	464b      	mov	r3, r9
 800948e:	1891      	adds	r1, r2, r2
 8009490:	6239      	str	r1, [r7, #32]
 8009492:	415b      	adcs	r3, r3
 8009494:	627b      	str	r3, [r7, #36]	; 0x24
 8009496:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800949a:	4641      	mov	r1, r8
 800949c:	1854      	adds	r4, r2, r1
 800949e:	4649      	mov	r1, r9
 80094a0:	eb43 0501 	adc.w	r5, r3, r1
 80094a4:	f04f 0200 	mov.w	r2, #0
 80094a8:	f04f 0300 	mov.w	r3, #0
 80094ac:	00eb      	lsls	r3, r5, #3
 80094ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80094b2:	00e2      	lsls	r2, r4, #3
 80094b4:	4614      	mov	r4, r2
 80094b6:	461d      	mov	r5, r3
 80094b8:	4643      	mov	r3, r8
 80094ba:	18e3      	adds	r3, r4, r3
 80094bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80094c0:	464b      	mov	r3, r9
 80094c2:	eb45 0303 	adc.w	r3, r5, r3
 80094c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80094ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ce:	685b      	ldr	r3, [r3, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80094d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80094da:	f04f 0200 	mov.w	r2, #0
 80094de:	f04f 0300 	mov.w	r3, #0
 80094e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80094e6:	4629      	mov	r1, r5
 80094e8:	008b      	lsls	r3, r1, #2
 80094ea:	4621      	mov	r1, r4
 80094ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094f0:	4621      	mov	r1, r4
 80094f2:	008a      	lsls	r2, r1, #2
 80094f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80094f8:	f7f7 fbae 	bl	8000c58 <__aeabi_uldivmod>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4b60      	ldr	r3, [pc, #384]	; (8009684 <UART_SetConfig+0x4e4>)
 8009502:	fba3 2302 	umull	r2, r3, r3, r2
 8009506:	095b      	lsrs	r3, r3, #5
 8009508:	011c      	lsls	r4, r3, #4
 800950a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800950e:	2200      	movs	r2, #0
 8009510:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009514:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009518:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800951c:	4642      	mov	r2, r8
 800951e:	464b      	mov	r3, r9
 8009520:	1891      	adds	r1, r2, r2
 8009522:	61b9      	str	r1, [r7, #24]
 8009524:	415b      	adcs	r3, r3
 8009526:	61fb      	str	r3, [r7, #28]
 8009528:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800952c:	4641      	mov	r1, r8
 800952e:	1851      	adds	r1, r2, r1
 8009530:	6139      	str	r1, [r7, #16]
 8009532:	4649      	mov	r1, r9
 8009534:	414b      	adcs	r3, r1
 8009536:	617b      	str	r3, [r7, #20]
 8009538:	f04f 0200 	mov.w	r2, #0
 800953c:	f04f 0300 	mov.w	r3, #0
 8009540:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009544:	4659      	mov	r1, fp
 8009546:	00cb      	lsls	r3, r1, #3
 8009548:	4651      	mov	r1, sl
 800954a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800954e:	4651      	mov	r1, sl
 8009550:	00ca      	lsls	r2, r1, #3
 8009552:	4610      	mov	r0, r2
 8009554:	4619      	mov	r1, r3
 8009556:	4603      	mov	r3, r0
 8009558:	4642      	mov	r2, r8
 800955a:	189b      	adds	r3, r3, r2
 800955c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009560:	464b      	mov	r3, r9
 8009562:	460a      	mov	r2, r1
 8009564:	eb42 0303 	adc.w	r3, r2, r3
 8009568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800956c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	67bb      	str	r3, [r7, #120]	; 0x78
 8009576:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009578:	f04f 0200 	mov.w	r2, #0
 800957c:	f04f 0300 	mov.w	r3, #0
 8009580:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009584:	4649      	mov	r1, r9
 8009586:	008b      	lsls	r3, r1, #2
 8009588:	4641      	mov	r1, r8
 800958a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800958e:	4641      	mov	r1, r8
 8009590:	008a      	lsls	r2, r1, #2
 8009592:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009596:	f7f7 fb5f 	bl	8000c58 <__aeabi_uldivmod>
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	4b39      	ldr	r3, [pc, #228]	; (8009684 <UART_SetConfig+0x4e4>)
 80095a0:	fba3 1302 	umull	r1, r3, r3, r2
 80095a4:	095b      	lsrs	r3, r3, #5
 80095a6:	2164      	movs	r1, #100	; 0x64
 80095a8:	fb01 f303 	mul.w	r3, r1, r3
 80095ac:	1ad3      	subs	r3, r2, r3
 80095ae:	011b      	lsls	r3, r3, #4
 80095b0:	3332      	adds	r3, #50	; 0x32
 80095b2:	4a34      	ldr	r2, [pc, #208]	; (8009684 <UART_SetConfig+0x4e4>)
 80095b4:	fba2 2303 	umull	r2, r3, r2, r3
 80095b8:	095b      	lsrs	r3, r3, #5
 80095ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80095be:	441c      	add	r4, r3
 80095c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095c4:	2200      	movs	r2, #0
 80095c6:	673b      	str	r3, [r7, #112]	; 0x70
 80095c8:	677a      	str	r2, [r7, #116]	; 0x74
 80095ca:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80095ce:	4642      	mov	r2, r8
 80095d0:	464b      	mov	r3, r9
 80095d2:	1891      	adds	r1, r2, r2
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	415b      	adcs	r3, r3
 80095d8:	60fb      	str	r3, [r7, #12]
 80095da:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095de:	4641      	mov	r1, r8
 80095e0:	1851      	adds	r1, r2, r1
 80095e2:	6039      	str	r1, [r7, #0]
 80095e4:	4649      	mov	r1, r9
 80095e6:	414b      	adcs	r3, r1
 80095e8:	607b      	str	r3, [r7, #4]
 80095ea:	f04f 0200 	mov.w	r2, #0
 80095ee:	f04f 0300 	mov.w	r3, #0
 80095f2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80095f6:	4659      	mov	r1, fp
 80095f8:	00cb      	lsls	r3, r1, #3
 80095fa:	4651      	mov	r1, sl
 80095fc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009600:	4651      	mov	r1, sl
 8009602:	00ca      	lsls	r2, r1, #3
 8009604:	4610      	mov	r0, r2
 8009606:	4619      	mov	r1, r3
 8009608:	4603      	mov	r3, r0
 800960a:	4642      	mov	r2, r8
 800960c:	189b      	adds	r3, r3, r2
 800960e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009610:	464b      	mov	r3, r9
 8009612:	460a      	mov	r2, r1
 8009614:	eb42 0303 	adc.w	r3, r2, r3
 8009618:	66fb      	str	r3, [r7, #108]	; 0x6c
 800961a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800961e:	685b      	ldr	r3, [r3, #4]
 8009620:	2200      	movs	r2, #0
 8009622:	663b      	str	r3, [r7, #96]	; 0x60
 8009624:	667a      	str	r2, [r7, #100]	; 0x64
 8009626:	f04f 0200 	mov.w	r2, #0
 800962a:	f04f 0300 	mov.w	r3, #0
 800962e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009632:	4649      	mov	r1, r9
 8009634:	008b      	lsls	r3, r1, #2
 8009636:	4641      	mov	r1, r8
 8009638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800963c:	4641      	mov	r1, r8
 800963e:	008a      	lsls	r2, r1, #2
 8009640:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009644:	f7f7 fb08 	bl	8000c58 <__aeabi_uldivmod>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4b0d      	ldr	r3, [pc, #52]	; (8009684 <UART_SetConfig+0x4e4>)
 800964e:	fba3 1302 	umull	r1, r3, r3, r2
 8009652:	095b      	lsrs	r3, r3, #5
 8009654:	2164      	movs	r1, #100	; 0x64
 8009656:	fb01 f303 	mul.w	r3, r1, r3
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	011b      	lsls	r3, r3, #4
 800965e:	3332      	adds	r3, #50	; 0x32
 8009660:	4a08      	ldr	r2, [pc, #32]	; (8009684 <UART_SetConfig+0x4e4>)
 8009662:	fba2 2303 	umull	r2, r3, r2, r3
 8009666:	095b      	lsrs	r3, r3, #5
 8009668:	f003 020f 	and.w	r2, r3, #15
 800966c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4422      	add	r2, r4
 8009674:	609a      	str	r2, [r3, #8]
}
 8009676:	bf00      	nop
 8009678:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800967c:	46bd      	mov	sp, r7
 800967e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009682:	bf00      	nop
 8009684:	51eb851f 	.word	0x51eb851f

08009688 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800968c:	4904      	ldr	r1, [pc, #16]	; (80096a0 <MX_FATFS_Init+0x18>)
 800968e:	4805      	ldr	r0, [pc, #20]	; (80096a4 <MX_FATFS_Init+0x1c>)
 8009690:	f002 ff82 	bl	800c598 <FATFS_LinkDriver>
 8009694:	4603      	mov	r3, r0
 8009696:	461a      	mov	r2, r3
 8009698:	4b03      	ldr	r3, [pc, #12]	; (80096a8 <MX_FATFS_Init+0x20>)
 800969a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800969c:	bf00      	nop
 800969e:	bd80      	pop	{r7, pc}
 80096a0:	200034a8 	.word	0x200034a8
 80096a4:	2000028c 	.word	0x2000028c
 80096a8:	200034a4 	.word	0x200034a4

080096ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80096ac:	b480      	push	{r7}
 80096ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80096b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr

080096bc <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	4603      	mov	r3, r0
 80096c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
   // HAL_UART_Transmit(&huart6, (uint8_t*)"USER_initialize\r\n", 17, 0x1000);/////////////////////////////
	sd_ini();
 80096c6:	f7fa fc8d 	bl	8003fe4 <sd_ini>
	SD_PowerOn();
 80096ca:	f7fa fbe1 	bl	8003e90 <SD_PowerOn>
    if(sd_ini()==0) {Stat &= ~STA_NOINIT;} //Сбросим статус STA_NOINIT
 80096ce:	f7fa fc89 	bl	8003fe4 <sd_ini>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d107      	bne.n	80096e8 <USER_initialize+0x2c>
 80096d8:	4b07      	ldr	r3, [pc, #28]	; (80096f8 <USER_initialize+0x3c>)
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	f023 0301 	bic.w	r3, r3, #1
 80096e2:	b2da      	uxtb	r2, r3
 80096e4:	4b04      	ldr	r3, [pc, #16]	; (80096f8 <USER_initialize+0x3c>)
 80096e6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80096e8:	4b03      	ldr	r3, [pc, #12]	; (80096f8 <USER_initialize+0x3c>)
 80096ea:	781b      	ldrb	r3, [r3, #0]
 80096ec:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	20000289 	.word	0x20000289

080096fc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	4603      	mov	r3, r0
 8009704:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
    /////////////////////////////////////////////////////////////////////
    //HAL_UART_Transmit(&huart6, (uint8_t*)"USER_status\r\n", 13, 0x1000);
    if (pdrv) return STA_NOINIT;
 8009706:	79fb      	ldrb	r3, [r7, #7]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <USER_status+0x14>
 800970c:	2301      	movs	r3, #1
 800970e:	e002      	b.n	8009716 <USER_status+0x1a>
    /////////////////////////////////////////////////////////////////////
    return Stat;
 8009710:	4b04      	ldr	r3, [pc, #16]	; (8009724 <USER_status+0x28>)
 8009712:	781b      	ldrb	r3, [r3, #0]
 8009714:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8009716:	4618      	mov	r0, r3
 8009718:	370c      	adds	r7, #12
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr
 8009722:	bf00      	nop
 8009724:	20000289 	.word	0x20000289

08009728 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b084      	sub	sp, #16
 800972c:	af00      	add	r7, sp, #0
 800972e:	60b9      	str	r1, [r7, #8]
 8009730:	607a      	str	r2, [r7, #4]
 8009732:	603b      	str	r3, [r7, #0]
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	////////////////////////////////////////////////////////////////////
//	HAL_UART_Transmit(&huart6,(uint8_t*)"USER_read\r\n", 11, 0x1000);
//	sprintf(str1,"sector: %lu; count: %d\r\n", sector, count);
//	HAL_UART_Transmit(&huart6, (uint8_t*)str1, strlen(str1), 0x1000);
	if (pdrv || !count) return RES_PARERR;
 8009738:	7bfb      	ldrb	r3, [r7, #15]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d102      	bne.n	8009744 <USER_read+0x1c>
 800973e:	683b      	ldr	r3, [r7, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d101      	bne.n	8009748 <USER_read+0x20>
 8009744:	2304      	movs	r3, #4
 8009746:	e023      	b.n	8009790 <USER_read+0x68>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009748:	4b13      	ldr	r3, [pc, #76]	; (8009798 <USER_read+0x70>)
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	b2db      	uxtb	r3, r3
 800974e:	f003 0301 	and.w	r3, r3, #1
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <USER_read+0x32>
 8009756:	2303      	movs	r3, #3
 8009758:	e01a      	b.n	8009790 <USER_read+0x68>
	if (!(sdinfo.type &  4)) sector *= 512; /* Convert to byte address if needed */// вместо 4 -  CT_BLOCK   *=
 800975a:	4b10      	ldr	r3, [pc, #64]	; (800979c <USER_read+0x74>)
 800975c:	781b      	ldrb	r3, [r3, #0]
 800975e:	b2db      	uxtb	r3, r3
 8009760:	f003 0304 	and.w	r3, r3, #4
 8009764:	2b00      	cmp	r3, #0
 8009766:	d102      	bne.n	800976e <USER_read+0x46>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	025b      	lsls	r3, r3, #9
 800976c:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	2b01      	cmp	r3, #1
 8009772:	d105      	bne.n	8009780 <USER_read+0x58>
	{
	  SD_Read_Block(buff,sector); //Считаем блок в буфер
 8009774:	6879      	ldr	r1, [r7, #4]
 8009776:	68b8      	ldr	r0, [r7, #8]
 8009778:	f7fa fb9e 	bl	8003eb8 <SD_Read_Block>
	  count = 0;
 800977c:	2300      	movs	r3, #0
 800977e:	603b      	str	r3, [r7, #0]
	}
	else /* Multiple block read */
	{
	}
	SPI_Release();
 8009780:	f7fa faf4 	bl	8003d6c <SPI_Release>
	return count ? RES_ERROR : RES_OK;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	2b00      	cmp	r3, #0
 8009788:	bf14      	ite	ne
 800978a:	2301      	movne	r3, #1
 800978c:	2300      	moveq	r3, #0
 800978e:	b2db      	uxtb	r3, r3
	////////////////////////////////////////////////////////////////////
    return RES_OK;
  /* USER CODE END READ */
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}
 8009798:	20000289 	.word	0x20000289
 800979c:	20003498 	.word	0x20003498

080097a0 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b084      	sub	sp, #16
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60b9      	str	r1, [r7, #8]
 80097a8:	607a      	str	r2, [r7, #4]
 80097aa:	603b      	str	r3, [r7, #0]
 80097ac:	4603      	mov	r3, r0
 80097ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE HERE */
	///////////////////////////////////////////////////////////////////
//	HAL_UART_Transmit(&huart6, (uint8_t*)"USER_write\r\n", 12, 0x1000);
//	sprintf(str1, "sector: %lu\r\n", sector);
//	HAL_UART_Transmit(&huart6, (uint8_t*)str1, strlen(str1), 0x1000);
	if (pdrv || !count) return RES_PARERR;
 80097b0:	7bfb      	ldrb	r3, [r7, #15]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d102      	bne.n	80097bc <USER_write+0x1c>
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d101      	bne.n	80097c0 <USER_write+0x20>
 80097bc:	2304      	movs	r3, #4
 80097be:	e02c      	b.n	800981a <USER_write+0x7a>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 80097c0:	4b18      	ldr	r3, [pc, #96]	; (8009824 <USER_write+0x84>)
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	b2db      	uxtb	r3, r3
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <USER_write+0x32>
 80097ce:	2303      	movs	r3, #3
 80097d0:	e023      	b.n	800981a <USER_write+0x7a>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 80097d2:	4b14      	ldr	r3, [pc, #80]	; (8009824 <USER_write+0x84>)
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	f003 0304 	and.w	r3, r3, #4
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d001      	beq.n	80097e4 <USER_write+0x44>
 80097e0:	2302      	movs	r3, #2
 80097e2:	e01a      	b.n	800981a <USER_write+0x7a>
	if (!(sdinfo.type & 4)) sector *= 512; /* Convert to byte address if needed */
 80097e4:	4b10      	ldr	r3, [pc, #64]	; (8009828 <USER_write+0x88>)
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	f003 0304 	and.w	r3, r3, #4
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d102      	bne.n	80097f8 <USER_write+0x58>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	025b      	lsls	r3, r3, #9
 80097f6:	607b      	str	r3, [r7, #4]
	if (count == 1) /* Single block read */
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d105      	bne.n	800980a <USER_write+0x6a>
	{
		SD_Write_Block((BYTE*)buff,sector); //Считаем блок в буфер
 80097fe:	6879      	ldr	r1, [r7, #4]
 8009800:	68b8      	ldr	r0, [r7, #8]
 8009802:	f7fa fb9d 	bl	8003f40 <SD_Write_Block>
		count = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	603b      	str	r3, [r7, #0]
	}
	else /* Multiple block read */
	{
	}
	SPI_Release();
 800980a:	f7fa faaf 	bl	8003d6c <SPI_Release>
	return count ? RES_ERROR : RES_OK;
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	2b00      	cmp	r3, #0
 8009812:	bf14      	ite	ne
 8009814:	2301      	movne	r3, #1
 8009816:	2300      	moveq	r3, #0
 8009818:	b2db      	uxtb	r3, r3

	///////////////////////////////////////////////////////////////////
    //return RES_OK;
  /* USER CODE END WRITE */
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	20000289 	.word	0x20000289
 8009828:	20003498 	.word	0x20003498

0800982c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b084      	sub	sp, #16
 8009830:	af00      	add	r7, sp, #0
 8009832:	4603      	mov	r3, r0
 8009834:	603a      	str	r2, [r7, #0]
 8009836:	71fb      	strb	r3, [r7, #7]
 8009838:	460b      	mov	r3, r1
 800983a:	71bb      	strb	r3, [r7, #6]
    DRESULT res /*= RES_ERROR*/;
    ///////////////////////////////////////////////////////////////////
//  HAL_UART_Transmit(&huart6, (uint8_t*)"USER_ioctl\r\n", 12, 0x1000);
//  sprintf(str1,"cmd: %d\r\n",cmd);
//  HAL_UART_Transmit(&huart6, (uint8_t*)str1, strlen(str1), 0x1000);
    if (pdrv) return RES_PARERR;
 800983c:	79fb      	ldrb	r3, [r7, #7]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d001      	beq.n	8009846 <USER_ioctl+0x1a>
 8009842:	2304      	movs	r3, #4
 8009844:	e02b      	b.n	800989e <USER_ioctl+0x72>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009846:	4b18      	ldr	r3, [pc, #96]	; (80098a8 <USER_ioctl+0x7c>)
 8009848:	781b      	ldrb	r3, [r3, #0]
 800984a:	b2db      	uxtb	r3, r3
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	2b00      	cmp	r3, #0
 8009852:	d001      	beq.n	8009858 <USER_ioctl+0x2c>
 8009854:	2303      	movs	r3, #3
 8009856:	e022      	b.n	800989e <USER_ioctl+0x72>
    res = RES_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	73fb      	strb	r3, [r7, #15]
    switch (cmd)
 800985c:	79bb      	ldrb	r3, [r7, #6]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d002      	beq.n	8009868 <USER_ioctl+0x3c>
 8009862:	2b02      	cmp	r3, #2
 8009864:	d00d      	beq.n	8009882 <USER_ioctl+0x56>
 8009866:	e013      	b.n	8009890 <USER_ioctl+0x64>
    {
    case CTRL_SYNC : /* Flush dirty buffer if present */
      SS_SD_SELECT();
 8009868:	2200      	movs	r2, #0
 800986a:	2108      	movs	r1, #8
 800986c:	480f      	ldr	r0, [pc, #60]	; (80098ac <USER_ioctl+0x80>)
 800986e:	f7fc fcaf 	bl	80061d0 <HAL_GPIO_WritePin>
      if (SPI_wait_ready() == 0xFF)
 8009872:	f7fa fa82 	bl	8003d7a <SPI_wait_ready>
 8009876:	4603      	mov	r3, r0
 8009878:	2bff      	cmp	r3, #255	; 0xff
 800987a:	d10c      	bne.n	8009896 <USER_ioctl+0x6a>
      res = RES_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	73fb      	strb	r3, [r7, #15]
      break;
 8009880:	e009      	b.n	8009896 <USER_ioctl+0x6a>
    case GET_SECTOR_SIZE : /* Get sectors on the disk (WORD) */
    	*(WORD*)buff = 512;
 8009882:	683b      	ldr	r3, [r7, #0]
 8009884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009888:	801a      	strh	r2, [r3, #0]
    	res = RES_OK;
 800988a:	2300      	movs	r3, #0
 800988c:	73fb      	strb	r3, [r7, #15]
    	break;
 800988e:	e003      	b.n	8009898 <USER_ioctl+0x6c>
    default:
    	res = RES_PARERR;
 8009890:	2304      	movs	r3, #4
 8009892:	73fb      	strb	r3, [r7, #15]
 8009894:	e000      	b.n	8009898 <USER_ioctl+0x6c>
      break;
 8009896:	bf00      	nop
    }
    SPI_Release();
 8009898:	f7fa fa68 	bl	8003d6c <SPI_Release>
    //////////////////////////////////////////////////////////////////
    return res;
 800989c:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800989e:	4618      	mov	r0, r3
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	20000289 	.word	0x20000289
 80098ac:	40020400 	.word	0x40020400

080098b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	4603      	mov	r3, r0
 80098b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80098ba:	79fb      	ldrb	r3, [r7, #7]
 80098bc:	4a08      	ldr	r2, [pc, #32]	; (80098e0 <disk_status+0x30>)
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4413      	add	r3, r2
 80098c2:	685b      	ldr	r3, [r3, #4]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	79fa      	ldrb	r2, [r7, #7]
 80098c8:	4905      	ldr	r1, [pc, #20]	; (80098e0 <disk_status+0x30>)
 80098ca:	440a      	add	r2, r1
 80098cc:	7a12      	ldrb	r2, [r2, #8]
 80098ce:	4610      	mov	r0, r2
 80098d0:	4798      	blx	r3
 80098d2:	4603      	mov	r3, r0
 80098d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3710      	adds	r7, #16
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}
 80098e0:	200036d4 	.word	0x200036d4

080098e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	4603      	mov	r3, r0
 80098ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80098ee:	2300      	movs	r3, #0
 80098f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80098f2:	79fb      	ldrb	r3, [r7, #7]
 80098f4:	4a0d      	ldr	r2, [pc, #52]	; (800992c <disk_initialize+0x48>)
 80098f6:	5cd3      	ldrb	r3, [r2, r3]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d111      	bne.n	8009920 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80098fc:	79fb      	ldrb	r3, [r7, #7]
 80098fe:	4a0b      	ldr	r2, [pc, #44]	; (800992c <disk_initialize+0x48>)
 8009900:	2101      	movs	r1, #1
 8009902:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009904:	79fb      	ldrb	r3, [r7, #7]
 8009906:	4a09      	ldr	r2, [pc, #36]	; (800992c <disk_initialize+0x48>)
 8009908:	009b      	lsls	r3, r3, #2
 800990a:	4413      	add	r3, r2
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	79fa      	ldrb	r2, [r7, #7]
 8009912:	4906      	ldr	r1, [pc, #24]	; (800992c <disk_initialize+0x48>)
 8009914:	440a      	add	r2, r1
 8009916:	7a12      	ldrb	r2, [r2, #8]
 8009918:	4610      	mov	r0, r2
 800991a:	4798      	blx	r3
 800991c:	4603      	mov	r3, r0
 800991e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009920:	7bfb      	ldrb	r3, [r7, #15]
}
 8009922:	4618      	mov	r0, r3
 8009924:	3710      	adds	r7, #16
 8009926:	46bd      	mov	sp, r7
 8009928:	bd80      	pop	{r7, pc}
 800992a:	bf00      	nop
 800992c:	200036d4 	.word	0x200036d4

08009930 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009930:	b590      	push	{r4, r7, lr}
 8009932:	b087      	sub	sp, #28
 8009934:	af00      	add	r7, sp, #0
 8009936:	60b9      	str	r1, [r7, #8]
 8009938:	607a      	str	r2, [r7, #4]
 800993a:	603b      	str	r3, [r7, #0]
 800993c:	4603      	mov	r3, r0
 800993e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009940:	7bfb      	ldrb	r3, [r7, #15]
 8009942:	4a0a      	ldr	r2, [pc, #40]	; (800996c <disk_read+0x3c>)
 8009944:	009b      	lsls	r3, r3, #2
 8009946:	4413      	add	r3, r2
 8009948:	685b      	ldr	r3, [r3, #4]
 800994a:	689c      	ldr	r4, [r3, #8]
 800994c:	7bfb      	ldrb	r3, [r7, #15]
 800994e:	4a07      	ldr	r2, [pc, #28]	; (800996c <disk_read+0x3c>)
 8009950:	4413      	add	r3, r2
 8009952:	7a18      	ldrb	r0, [r3, #8]
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	687a      	ldr	r2, [r7, #4]
 8009958:	68b9      	ldr	r1, [r7, #8]
 800995a:	47a0      	blx	r4
 800995c:	4603      	mov	r3, r0
 800995e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009960:	7dfb      	ldrb	r3, [r7, #23]
}
 8009962:	4618      	mov	r0, r3
 8009964:	371c      	adds	r7, #28
 8009966:	46bd      	mov	sp, r7
 8009968:	bd90      	pop	{r4, r7, pc}
 800996a:	bf00      	nop
 800996c:	200036d4 	.word	0x200036d4

08009970 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009970:	b590      	push	{r4, r7, lr}
 8009972:	b087      	sub	sp, #28
 8009974:	af00      	add	r7, sp, #0
 8009976:	60b9      	str	r1, [r7, #8]
 8009978:	607a      	str	r2, [r7, #4]
 800997a:	603b      	str	r3, [r7, #0]
 800997c:	4603      	mov	r3, r0
 800997e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	4a0a      	ldr	r2, [pc, #40]	; (80099ac <disk_write+0x3c>)
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	4413      	add	r3, r2
 8009988:	685b      	ldr	r3, [r3, #4]
 800998a:	68dc      	ldr	r4, [r3, #12]
 800998c:	7bfb      	ldrb	r3, [r7, #15]
 800998e:	4a07      	ldr	r2, [pc, #28]	; (80099ac <disk_write+0x3c>)
 8009990:	4413      	add	r3, r2
 8009992:	7a18      	ldrb	r0, [r3, #8]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	687a      	ldr	r2, [r7, #4]
 8009998:	68b9      	ldr	r1, [r7, #8]
 800999a:	47a0      	blx	r4
 800999c:	4603      	mov	r3, r0
 800999e:	75fb      	strb	r3, [r7, #23]
  return res;
 80099a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	371c      	adds	r7, #28
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd90      	pop	{r4, r7, pc}
 80099aa:	bf00      	nop
 80099ac:	200036d4 	.word	0x200036d4

080099b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	4603      	mov	r3, r0
 80099b8:	603a      	str	r2, [r7, #0]
 80099ba:	71fb      	strb	r3, [r7, #7]
 80099bc:	460b      	mov	r3, r1
 80099be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80099c0:	79fb      	ldrb	r3, [r7, #7]
 80099c2:	4a09      	ldr	r2, [pc, #36]	; (80099e8 <disk_ioctl+0x38>)
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	4413      	add	r3, r2
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	691b      	ldr	r3, [r3, #16]
 80099cc:	79fa      	ldrb	r2, [r7, #7]
 80099ce:	4906      	ldr	r1, [pc, #24]	; (80099e8 <disk_ioctl+0x38>)
 80099d0:	440a      	add	r2, r1
 80099d2:	7a10      	ldrb	r0, [r2, #8]
 80099d4:	79b9      	ldrb	r1, [r7, #6]
 80099d6:	683a      	ldr	r2, [r7, #0]
 80099d8:	4798      	blx	r3
 80099da:	4603      	mov	r3, r0
 80099dc:	73fb      	strb	r3, [r7, #15]
  return res;
 80099de:	7bfb      	ldrb	r3, [r7, #15]
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3710      	adds	r7, #16
 80099e4:	46bd      	mov	sp, r7
 80099e6:	bd80      	pop	{r7, pc}
 80099e8:	200036d4 	.word	0x200036d4

080099ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	3301      	adds	r3, #1
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80099fc:	89fb      	ldrh	r3, [r7, #14]
 80099fe:	021b      	lsls	r3, r3, #8
 8009a00:	b21a      	sxth	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	781b      	ldrb	r3, [r3, #0]
 8009a06:	b21b      	sxth	r3, r3
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	b21b      	sxth	r3, r3
 8009a0c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009a0e:	89fb      	ldrh	r3, [r7, #14]
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3714      	adds	r7, #20
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	3303      	adds	r3, #3
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	021b      	lsls	r3, r3, #8
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	3202      	adds	r2, #2
 8009a34:	7812      	ldrb	r2, [r2, #0]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	021b      	lsls	r3, r3, #8
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	3201      	adds	r2, #1
 8009a42:	7812      	ldrb	r2, [r2, #0]
 8009a44:	4313      	orrs	r3, r2
 8009a46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	021b      	lsls	r3, r3, #8
 8009a4c:	687a      	ldr	r2, [r7, #4]
 8009a4e:	7812      	ldrb	r2, [r2, #0]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	60fb      	str	r3, [r7, #12]
	return rv;
 8009a54:	68fb      	ldr	r3, [r7, #12]
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3714      	adds	r7, #20
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr

08009a62 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009a62:	b480      	push	{r7}
 8009a64:	b083      	sub	sp, #12
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	1c5a      	adds	r2, r3, #1
 8009a72:	607a      	str	r2, [r7, #4]
 8009a74:	887a      	ldrh	r2, [r7, #2]
 8009a76:	b2d2      	uxtb	r2, r2
 8009a78:	701a      	strb	r2, [r3, #0]
 8009a7a:	887b      	ldrh	r3, [r7, #2]
 8009a7c:	0a1b      	lsrs	r3, r3, #8
 8009a7e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	1c5a      	adds	r2, r3, #1
 8009a84:	607a      	str	r2, [r7, #4]
 8009a86:	887a      	ldrh	r2, [r7, #2]
 8009a88:	b2d2      	uxtb	r2, r2
 8009a8a:	701a      	strb	r2, [r3, #0]
}
 8009a8c:	bf00      	nop
 8009a8e:	370c      	adds	r7, #12
 8009a90:	46bd      	mov	sp, r7
 8009a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a96:	4770      	bx	lr

08009a98 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b083      	sub	sp, #12
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	1c5a      	adds	r2, r3, #1
 8009aa6:	607a      	str	r2, [r7, #4]
 8009aa8:	683a      	ldr	r2, [r7, #0]
 8009aaa:	b2d2      	uxtb	r2, r2
 8009aac:	701a      	strb	r2, [r3, #0]
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	0a1b      	lsrs	r3, r3, #8
 8009ab2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	1c5a      	adds	r2, r3, #1
 8009ab8:	607a      	str	r2, [r7, #4]
 8009aba:	683a      	ldr	r2, [r7, #0]
 8009abc:	b2d2      	uxtb	r2, r2
 8009abe:	701a      	strb	r2, [r3, #0]
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	0a1b      	lsrs	r3, r3, #8
 8009ac4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	1c5a      	adds	r2, r3, #1
 8009aca:	607a      	str	r2, [r7, #4]
 8009acc:	683a      	ldr	r2, [r7, #0]
 8009ace:	b2d2      	uxtb	r2, r2
 8009ad0:	701a      	strb	r2, [r3, #0]
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	0a1b      	lsrs	r3, r3, #8
 8009ad6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	1c5a      	adds	r2, r3, #1
 8009adc:	607a      	str	r2, [r7, #4]
 8009ade:	683a      	ldr	r2, [r7, #0]
 8009ae0:	b2d2      	uxtb	r2, r2
 8009ae2:	701a      	strb	r2, [r3, #0]
}
 8009ae4:	bf00      	nop
 8009ae6:	370c      	adds	r7, #12
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009af0:	b480      	push	{r7}
 8009af2:	b087      	sub	sp, #28
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00d      	beq.n	8009b26 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009b0a:	693a      	ldr	r2, [r7, #16]
 8009b0c:	1c53      	adds	r3, r2, #1
 8009b0e:	613b      	str	r3, [r7, #16]
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	1c59      	adds	r1, r3, #1
 8009b14:	6179      	str	r1, [r7, #20]
 8009b16:	7812      	ldrb	r2, [r2, #0]
 8009b18:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	3b01      	subs	r3, #1
 8009b1e:	607b      	str	r3, [r7, #4]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d1f1      	bne.n	8009b0a <mem_cpy+0x1a>
	}
}
 8009b26:	bf00      	nop
 8009b28:	371c      	adds	r7, #28
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b30:	4770      	bx	lr

08009b32 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009b32:	b480      	push	{r7}
 8009b34:	b087      	sub	sp, #28
 8009b36:	af00      	add	r7, sp, #0
 8009b38:	60f8      	str	r0, [r7, #12]
 8009b3a:	60b9      	str	r1, [r7, #8]
 8009b3c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009b42:	697b      	ldr	r3, [r7, #20]
 8009b44:	1c5a      	adds	r2, r3, #1
 8009b46:	617a      	str	r2, [r7, #20]
 8009b48:	68ba      	ldr	r2, [r7, #8]
 8009b4a:	b2d2      	uxtb	r2, r2
 8009b4c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	3b01      	subs	r3, #1
 8009b52:	607b      	str	r3, [r7, #4]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d1f3      	bne.n	8009b42 <mem_set+0x10>
}
 8009b5a:	bf00      	nop
 8009b5c:	bf00      	nop
 8009b5e:	371c      	adds	r7, #28
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009b68:	b480      	push	{r7}
 8009b6a:	b089      	sub	sp, #36	; 0x24
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	60f8      	str	r0, [r7, #12]
 8009b70:	60b9      	str	r1, [r7, #8]
 8009b72:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	61fb      	str	r3, [r7, #28]
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	1c5a      	adds	r2, r3, #1
 8009b84:	61fa      	str	r2, [r7, #28]
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	4619      	mov	r1, r3
 8009b8a:	69bb      	ldr	r3, [r7, #24]
 8009b8c:	1c5a      	adds	r2, r3, #1
 8009b8e:	61ba      	str	r2, [r7, #24]
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	1acb      	subs	r3, r1, r3
 8009b94:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	607b      	str	r3, [r7, #4]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d002      	beq.n	8009ba8 <mem_cmp+0x40>
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d0eb      	beq.n	8009b80 <mem_cmp+0x18>

	return r;
 8009ba8:	697b      	ldr	r3, [r7, #20]
}
 8009baa:	4618      	mov	r0, r3
 8009bac:	3724      	adds	r7, #36	; 0x24
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr

08009bb6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009bb6:	b480      	push	{r7}
 8009bb8:	b083      	sub	sp, #12
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
 8009bbe:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009bc0:	e002      	b.n	8009bc8 <chk_chr+0x12>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	3301      	adds	r3, #1
 8009bc6:	607b      	str	r3, [r7, #4]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d005      	beq.n	8009bdc <chk_chr+0x26>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	781b      	ldrb	r3, [r3, #0]
 8009bd4:	461a      	mov	r2, r3
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d1f2      	bne.n	8009bc2 <chk_chr+0xc>
	return *str;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	781b      	ldrb	r3, [r3, #0]
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	370c      	adds	r7, #12
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr

08009bec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	60bb      	str	r3, [r7, #8]
 8009bfa:	68bb      	ldr	r3, [r7, #8]
 8009bfc:	60fb      	str	r3, [r7, #12]
 8009bfe:	e029      	b.n	8009c54 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009c00:	4a27      	ldr	r2, [pc, #156]	; (8009ca0 <chk_lock+0xb4>)
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	011b      	lsls	r3, r3, #4
 8009c06:	4413      	add	r3, r2
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d01d      	beq.n	8009c4a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c0e:	4a24      	ldr	r2, [pc, #144]	; (8009ca0 <chk_lock+0xb4>)
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	011b      	lsls	r3, r3, #4
 8009c14:	4413      	add	r3, r2
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d116      	bne.n	8009c4e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009c20:	4a1f      	ldr	r2, [pc, #124]	; (8009ca0 <chk_lock+0xb4>)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	011b      	lsls	r3, r3, #4
 8009c26:	4413      	add	r3, r2
 8009c28:	3304      	adds	r3, #4
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d10c      	bne.n	8009c4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c34:	4a1a      	ldr	r2, [pc, #104]	; (8009ca0 <chk_lock+0xb4>)
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	011b      	lsls	r3, r3, #4
 8009c3a:	4413      	add	r3, r2
 8009c3c:	3308      	adds	r3, #8
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d102      	bne.n	8009c4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009c48:	e007      	b.n	8009c5a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	3301      	adds	r3, #1
 8009c52:	60fb      	str	r3, [r7, #12]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d9d2      	bls.n	8009c00 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2b02      	cmp	r3, #2
 8009c5e:	d109      	bne.n	8009c74 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d102      	bne.n	8009c6c <chk_lock+0x80>
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b02      	cmp	r3, #2
 8009c6a:	d101      	bne.n	8009c70 <chk_lock+0x84>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	e010      	b.n	8009c92 <chk_lock+0xa6>
 8009c70:	2312      	movs	r3, #18
 8009c72:	e00e      	b.n	8009c92 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d108      	bne.n	8009c8c <chk_lock+0xa0>
 8009c7a:	4a09      	ldr	r2, [pc, #36]	; (8009ca0 <chk_lock+0xb4>)
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	011b      	lsls	r3, r3, #4
 8009c80:	4413      	add	r3, r2
 8009c82:	330c      	adds	r3, #12
 8009c84:	881b      	ldrh	r3, [r3, #0]
 8009c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c8a:	d101      	bne.n	8009c90 <chk_lock+0xa4>
 8009c8c:	2310      	movs	r3, #16
 8009c8e:	e000      	b.n	8009c92 <chk_lock+0xa6>
 8009c90:	2300      	movs	r3, #0
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	3714      	adds	r7, #20
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	200034b4 	.word	0x200034b4

08009ca4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009caa:	2300      	movs	r3, #0
 8009cac:	607b      	str	r3, [r7, #4]
 8009cae:	e002      	b.n	8009cb6 <enq_lock+0x12>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	607b      	str	r3, [r7, #4]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d806      	bhi.n	8009cca <enq_lock+0x26>
 8009cbc:	4a09      	ldr	r2, [pc, #36]	; (8009ce4 <enq_lock+0x40>)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	011b      	lsls	r3, r3, #4
 8009cc2:	4413      	add	r3, r2
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d1f2      	bne.n	8009cb0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2b02      	cmp	r3, #2
 8009cce:	bf14      	ite	ne
 8009cd0:	2301      	movne	r3, #1
 8009cd2:	2300      	moveq	r3, #0
 8009cd4:	b2db      	uxtb	r3, r3
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	370c      	adds	r7, #12
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce0:	4770      	bx	lr
 8009ce2:	bf00      	nop
 8009ce4:	200034b4 	.word	0x200034b4

08009ce8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b085      	sub	sp, #20
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	60fb      	str	r3, [r7, #12]
 8009cf6:	e01f      	b.n	8009d38 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009cf8:	4a41      	ldr	r2, [pc, #260]	; (8009e00 <inc_lock+0x118>)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	011b      	lsls	r3, r3, #4
 8009cfe:	4413      	add	r3, r2
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d113      	bne.n	8009d32 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009d0a:	4a3d      	ldr	r2, [pc, #244]	; (8009e00 <inc_lock+0x118>)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	011b      	lsls	r3, r3, #4
 8009d10:	4413      	add	r3, r2
 8009d12:	3304      	adds	r3, #4
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009d1a:	429a      	cmp	r2, r3
 8009d1c:	d109      	bne.n	8009d32 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009d1e:	4a38      	ldr	r2, [pc, #224]	; (8009e00 <inc_lock+0x118>)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	011b      	lsls	r3, r3, #4
 8009d24:	4413      	add	r3, r2
 8009d26:	3308      	adds	r3, #8
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d006      	beq.n	8009d40 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	3301      	adds	r3, #1
 8009d36:	60fb      	str	r3, [r7, #12]
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d9dc      	bls.n	8009cf8 <inc_lock+0x10>
 8009d3e:	e000      	b.n	8009d42 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009d40:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	d132      	bne.n	8009dae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	60fb      	str	r3, [r7, #12]
 8009d4c:	e002      	b.n	8009d54 <inc_lock+0x6c>
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	3301      	adds	r3, #1
 8009d52:	60fb      	str	r3, [r7, #12]
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d806      	bhi.n	8009d68 <inc_lock+0x80>
 8009d5a:	4a29      	ldr	r2, [pc, #164]	; (8009e00 <inc_lock+0x118>)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	011b      	lsls	r3, r3, #4
 8009d60:	4413      	add	r3, r2
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1f2      	bne.n	8009d4e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d101      	bne.n	8009d72 <inc_lock+0x8a>
 8009d6e:	2300      	movs	r3, #0
 8009d70:	e040      	b.n	8009df4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	4922      	ldr	r1, [pc, #136]	; (8009e00 <inc_lock+0x118>)
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	011b      	lsls	r3, r3, #4
 8009d7c:	440b      	add	r3, r1
 8009d7e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	689a      	ldr	r2, [r3, #8]
 8009d84:	491e      	ldr	r1, [pc, #120]	; (8009e00 <inc_lock+0x118>)
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	011b      	lsls	r3, r3, #4
 8009d8a:	440b      	add	r3, r1
 8009d8c:	3304      	adds	r3, #4
 8009d8e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	695a      	ldr	r2, [r3, #20]
 8009d94:	491a      	ldr	r1, [pc, #104]	; (8009e00 <inc_lock+0x118>)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	011b      	lsls	r3, r3, #4
 8009d9a:	440b      	add	r3, r1
 8009d9c:	3308      	adds	r3, #8
 8009d9e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009da0:	4a17      	ldr	r2, [pc, #92]	; (8009e00 <inc_lock+0x118>)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	011b      	lsls	r3, r3, #4
 8009da6:	4413      	add	r3, r2
 8009da8:	330c      	adds	r3, #12
 8009daa:	2200      	movs	r2, #0
 8009dac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d009      	beq.n	8009dc8 <inc_lock+0xe0>
 8009db4:	4a12      	ldr	r2, [pc, #72]	; (8009e00 <inc_lock+0x118>)
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	011b      	lsls	r3, r3, #4
 8009dba:	4413      	add	r3, r2
 8009dbc:	330c      	adds	r3, #12
 8009dbe:	881b      	ldrh	r3, [r3, #0]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d001      	beq.n	8009dc8 <inc_lock+0xe0>
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	e015      	b.n	8009df4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009dc8:	683b      	ldr	r3, [r7, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d108      	bne.n	8009de0 <inc_lock+0xf8>
 8009dce:	4a0c      	ldr	r2, [pc, #48]	; (8009e00 <inc_lock+0x118>)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	011b      	lsls	r3, r3, #4
 8009dd4:	4413      	add	r3, r2
 8009dd6:	330c      	adds	r3, #12
 8009dd8:	881b      	ldrh	r3, [r3, #0]
 8009dda:	3301      	adds	r3, #1
 8009ddc:	b29a      	uxth	r2, r3
 8009dde:	e001      	b.n	8009de4 <inc_lock+0xfc>
 8009de0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009de4:	4906      	ldr	r1, [pc, #24]	; (8009e00 <inc_lock+0x118>)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	011b      	lsls	r3, r3, #4
 8009dea:	440b      	add	r3, r1
 8009dec:	330c      	adds	r3, #12
 8009dee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	3301      	adds	r3, #1
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3714      	adds	r7, #20
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr
 8009e00:	200034b4 	.word	0x200034b4

08009e04 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	3b01      	subs	r3, #1
 8009e10:	607b      	str	r3, [r7, #4]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d825      	bhi.n	8009e64 <dec_lock+0x60>
		n = Files[i].ctr;
 8009e18:	4a17      	ldr	r2, [pc, #92]	; (8009e78 <dec_lock+0x74>)
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	011b      	lsls	r3, r3, #4
 8009e1e:	4413      	add	r3, r2
 8009e20:	330c      	adds	r3, #12
 8009e22:	881b      	ldrh	r3, [r3, #0]
 8009e24:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009e26:	89fb      	ldrh	r3, [r7, #14]
 8009e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e2c:	d101      	bne.n	8009e32 <dec_lock+0x2e>
 8009e2e:	2300      	movs	r3, #0
 8009e30:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009e32:	89fb      	ldrh	r3, [r7, #14]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d002      	beq.n	8009e3e <dec_lock+0x3a>
 8009e38:	89fb      	ldrh	r3, [r7, #14]
 8009e3a:	3b01      	subs	r3, #1
 8009e3c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009e3e:	4a0e      	ldr	r2, [pc, #56]	; (8009e78 <dec_lock+0x74>)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	011b      	lsls	r3, r3, #4
 8009e44:	4413      	add	r3, r2
 8009e46:	330c      	adds	r3, #12
 8009e48:	89fa      	ldrh	r2, [r7, #14]
 8009e4a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009e4c:	89fb      	ldrh	r3, [r7, #14]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d105      	bne.n	8009e5e <dec_lock+0x5a>
 8009e52:	4a09      	ldr	r2, [pc, #36]	; (8009e78 <dec_lock+0x74>)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	011b      	lsls	r3, r3, #4
 8009e58:	4413      	add	r3, r2
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	737b      	strb	r3, [r7, #13]
 8009e62:	e001      	b.n	8009e68 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009e64:	2302      	movs	r3, #2
 8009e66:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009e68:	7b7b      	ldrb	r3, [r7, #13]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3714      	adds	r7, #20
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop
 8009e78:	200034b4 	.word	0x200034b4

08009e7c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b085      	sub	sp, #20
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009e84:	2300      	movs	r3, #0
 8009e86:	60fb      	str	r3, [r7, #12]
 8009e88:	e010      	b.n	8009eac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009e8a:	4a0d      	ldr	r2, [pc, #52]	; (8009ec0 <clear_lock+0x44>)
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	011b      	lsls	r3, r3, #4
 8009e90:	4413      	add	r3, r2
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d105      	bne.n	8009ea6 <clear_lock+0x2a>
 8009e9a:	4a09      	ldr	r2, [pc, #36]	; (8009ec0 <clear_lock+0x44>)
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	011b      	lsls	r3, r3, #4
 8009ea0:	4413      	add	r3, r2
 8009ea2:	2200      	movs	r2, #0
 8009ea4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	60fb      	str	r3, [r7, #12]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	2b01      	cmp	r3, #1
 8009eb0:	d9eb      	bls.n	8009e8a <clear_lock+0xe>
	}
}
 8009eb2:	bf00      	nop
 8009eb4:	bf00      	nop
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr
 8009ec0:	200034b4 	.word	0x200034b4

08009ec4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	78db      	ldrb	r3, [r3, #3]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d034      	beq.n	8009f42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009edc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	7858      	ldrb	r0, [r3, #1]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009ee8:	2301      	movs	r3, #1
 8009eea:	697a      	ldr	r2, [r7, #20]
 8009eec:	f7ff fd40 	bl	8009970 <disk_write>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d002      	beq.n	8009efc <sync_window+0x38>
			res = FR_DISK_ERR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	73fb      	strb	r3, [r7, #15]
 8009efa:	e022      	b.n	8009f42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	1ad2      	subs	r2, r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6a1b      	ldr	r3, [r3, #32]
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d217      	bcs.n	8009f42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	789b      	ldrb	r3, [r3, #2]
 8009f16:	613b      	str	r3, [r7, #16]
 8009f18:	e010      	b.n	8009f3c <sync_window+0x78>
					wsect += fs->fsize;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a1b      	ldr	r3, [r3, #32]
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	4413      	add	r3, r2
 8009f22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	7858      	ldrb	r0, [r3, #1]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009f2e:	2301      	movs	r3, #1
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	f7ff fd1d 	bl	8009970 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	613b      	str	r3, [r7, #16]
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d8eb      	bhi.n	8009f1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3718      	adds	r7, #24
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b084      	sub	sp, #16
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009f56:	2300      	movs	r3, #0
 8009f58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5e:	683a      	ldr	r2, [r7, #0]
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d01b      	beq.n	8009f9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f7ff ffad 	bl	8009ec4 <sync_window>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009f6e:	7bfb      	ldrb	r3, [r7, #15]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d113      	bne.n	8009f9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	7858      	ldrb	r0, [r3, #1]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8009f7e:	2301      	movs	r3, #1
 8009f80:	683a      	ldr	r2, [r7, #0]
 8009f82:	f7ff fcd5 	bl	8009930 <disk_read>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d004      	beq.n	8009f96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009f92:	2301      	movs	r3, #1
 8009f94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	683a      	ldr	r2, [r7, #0]
 8009f9a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8009f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
	...

08009fa8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	f7ff ff87 	bl	8009ec4 <sync_window>
 8009fb6:	4603      	mov	r3, r0
 8009fb8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009fba:	7bfb      	ldrb	r3, [r7, #15]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d159      	bne.n	800a074 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	781b      	ldrb	r3, [r3, #0]
 8009fc4:	2b03      	cmp	r3, #3
 8009fc6:	d149      	bne.n	800a05c <sync_fs+0xb4>
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	791b      	ldrb	r3, [r3, #4]
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d145      	bne.n	800a05c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	899b      	ldrh	r3, [r3, #12]
 8009fda:	461a      	mov	r2, r3
 8009fdc:	2100      	movs	r1, #0
 8009fde:	f7ff fda8 	bl	8009b32 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	3338      	adds	r3, #56	; 0x38
 8009fe6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009fea:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f7ff fd37 	bl	8009a62 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	3338      	adds	r3, #56	; 0x38
 8009ff8:	4921      	ldr	r1, [pc, #132]	; (800a080 <sync_fs+0xd8>)
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7ff fd4c 	bl	8009a98 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	3338      	adds	r3, #56	; 0x38
 800a004:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a008:	491e      	ldr	r1, [pc, #120]	; (800a084 <sync_fs+0xdc>)
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7ff fd44 	bl	8009a98 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	3338      	adds	r3, #56	; 0x38
 800a014:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	699b      	ldr	r3, [r3, #24]
 800a01c:	4619      	mov	r1, r3
 800a01e:	4610      	mov	r0, r2
 800a020:	f7ff fd3a 	bl	8009a98 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	3338      	adds	r3, #56	; 0x38
 800a028:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	695b      	ldr	r3, [r3, #20]
 800a030:	4619      	mov	r1, r3
 800a032:	4610      	mov	r0, r2
 800a034:	f7ff fd30 	bl	8009a98 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a03c:	1c5a      	adds	r2, r3, #1
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	7858      	ldrb	r0, [r3, #1]
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a050:	2301      	movs	r3, #1
 800a052:	f7ff fc8d 	bl	8009970 <disk_write>
			fs->fsi_flag = 0;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2200      	movs	r2, #0
 800a05a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	785b      	ldrb	r3, [r3, #1]
 800a060:	2200      	movs	r2, #0
 800a062:	2100      	movs	r1, #0
 800a064:	4618      	mov	r0, r3
 800a066:	f7ff fca3 	bl	80099b0 <disk_ioctl>
 800a06a:	4603      	mov	r3, r0
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d001      	beq.n	800a074 <sync_fs+0xcc>
 800a070:	2301      	movs	r3, #1
 800a072:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a074:	7bfb      	ldrb	r3, [r7, #15]
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	41615252 	.word	0x41615252
 800a084:	61417272 	.word	0x61417272

0800a088 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	3b02      	subs	r3, #2
 800a096:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	69db      	ldr	r3, [r3, #28]
 800a09c:	3b02      	subs	r3, #2
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d301      	bcc.n	800a0a8 <clust2sect+0x20>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	e008      	b.n	800a0ba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	895b      	ldrh	r3, [r3, #10]
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	fb03 f202 	mul.w	r2, r3, r2
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0b8:	4413      	add	r3, r2
}
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	370c      	adds	r7, #12
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr

0800a0c6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b086      	sub	sp, #24
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	6078      	str	r0, [r7, #4]
 800a0ce:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d904      	bls.n	800a0e6 <get_fat+0x20>
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	69db      	ldr	r3, [r3, #28]
 800a0e0:	683a      	ldr	r2, [r7, #0]
 800a0e2:	429a      	cmp	r2, r3
 800a0e4:	d302      	bcc.n	800a0ec <get_fat+0x26>
		val = 1;	/* Internal error */
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	617b      	str	r3, [r7, #20]
 800a0ea:	e0bb      	b.n	800a264 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a0ec:	f04f 33ff 	mov.w	r3, #4294967295
 800a0f0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	2b03      	cmp	r3, #3
 800a0f8:	f000 8083 	beq.w	800a202 <get_fat+0x13c>
 800a0fc:	2b03      	cmp	r3, #3
 800a0fe:	f300 80a7 	bgt.w	800a250 <get_fat+0x18a>
 800a102:	2b01      	cmp	r3, #1
 800a104:	d002      	beq.n	800a10c <get_fat+0x46>
 800a106:	2b02      	cmp	r3, #2
 800a108:	d056      	beq.n	800a1b8 <get_fat+0xf2>
 800a10a:	e0a1      	b.n	800a250 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	60fb      	str	r3, [r7, #12]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	085b      	lsrs	r3, r3, #1
 800a114:	68fa      	ldr	r2, [r7, #12]
 800a116:	4413      	add	r3, r2
 800a118:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	899b      	ldrh	r3, [r3, #12]
 800a122:	4619      	mov	r1, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	fbb3 f3f1 	udiv	r3, r3, r1
 800a12a:	4413      	add	r3, r2
 800a12c:	4619      	mov	r1, r3
 800a12e:	6938      	ldr	r0, [r7, #16]
 800a130:	f7ff ff0c 	bl	8009f4c <move_window>
 800a134:	4603      	mov	r3, r0
 800a136:	2b00      	cmp	r3, #0
 800a138:	f040 808d 	bne.w	800a256 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	1c5a      	adds	r2, r3, #1
 800a140:	60fa      	str	r2, [r7, #12]
 800a142:	693a      	ldr	r2, [r7, #16]
 800a144:	8992      	ldrh	r2, [r2, #12]
 800a146:	fbb3 f1f2 	udiv	r1, r3, r2
 800a14a:	fb01 f202 	mul.w	r2, r1, r2
 800a14e:	1a9b      	subs	r3, r3, r2
 800a150:	693a      	ldr	r2, [r7, #16]
 800a152:	4413      	add	r3, r2
 800a154:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a158:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	899b      	ldrh	r3, [r3, #12]
 800a162:	4619      	mov	r1, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	fbb3 f3f1 	udiv	r3, r3, r1
 800a16a:	4413      	add	r3, r2
 800a16c:	4619      	mov	r1, r3
 800a16e:	6938      	ldr	r0, [r7, #16]
 800a170:	f7ff feec 	bl	8009f4c <move_window>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d16f      	bne.n	800a25a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	899b      	ldrh	r3, [r3, #12]
 800a17e:	461a      	mov	r2, r3
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	fbb3 f1f2 	udiv	r1, r3, r2
 800a186:	fb01 f202 	mul.w	r2, r1, r2
 800a18a:	1a9b      	subs	r3, r3, r2
 800a18c:	693a      	ldr	r2, [r7, #16]
 800a18e:	4413      	add	r3, r2
 800a190:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a194:	021b      	lsls	r3, r3, #8
 800a196:	461a      	mov	r2, r3
 800a198:	68bb      	ldr	r3, [r7, #8]
 800a19a:	4313      	orrs	r3, r2
 800a19c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	f003 0301 	and.w	r3, r3, #1
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d002      	beq.n	800a1ae <get_fat+0xe8>
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	091b      	lsrs	r3, r3, #4
 800a1ac:	e002      	b.n	800a1b4 <get_fat+0xee>
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1b4:	617b      	str	r3, [r7, #20]
			break;
 800a1b6:	e055      	b.n	800a264 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	899b      	ldrh	r3, [r3, #12]
 800a1c0:	085b      	lsrs	r3, r3, #1
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	4619      	mov	r1, r3
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a1cc:	4413      	add	r3, r2
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	6938      	ldr	r0, [r7, #16]
 800a1d2:	f7ff febb 	bl	8009f4c <move_window>
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d140      	bne.n	800a25e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	005b      	lsls	r3, r3, #1
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	8992      	ldrh	r2, [r2, #12]
 800a1ea:	fbb3 f0f2 	udiv	r0, r3, r2
 800a1ee:	fb00 f202 	mul.w	r2, r0, r2
 800a1f2:	1a9b      	subs	r3, r3, r2
 800a1f4:	440b      	add	r3, r1
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f7ff fbf8 	bl	80099ec <ld_word>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	617b      	str	r3, [r7, #20]
			break;
 800a200:	e030      	b.n	800a264 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a206:	693b      	ldr	r3, [r7, #16]
 800a208:	899b      	ldrh	r3, [r3, #12]
 800a20a:	089b      	lsrs	r3, r3, #2
 800a20c:	b29b      	uxth	r3, r3
 800a20e:	4619      	mov	r1, r3
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	fbb3 f3f1 	udiv	r3, r3, r1
 800a216:	4413      	add	r3, r2
 800a218:	4619      	mov	r1, r3
 800a21a:	6938      	ldr	r0, [r7, #16]
 800a21c:	f7ff fe96 	bl	8009f4c <move_window>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d11d      	bne.n	800a262 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	009b      	lsls	r3, r3, #2
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	8992      	ldrh	r2, [r2, #12]
 800a234:	fbb3 f0f2 	udiv	r0, r3, r2
 800a238:	fb00 f202 	mul.w	r2, r0, r2
 800a23c:	1a9b      	subs	r3, r3, r2
 800a23e:	440b      	add	r3, r1
 800a240:	4618      	mov	r0, r3
 800a242:	f7ff fbeb 	bl	8009a1c <ld_dword>
 800a246:	4603      	mov	r3, r0
 800a248:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a24c:	617b      	str	r3, [r7, #20]
			break;
 800a24e:	e009      	b.n	800a264 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a250:	2301      	movs	r3, #1
 800a252:	617b      	str	r3, [r7, #20]
 800a254:	e006      	b.n	800a264 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a256:	bf00      	nop
 800a258:	e004      	b.n	800a264 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a25a:	bf00      	nop
 800a25c:	e002      	b.n	800a264 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a25e:	bf00      	nop
 800a260:	e000      	b.n	800a264 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a262:	bf00      	nop
		}
	}

	return val;
 800a264:	697b      	ldr	r3, [r7, #20]
}
 800a266:	4618      	mov	r0, r3
 800a268:	3718      	adds	r7, #24
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a26e:	b590      	push	{r4, r7, lr}
 800a270:	b089      	sub	sp, #36	; 0x24
 800a272:	af00      	add	r7, sp, #0
 800a274:	60f8      	str	r0, [r7, #12]
 800a276:	60b9      	str	r1, [r7, #8]
 800a278:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a27a:	2302      	movs	r3, #2
 800a27c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a27e:	68bb      	ldr	r3, [r7, #8]
 800a280:	2b01      	cmp	r3, #1
 800a282:	f240 8102 	bls.w	800a48a <put_fat+0x21c>
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	69db      	ldr	r3, [r3, #28]
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	429a      	cmp	r2, r3
 800a28e:	f080 80fc 	bcs.w	800a48a <put_fat+0x21c>
		switch (fs->fs_type) {
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	781b      	ldrb	r3, [r3, #0]
 800a296:	2b03      	cmp	r3, #3
 800a298:	f000 80b6 	beq.w	800a408 <put_fat+0x19a>
 800a29c:	2b03      	cmp	r3, #3
 800a29e:	f300 80fd 	bgt.w	800a49c <put_fat+0x22e>
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d003      	beq.n	800a2ae <put_fat+0x40>
 800a2a6:	2b02      	cmp	r3, #2
 800a2a8:	f000 8083 	beq.w	800a3b2 <put_fat+0x144>
 800a2ac:	e0f6      	b.n	800a49c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	61bb      	str	r3, [r7, #24]
 800a2b2:	69bb      	ldr	r3, [r7, #24]
 800a2b4:	085b      	lsrs	r3, r3, #1
 800a2b6:	69ba      	ldr	r2, [r7, #24]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	899b      	ldrh	r3, [r3, #12]
 800a2c4:	4619      	mov	r1, r3
 800a2c6:	69bb      	ldr	r3, [r7, #24]
 800a2c8:	fbb3 f3f1 	udiv	r3, r3, r1
 800a2cc:	4413      	add	r3, r2
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	68f8      	ldr	r0, [r7, #12]
 800a2d2:	f7ff fe3b 	bl	8009f4c <move_window>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a2da:	7ffb      	ldrb	r3, [r7, #31]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	f040 80d6 	bne.w	800a48e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	1c5a      	adds	r2, r3, #1
 800a2ec:	61ba      	str	r2, [r7, #24]
 800a2ee:	68fa      	ldr	r2, [r7, #12]
 800a2f0:	8992      	ldrh	r2, [r2, #12]
 800a2f2:	fbb3 f0f2 	udiv	r0, r3, r2
 800a2f6:	fb00 f202 	mul.w	r2, r0, r2
 800a2fa:	1a9b      	subs	r3, r3, r2
 800a2fc:	440b      	add	r3, r1
 800a2fe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	f003 0301 	and.w	r3, r3, #1
 800a306:	2b00      	cmp	r3, #0
 800a308:	d00d      	beq.n	800a326 <put_fat+0xb8>
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	781b      	ldrb	r3, [r3, #0]
 800a30e:	b25b      	sxtb	r3, r3
 800a310:	f003 030f 	and.w	r3, r3, #15
 800a314:	b25a      	sxtb	r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	b2db      	uxtb	r3, r3
 800a31a:	011b      	lsls	r3, r3, #4
 800a31c:	b25b      	sxtb	r3, r3
 800a31e:	4313      	orrs	r3, r2
 800a320:	b25b      	sxtb	r3, r3
 800a322:	b2db      	uxtb	r3, r3
 800a324:	e001      	b.n	800a32a <put_fat+0xbc>
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	b2db      	uxtb	r3, r3
 800a32a:	697a      	ldr	r2, [r7, #20]
 800a32c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2201      	movs	r2, #1
 800a332:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	899b      	ldrh	r3, [r3, #12]
 800a33c:	4619      	mov	r1, r3
 800a33e:	69bb      	ldr	r3, [r7, #24]
 800a340:	fbb3 f3f1 	udiv	r3, r3, r1
 800a344:	4413      	add	r3, r2
 800a346:	4619      	mov	r1, r3
 800a348:	68f8      	ldr	r0, [r7, #12]
 800a34a:	f7ff fdff 	bl	8009f4c <move_window>
 800a34e:	4603      	mov	r3, r0
 800a350:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a352:	7ffb      	ldrb	r3, [r7, #31]
 800a354:	2b00      	cmp	r3, #0
 800a356:	f040 809c 	bne.w	800a492 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	899b      	ldrh	r3, [r3, #12]
 800a364:	461a      	mov	r2, r3
 800a366:	69bb      	ldr	r3, [r7, #24]
 800a368:	fbb3 f0f2 	udiv	r0, r3, r2
 800a36c:	fb00 f202 	mul.w	r2, r0, r2
 800a370:	1a9b      	subs	r3, r3, r2
 800a372:	440b      	add	r3, r1
 800a374:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a376:	68bb      	ldr	r3, [r7, #8]
 800a378:	f003 0301 	and.w	r3, r3, #1
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d003      	beq.n	800a388 <put_fat+0x11a>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	091b      	lsrs	r3, r3, #4
 800a384:	b2db      	uxtb	r3, r3
 800a386:	e00e      	b.n	800a3a6 <put_fat+0x138>
 800a388:	697b      	ldr	r3, [r7, #20]
 800a38a:	781b      	ldrb	r3, [r3, #0]
 800a38c:	b25b      	sxtb	r3, r3
 800a38e:	f023 030f 	bic.w	r3, r3, #15
 800a392:	b25a      	sxtb	r2, r3
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	0a1b      	lsrs	r3, r3, #8
 800a398:	b25b      	sxtb	r3, r3
 800a39a:	f003 030f 	and.w	r3, r3, #15
 800a39e:	b25b      	sxtb	r3, r3
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	b25b      	sxtb	r3, r3
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	2201      	movs	r2, #1
 800a3ae:	70da      	strb	r2, [r3, #3]
			break;
 800a3b0:	e074      	b.n	800a49c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	899b      	ldrh	r3, [r3, #12]
 800a3ba:	085b      	lsrs	r3, r3, #1
 800a3bc:	b29b      	uxth	r3, r3
 800a3be:	4619      	mov	r1, r3
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800a3c6:	4413      	add	r3, r2
 800a3c8:	4619      	mov	r1, r3
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f7ff fdbe 	bl	8009f4c <move_window>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a3d4:	7ffb      	ldrb	r3, [r7, #31]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d15d      	bne.n	800a496 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a3e0:	68bb      	ldr	r3, [r7, #8]
 800a3e2:	005b      	lsls	r3, r3, #1
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	8992      	ldrh	r2, [r2, #12]
 800a3e8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a3ec:	fb00 f202 	mul.w	r2, r0, r2
 800a3f0:	1a9b      	subs	r3, r3, r2
 800a3f2:	440b      	add	r3, r1
 800a3f4:	687a      	ldr	r2, [r7, #4]
 800a3f6:	b292      	uxth	r2, r2
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7ff fb31 	bl	8009a62 <st_word>
			fs->wflag = 1;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2201      	movs	r2, #1
 800a404:	70da      	strb	r2, [r3, #3]
			break;
 800a406:	e049      	b.n	800a49c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	899b      	ldrh	r3, [r3, #12]
 800a410:	089b      	lsrs	r3, r3, #2
 800a412:	b29b      	uxth	r3, r3
 800a414:	4619      	mov	r1, r3
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	fbb3 f3f1 	udiv	r3, r3, r1
 800a41c:	4413      	add	r3, r2
 800a41e:	4619      	mov	r1, r3
 800a420:	68f8      	ldr	r0, [r7, #12]
 800a422:	f7ff fd93 	bl	8009f4c <move_window>
 800a426:	4603      	mov	r3, r0
 800a428:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a42a:	7ffb      	ldrb	r3, [r7, #31]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d134      	bne.n	800a49a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	009b      	lsls	r3, r3, #2
 800a440:	68fa      	ldr	r2, [r7, #12]
 800a442:	8992      	ldrh	r2, [r2, #12]
 800a444:	fbb3 f0f2 	udiv	r0, r3, r2
 800a448:	fb00 f202 	mul.w	r2, r0, r2
 800a44c:	1a9b      	subs	r3, r3, r2
 800a44e:	440b      	add	r3, r1
 800a450:	4618      	mov	r0, r3
 800a452:	f7ff fae3 	bl	8009a1c <ld_dword>
 800a456:	4603      	mov	r3, r0
 800a458:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a45c:	4323      	orrs	r3, r4
 800a45e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	68fa      	ldr	r2, [r7, #12]
 800a46c:	8992      	ldrh	r2, [r2, #12]
 800a46e:	fbb3 f0f2 	udiv	r0, r3, r2
 800a472:	fb00 f202 	mul.w	r2, r0, r2
 800a476:	1a9b      	subs	r3, r3, r2
 800a478:	440b      	add	r3, r1
 800a47a:	6879      	ldr	r1, [r7, #4]
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7ff fb0b 	bl	8009a98 <st_dword>
			fs->wflag = 1;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2201      	movs	r2, #1
 800a486:	70da      	strb	r2, [r3, #3]
			break;
 800a488:	e008      	b.n	800a49c <put_fat+0x22e>
		}
	}
 800a48a:	bf00      	nop
 800a48c:	e006      	b.n	800a49c <put_fat+0x22e>
			if (res != FR_OK) break;
 800a48e:	bf00      	nop
 800a490:	e004      	b.n	800a49c <put_fat+0x22e>
			if (res != FR_OK) break;
 800a492:	bf00      	nop
 800a494:	e002      	b.n	800a49c <put_fat+0x22e>
			if (res != FR_OK) break;
 800a496:	bf00      	nop
 800a498:	e000      	b.n	800a49c <put_fat+0x22e>
			if (res != FR_OK) break;
 800a49a:	bf00      	nop
	return res;
 800a49c:	7ffb      	ldrb	r3, [r7, #31]
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3724      	adds	r7, #36	; 0x24
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd90      	pop	{r4, r7, pc}

0800a4a6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b088      	sub	sp, #32
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	60f8      	str	r0, [r7, #12]
 800a4ae:	60b9      	str	r1, [r7, #8]
 800a4b0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a4bc:	68bb      	ldr	r3, [r7, #8]
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d904      	bls.n	800a4cc <remove_chain+0x26>
 800a4c2:	69bb      	ldr	r3, [r7, #24]
 800a4c4:	69db      	ldr	r3, [r3, #28]
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d301      	bcc.n	800a4d0 <remove_chain+0x2a>
 800a4cc:	2302      	movs	r3, #2
 800a4ce:	e04b      	b.n	800a568 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d00c      	beq.n	800a4f0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a4d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4da:	6879      	ldr	r1, [r7, #4]
 800a4dc:	69b8      	ldr	r0, [r7, #24]
 800a4de:	f7ff fec6 	bl	800a26e <put_fat>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a4e6:	7ffb      	ldrb	r3, [r7, #31]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d001      	beq.n	800a4f0 <remove_chain+0x4a>
 800a4ec:	7ffb      	ldrb	r3, [r7, #31]
 800a4ee:	e03b      	b.n	800a568 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a4f0:	68b9      	ldr	r1, [r7, #8]
 800a4f2:	68f8      	ldr	r0, [r7, #12]
 800a4f4:	f7ff fde7 	bl	800a0c6 <get_fat>
 800a4f8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d031      	beq.n	800a564 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a500:	697b      	ldr	r3, [r7, #20]
 800a502:	2b01      	cmp	r3, #1
 800a504:	d101      	bne.n	800a50a <remove_chain+0x64>
 800a506:	2302      	movs	r3, #2
 800a508:	e02e      	b.n	800a568 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a50a:	697b      	ldr	r3, [r7, #20]
 800a50c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a510:	d101      	bne.n	800a516 <remove_chain+0x70>
 800a512:	2301      	movs	r3, #1
 800a514:	e028      	b.n	800a568 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a516:	2200      	movs	r2, #0
 800a518:	68b9      	ldr	r1, [r7, #8]
 800a51a:	69b8      	ldr	r0, [r7, #24]
 800a51c:	f7ff fea7 	bl	800a26e <put_fat>
 800a520:	4603      	mov	r3, r0
 800a522:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a524:	7ffb      	ldrb	r3, [r7, #31]
 800a526:	2b00      	cmp	r3, #0
 800a528:	d001      	beq.n	800a52e <remove_chain+0x88>
 800a52a:	7ffb      	ldrb	r3, [r7, #31]
 800a52c:	e01c      	b.n	800a568 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a52e:	69bb      	ldr	r3, [r7, #24]
 800a530:	699a      	ldr	r2, [r3, #24]
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	69db      	ldr	r3, [r3, #28]
 800a536:	3b02      	subs	r3, #2
 800a538:	429a      	cmp	r2, r3
 800a53a:	d20b      	bcs.n	800a554 <remove_chain+0xae>
			fs->free_clst++;
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	699b      	ldr	r3, [r3, #24]
 800a540:	1c5a      	adds	r2, r3, #1
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	791b      	ldrb	r3, [r3, #4]
 800a54a:	f043 0301 	orr.w	r3, r3, #1
 800a54e:	b2da      	uxtb	r2, r3
 800a550:	69bb      	ldr	r3, [r7, #24]
 800a552:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a554:	697b      	ldr	r3, [r7, #20]
 800a556:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a558:	69bb      	ldr	r3, [r7, #24]
 800a55a:	69db      	ldr	r3, [r3, #28]
 800a55c:	68ba      	ldr	r2, [r7, #8]
 800a55e:	429a      	cmp	r2, r3
 800a560:	d3c6      	bcc.n	800a4f0 <remove_chain+0x4a>
 800a562:	e000      	b.n	800a566 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a564:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	4618      	mov	r0, r3
 800a56a:	3720      	adds	r7, #32
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b088      	sub	sp, #32
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d10d      	bne.n	800a5a2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a58c:	69bb      	ldr	r3, [r7, #24]
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d004      	beq.n	800a59c <create_chain+0x2c>
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	69db      	ldr	r3, [r3, #28]
 800a596:	69ba      	ldr	r2, [r7, #24]
 800a598:	429a      	cmp	r2, r3
 800a59a:	d31b      	bcc.n	800a5d4 <create_chain+0x64>
 800a59c:	2301      	movs	r3, #1
 800a59e:	61bb      	str	r3, [r7, #24]
 800a5a0:	e018      	b.n	800a5d4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a5a2:	6839      	ldr	r1, [r7, #0]
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f7ff fd8e 	bl	800a0c6 <get_fat>
 800a5aa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	2b01      	cmp	r3, #1
 800a5b0:	d801      	bhi.n	800a5b6 <create_chain+0x46>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e070      	b.n	800a698 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5bc:	d101      	bne.n	800a5c2 <create_chain+0x52>
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	e06a      	b.n	800a698 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a5c2:	693b      	ldr	r3, [r7, #16]
 800a5c4:	69db      	ldr	r3, [r3, #28]
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	429a      	cmp	r2, r3
 800a5ca:	d201      	bcs.n	800a5d0 <create_chain+0x60>
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	e063      	b.n	800a698 <create_chain+0x128>
		scl = clst;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a5d4:	69bb      	ldr	r3, [r7, #24]
 800a5d6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a5d8:	69fb      	ldr	r3, [r7, #28]
 800a5da:	3301      	adds	r3, #1
 800a5dc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	69db      	ldr	r3, [r3, #28]
 800a5e2:	69fa      	ldr	r2, [r7, #28]
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d307      	bcc.n	800a5f8 <create_chain+0x88>
				ncl = 2;
 800a5e8:	2302      	movs	r3, #2
 800a5ea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a5ec:	69fa      	ldr	r2, [r7, #28]
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d901      	bls.n	800a5f8 <create_chain+0x88>
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	e04f      	b.n	800a698 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a5f8:	69f9      	ldr	r1, [r7, #28]
 800a5fa:	6878      	ldr	r0, [r7, #4]
 800a5fc:	f7ff fd63 	bl	800a0c6 <get_fat>
 800a600:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d00e      	beq.n	800a626 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d003      	beq.n	800a616 <create_chain+0xa6>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a614:	d101      	bne.n	800a61a <create_chain+0xaa>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	e03e      	b.n	800a698 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a61a:	69fa      	ldr	r2, [r7, #28]
 800a61c:	69bb      	ldr	r3, [r7, #24]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d1da      	bne.n	800a5d8 <create_chain+0x68>
 800a622:	2300      	movs	r3, #0
 800a624:	e038      	b.n	800a698 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a626:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a628:	f04f 32ff 	mov.w	r2, #4294967295
 800a62c:	69f9      	ldr	r1, [r7, #28]
 800a62e:	6938      	ldr	r0, [r7, #16]
 800a630:	f7ff fe1d 	bl	800a26e <put_fat>
 800a634:	4603      	mov	r3, r0
 800a636:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a638:	7dfb      	ldrb	r3, [r7, #23]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d109      	bne.n	800a652 <create_chain+0xe2>
 800a63e:	683b      	ldr	r3, [r7, #0]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d006      	beq.n	800a652 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a644:	69fa      	ldr	r2, [r7, #28]
 800a646:	6839      	ldr	r1, [r7, #0]
 800a648:	6938      	ldr	r0, [r7, #16]
 800a64a:	f7ff fe10 	bl	800a26e <put_fat>
 800a64e:	4603      	mov	r3, r0
 800a650:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a652:	7dfb      	ldrb	r3, [r7, #23]
 800a654:	2b00      	cmp	r3, #0
 800a656:	d116      	bne.n	800a686 <create_chain+0x116>
		fs->last_clst = ncl;
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	69fa      	ldr	r2, [r7, #28]
 800a65c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	699a      	ldr	r2, [r3, #24]
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	69db      	ldr	r3, [r3, #28]
 800a666:	3b02      	subs	r3, #2
 800a668:	429a      	cmp	r2, r3
 800a66a:	d804      	bhi.n	800a676 <create_chain+0x106>
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	1e5a      	subs	r2, r3, #1
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	791b      	ldrb	r3, [r3, #4]
 800a67a:	f043 0301 	orr.w	r3, r3, #1
 800a67e:	b2da      	uxtb	r2, r3
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	711a      	strb	r2, [r3, #4]
 800a684:	e007      	b.n	800a696 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a686:	7dfb      	ldrb	r3, [r7, #23]
 800a688:	2b01      	cmp	r3, #1
 800a68a:	d102      	bne.n	800a692 <create_chain+0x122>
 800a68c:	f04f 33ff 	mov.w	r3, #4294967295
 800a690:	e000      	b.n	800a694 <create_chain+0x124>
 800a692:	2301      	movs	r3, #1
 800a694:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a696:	69fb      	ldr	r3, [r7, #28]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3720      	adds	r7, #32
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b087      	sub	sp, #28
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b4:	3304      	adds	r3, #4
 800a6b6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	899b      	ldrh	r3, [r3, #12]
 800a6bc:	461a      	mov	r2, r3
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6c4:	68fa      	ldr	r2, [r7, #12]
 800a6c6:	8952      	ldrh	r2, [r2, #10]
 800a6c8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6cc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a6ce:	693b      	ldr	r3, [r7, #16]
 800a6d0:	1d1a      	adds	r2, r3, #4
 800a6d2:	613a      	str	r2, [r7, #16]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d101      	bne.n	800a6e2 <clmt_clust+0x42>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	e010      	b.n	800a704 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800a6e2:	697a      	ldr	r2, [r7, #20]
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d307      	bcc.n	800a6fa <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800a6ea:	697a      	ldr	r2, [r7, #20]
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	617b      	str	r3, [r7, #20]
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	3304      	adds	r3, #4
 800a6f6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a6f8:	e7e9      	b.n	800a6ce <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800a6fa:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	4413      	add	r3, r2
}
 800a704:	4618      	mov	r0, r3
 800a706:	371c      	adds	r7, #28
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a726:	d204      	bcs.n	800a732 <dir_sdi+0x22>
 800a728:	683b      	ldr	r3, [r7, #0]
 800a72a:	f003 031f 	and.w	r3, r3, #31
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d001      	beq.n	800a736 <dir_sdi+0x26>
		return FR_INT_ERR;
 800a732:	2302      	movs	r3, #2
 800a734:	e071      	b.n	800a81a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	683a      	ldr	r2, [r7, #0]
 800a73a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d106      	bne.n	800a756 <dir_sdi+0x46>
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	2b02      	cmp	r3, #2
 800a74e:	d902      	bls.n	800a756 <dir_sdi+0x46>
		clst = fs->dirbase;
 800a750:	693b      	ldr	r3, [r7, #16]
 800a752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a754:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a756:	697b      	ldr	r3, [r7, #20]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d10c      	bne.n	800a776 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	095b      	lsrs	r3, r3, #5
 800a760:	693a      	ldr	r2, [r7, #16]
 800a762:	8912      	ldrh	r2, [r2, #8]
 800a764:	4293      	cmp	r3, r2
 800a766:	d301      	bcc.n	800a76c <dir_sdi+0x5c>
 800a768:	2302      	movs	r3, #2
 800a76a:	e056      	b.n	800a81a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	61da      	str	r2, [r3, #28]
 800a774:	e02d      	b.n	800a7d2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	895b      	ldrh	r3, [r3, #10]
 800a77a:	461a      	mov	r2, r3
 800a77c:	693b      	ldr	r3, [r7, #16]
 800a77e:	899b      	ldrh	r3, [r3, #12]
 800a780:	fb02 f303 	mul.w	r3, r2, r3
 800a784:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a786:	e019      	b.n	800a7bc <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	6979      	ldr	r1, [r7, #20]
 800a78c:	4618      	mov	r0, r3
 800a78e:	f7ff fc9a 	bl	800a0c6 <get_fat>
 800a792:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a79a:	d101      	bne.n	800a7a0 <dir_sdi+0x90>
 800a79c:	2301      	movs	r3, #1
 800a79e:	e03c      	b.n	800a81a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a7a0:	697b      	ldr	r3, [r7, #20]
 800a7a2:	2b01      	cmp	r3, #1
 800a7a4:	d904      	bls.n	800a7b0 <dir_sdi+0xa0>
 800a7a6:	693b      	ldr	r3, [r7, #16]
 800a7a8:	69db      	ldr	r3, [r3, #28]
 800a7aa:	697a      	ldr	r2, [r7, #20]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d301      	bcc.n	800a7b4 <dir_sdi+0xa4>
 800a7b0:	2302      	movs	r3, #2
 800a7b2:	e032      	b.n	800a81a <dir_sdi+0x10a>
			ofs -= csz;
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a7bc:	683a      	ldr	r2, [r7, #0]
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	429a      	cmp	r2, r3
 800a7c2:	d2e1      	bcs.n	800a788 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800a7c4:	6979      	ldr	r1, [r7, #20]
 800a7c6:	6938      	ldr	r0, [r7, #16]
 800a7c8:	f7ff fc5e 	bl	800a088 <clust2sect>
 800a7cc:	4602      	mov	r2, r0
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	697a      	ldr	r2, [r7, #20]
 800a7d6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	69db      	ldr	r3, [r3, #28]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d101      	bne.n	800a7e4 <dir_sdi+0xd4>
 800a7e0:	2302      	movs	r3, #2
 800a7e2:	e01a      	b.n	800a81a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	69da      	ldr	r2, [r3, #28]
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	899b      	ldrh	r3, [r3, #12]
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7f4:	441a      	add	r2, r3
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a7fa:	693b      	ldr	r3, [r7, #16]
 800a7fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	899b      	ldrh	r3, [r3, #12]
 800a804:	461a      	mov	r2, r3
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	fbb3 f0f2 	udiv	r0, r3, r2
 800a80c:	fb00 f202 	mul.w	r2, r0, r2
 800a810:	1a9b      	subs	r3, r3, r2
 800a812:	18ca      	adds	r2, r1, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a818:	2300      	movs	r3, #0
}
 800a81a:	4618      	mov	r0, r3
 800a81c:	3718      	adds	r7, #24
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd80      	pop	{r7, pc}

0800a822 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b086      	sub	sp, #24
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
 800a82a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	3320      	adds	r3, #32
 800a838:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	69db      	ldr	r3, [r3, #28]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d003      	beq.n	800a84a <dir_next+0x28>
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a848:	d301      	bcc.n	800a84e <dir_next+0x2c>
 800a84a:	2304      	movs	r3, #4
 800a84c:	e0bb      	b.n	800a9c6 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	899b      	ldrh	r3, [r3, #12]
 800a852:	461a      	mov	r2, r3
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	fbb3 f1f2 	udiv	r1, r3, r2
 800a85a:	fb01 f202 	mul.w	r2, r1, r2
 800a85e:	1a9b      	subs	r3, r3, r2
 800a860:	2b00      	cmp	r3, #0
 800a862:	f040 809d 	bne.w	800a9a0 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	69db      	ldr	r3, [r3, #28]
 800a86a:	1c5a      	adds	r2, r3, #1
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	699b      	ldr	r3, [r3, #24]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d10b      	bne.n	800a890 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	095b      	lsrs	r3, r3, #5
 800a87c:	68fa      	ldr	r2, [r7, #12]
 800a87e:	8912      	ldrh	r2, [r2, #8]
 800a880:	4293      	cmp	r3, r2
 800a882:	f0c0 808d 	bcc.w	800a9a0 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	2200      	movs	r2, #0
 800a88a:	61da      	str	r2, [r3, #28]
 800a88c:	2304      	movs	r3, #4
 800a88e:	e09a      	b.n	800a9c6 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	899b      	ldrh	r3, [r3, #12]
 800a894:	461a      	mov	r2, r3
 800a896:	68bb      	ldr	r3, [r7, #8]
 800a898:	fbb3 f3f2 	udiv	r3, r3, r2
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	8952      	ldrh	r2, [r2, #10]
 800a8a0:	3a01      	subs	r2, #1
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d17b      	bne.n	800a9a0 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a8a8:	687a      	ldr	r2, [r7, #4]
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	699b      	ldr	r3, [r3, #24]
 800a8ae:	4619      	mov	r1, r3
 800a8b0:	4610      	mov	r0, r2
 800a8b2:	f7ff fc08 	bl	800a0c6 <get_fat>
 800a8b6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d801      	bhi.n	800a8c2 <dir_next+0xa0>
 800a8be:	2302      	movs	r3, #2
 800a8c0:	e081      	b.n	800a9c6 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a8c2:	697b      	ldr	r3, [r7, #20]
 800a8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8c8:	d101      	bne.n	800a8ce <dir_next+0xac>
 800a8ca:	2301      	movs	r3, #1
 800a8cc:	e07b      	b.n	800a9c6 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	69db      	ldr	r3, [r3, #28]
 800a8d2:	697a      	ldr	r2, [r7, #20]
 800a8d4:	429a      	cmp	r2, r3
 800a8d6:	d359      	bcc.n	800a98c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d104      	bne.n	800a8e8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	61da      	str	r2, [r3, #28]
 800a8e4:	2304      	movs	r3, #4
 800a8e6:	e06e      	b.n	800a9c6 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	699b      	ldr	r3, [r3, #24]
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	f7ff fe3d 	bl	800a570 <create_chain>
 800a8f6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a8f8:	697b      	ldr	r3, [r7, #20]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d101      	bne.n	800a902 <dir_next+0xe0>
 800a8fe:	2307      	movs	r3, #7
 800a900:	e061      	b.n	800a9c6 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	2b01      	cmp	r3, #1
 800a906:	d101      	bne.n	800a90c <dir_next+0xea>
 800a908:	2302      	movs	r3, #2
 800a90a:	e05c      	b.n	800a9c6 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a912:	d101      	bne.n	800a918 <dir_next+0xf6>
 800a914:	2301      	movs	r3, #1
 800a916:	e056      	b.n	800a9c6 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a918:	68f8      	ldr	r0, [r7, #12]
 800a91a:	f7ff fad3 	bl	8009ec4 <sync_window>
 800a91e:	4603      	mov	r3, r0
 800a920:	2b00      	cmp	r3, #0
 800a922:	d001      	beq.n	800a928 <dir_next+0x106>
 800a924:	2301      	movs	r3, #1
 800a926:	e04e      	b.n	800a9c6 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	899b      	ldrh	r3, [r3, #12]
 800a932:	461a      	mov	r2, r3
 800a934:	2100      	movs	r1, #0
 800a936:	f7ff f8fc 	bl	8009b32 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a93a:	2300      	movs	r3, #0
 800a93c:	613b      	str	r3, [r7, #16]
 800a93e:	6979      	ldr	r1, [r7, #20]
 800a940:	68f8      	ldr	r0, [r7, #12]
 800a942:	f7ff fba1 	bl	800a088 <clust2sect>
 800a946:	4602      	mov	r2, r0
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	635a      	str	r2, [r3, #52]	; 0x34
 800a94c:	e012      	b.n	800a974 <dir_next+0x152>
						fs->wflag = 1;
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	2201      	movs	r2, #1
 800a952:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	f7ff fab5 	bl	8009ec4 <sync_window>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d001      	beq.n	800a964 <dir_next+0x142>
 800a960:	2301      	movs	r3, #1
 800a962:	e030      	b.n	800a9c6 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	3301      	adds	r3, #1
 800a968:	613b      	str	r3, [r7, #16]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a96e:	1c5a      	adds	r2, r3, #1
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	635a      	str	r2, [r3, #52]	; 0x34
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	895b      	ldrh	r3, [r3, #10]
 800a978:	461a      	mov	r2, r3
 800a97a:	693b      	ldr	r3, [r7, #16]
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d3e6      	bcc.n	800a94e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	1ad2      	subs	r2, r2, r3
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	697a      	ldr	r2, [r7, #20]
 800a990:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a992:	6979      	ldr	r1, [r7, #20]
 800a994:	68f8      	ldr	r0, [r7, #12]
 800a996:	f7ff fb77 	bl	800a088 <clust2sect>
 800a99a:	4602      	mov	r2, r0
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	68ba      	ldr	r2, [r7, #8]
 800a9a4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	899b      	ldrh	r3, [r3, #12]
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9b8:	fb00 f202 	mul.w	r2, r0, r2
 800a9bc:	1a9b      	subs	r3, r3, r2
 800a9be:	18ca      	adds	r2, r1, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a9c4:	2300      	movs	r3, #0
}
 800a9c6:	4618      	mov	r0, r3
 800a9c8:	3718      	adds	r7, #24
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}

0800a9ce <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a9ce:	b580      	push	{r7, lr}
 800a9d0:	b086      	sub	sp, #24
 800a9d2:	af00      	add	r7, sp, #0
 800a9d4:	6078      	str	r0, [r7, #4]
 800a9d6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a9de:	2100      	movs	r1, #0
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f7ff fe95 	bl	800a710 <dir_sdi>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a9ea:	7dfb      	ldrb	r3, [r7, #23]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d12b      	bne.n	800aa48 <dir_alloc+0x7a>
		n = 0;
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	69db      	ldr	r3, [r3, #28]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f7ff faa6 	bl	8009f4c <move_window>
 800aa00:	4603      	mov	r3, r0
 800aa02:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800aa04:	7dfb      	ldrb	r3, [r7, #23]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d11d      	bne.n	800aa46 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a1b      	ldr	r3, [r3, #32]
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	2be5      	cmp	r3, #229	; 0xe5
 800aa12:	d004      	beq.n	800aa1e <dir_alloc+0x50>
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a1b      	ldr	r3, [r3, #32]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d107      	bne.n	800aa2e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	3301      	adds	r3, #1
 800aa22:	613b      	str	r3, [r7, #16]
 800aa24:	693a      	ldr	r2, [r7, #16]
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d102      	bne.n	800aa32 <dir_alloc+0x64>
 800aa2c:	e00c      	b.n	800aa48 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800aa2e:	2300      	movs	r3, #0
 800aa30:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800aa32:	2101      	movs	r1, #1
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7ff fef4 	bl	800a822 <dir_next>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800aa3e:	7dfb      	ldrb	r3, [r7, #23]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d0d7      	beq.n	800a9f4 <dir_alloc+0x26>
 800aa44:	e000      	b.n	800aa48 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800aa46:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800aa48:	7dfb      	ldrb	r3, [r7, #23]
 800aa4a:	2b04      	cmp	r3, #4
 800aa4c:	d101      	bne.n	800aa52 <dir_alloc+0x84>
 800aa4e:	2307      	movs	r3, #7
 800aa50:	75fb      	strb	r3, [r7, #23]
	return res;
 800aa52:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	3718      	adds	r7, #24
 800aa58:	46bd      	mov	sp, r7
 800aa5a:	bd80      	pop	{r7, pc}

0800aa5c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800aa5c:	b580      	push	{r7, lr}
 800aa5e:	b084      	sub	sp, #16
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	331a      	adds	r3, #26
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f7fe ffbe 	bl	80099ec <ld_word>
 800aa70:	4603      	mov	r3, r0
 800aa72:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	2b03      	cmp	r3, #3
 800aa7a:	d109      	bne.n	800aa90 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	3314      	adds	r3, #20
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7fe ffb3 	bl	80099ec <ld_word>
 800aa86:	4603      	mov	r3, r0
 800aa88:	041b      	lsls	r3, r3, #16
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800aa90:	68fb      	ldr	r3, [r7, #12]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3710      	adds	r7, #16
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}

0800aa9a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b084      	sub	sp, #16
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	60f8      	str	r0, [r7, #12]
 800aaa2:	60b9      	str	r1, [r7, #8]
 800aaa4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	331a      	adds	r3, #26
 800aaaa:	687a      	ldr	r2, [r7, #4]
 800aaac:	b292      	uxth	r2, r2
 800aaae:	4611      	mov	r1, r2
 800aab0:	4618      	mov	r0, r3
 800aab2:	f7fe ffd6 	bl	8009a62 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	2b03      	cmp	r3, #3
 800aabc:	d109      	bne.n	800aad2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	f103 0214 	add.w	r2, r3, #20
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	0c1b      	lsrs	r3, r3, #16
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	4619      	mov	r1, r3
 800aacc:	4610      	mov	r0, r2
 800aace:	f7fe ffc8 	bl	8009a62 <st_word>
	}
}
 800aad2:	bf00      	nop
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
	...

0800aadc <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800aadc:	b590      	push	{r4, r7, lr}
 800aade:	b087      	sub	sp, #28
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	331a      	adds	r3, #26
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fe ff7e 	bl	80099ec <ld_word>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d001      	beq.n	800aafa <cmp_lfn+0x1e>
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	e059      	b.n	800abae <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab02:	1e5a      	subs	r2, r3, #1
 800ab04:	4613      	mov	r3, r2
 800ab06:	005b      	lsls	r3, r3, #1
 800ab08:	4413      	add	r3, r2
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	4413      	add	r3, r2
 800ab0e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ab10:	2301      	movs	r3, #1
 800ab12:	81fb      	strh	r3, [r7, #14]
 800ab14:	2300      	movs	r3, #0
 800ab16:	613b      	str	r3, [r7, #16]
 800ab18:	e033      	b.n	800ab82 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ab1a:	4a27      	ldr	r2, [pc, #156]	; (800abb8 <cmp_lfn+0xdc>)
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	4413      	add	r3, r2
 800ab20:	781b      	ldrb	r3, [r3, #0]
 800ab22:	461a      	mov	r2, r3
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	4413      	add	r3, r2
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f7fe ff5f 	bl	80099ec <ld_word>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ab32:	89fb      	ldrh	r3, [r7, #14]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d01a      	beq.n	800ab6e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	2bfe      	cmp	r3, #254	; 0xfe
 800ab3c:	d812      	bhi.n	800ab64 <cmp_lfn+0x88>
 800ab3e:	89bb      	ldrh	r3, [r7, #12]
 800ab40:	4618      	mov	r0, r3
 800ab42:	f001 fdbb 	bl	800c6bc <ff_wtoupper>
 800ab46:	4603      	mov	r3, r0
 800ab48:	461c      	mov	r4, r3
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	1c5a      	adds	r2, r3, #1
 800ab4e:	617a      	str	r2, [r7, #20]
 800ab50:	005b      	lsls	r3, r3, #1
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	4413      	add	r3, r2
 800ab56:	881b      	ldrh	r3, [r3, #0]
 800ab58:	4618      	mov	r0, r3
 800ab5a:	f001 fdaf 	bl	800c6bc <ff_wtoupper>
 800ab5e:	4603      	mov	r3, r0
 800ab60:	429c      	cmp	r4, r3
 800ab62:	d001      	beq.n	800ab68 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ab64:	2300      	movs	r3, #0
 800ab66:	e022      	b.n	800abae <cmp_lfn+0xd2>
			}
			wc = uc;
 800ab68:	89bb      	ldrh	r3, [r7, #12]
 800ab6a:	81fb      	strh	r3, [r7, #14]
 800ab6c:	e006      	b.n	800ab7c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ab6e:	89bb      	ldrh	r3, [r7, #12]
 800ab70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ab74:	4293      	cmp	r3, r2
 800ab76:	d001      	beq.n	800ab7c <cmp_lfn+0xa0>
 800ab78:	2300      	movs	r3, #0
 800ab7a:	e018      	b.n	800abae <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	613b      	str	r3, [r7, #16]
 800ab82:	693b      	ldr	r3, [r7, #16]
 800ab84:	2b0c      	cmp	r3, #12
 800ab86:	d9c8      	bls.n	800ab1a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00b      	beq.n	800abac <cmp_lfn+0xd0>
 800ab94:	89fb      	ldrh	r3, [r7, #14]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d008      	beq.n	800abac <cmp_lfn+0xd0>
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	005b      	lsls	r3, r3, #1
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	4413      	add	r3, r2
 800aba2:	881b      	ldrh	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d001      	beq.n	800abac <cmp_lfn+0xd0>
 800aba8:	2300      	movs	r3, #0
 800abaa:	e000      	b.n	800abae <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800abac:	2301      	movs	r3, #1
}
 800abae:	4618      	mov	r0, r3
 800abb0:	371c      	adds	r7, #28
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd90      	pop	{r4, r7, pc}
 800abb6:	bf00      	nop
 800abb8:	080101b0 	.word	0x080101b0

0800abbc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	b088      	sub	sp, #32
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	60f8      	str	r0, [r7, #12]
 800abc4:	60b9      	str	r1, [r7, #8]
 800abc6:	4611      	mov	r1, r2
 800abc8:	461a      	mov	r2, r3
 800abca:	460b      	mov	r3, r1
 800abcc:	71fb      	strb	r3, [r7, #7]
 800abce:	4613      	mov	r3, r2
 800abd0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	330d      	adds	r3, #13
 800abd6:	79ba      	ldrb	r2, [r7, #6]
 800abd8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	330b      	adds	r3, #11
 800abde:	220f      	movs	r2, #15
 800abe0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	330c      	adds	r3, #12
 800abe6:	2200      	movs	r2, #0
 800abe8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	331a      	adds	r3, #26
 800abee:	2100      	movs	r1, #0
 800abf0:	4618      	mov	r0, r3
 800abf2:	f7fe ff36 	bl	8009a62 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800abf6:	79fb      	ldrb	r3, [r7, #7]
 800abf8:	1e5a      	subs	r2, r3, #1
 800abfa:	4613      	mov	r3, r2
 800abfc:	005b      	lsls	r3, r3, #1
 800abfe:	4413      	add	r3, r2
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	4413      	add	r3, r2
 800ac04:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ac06:	2300      	movs	r3, #0
 800ac08:	82fb      	strh	r3, [r7, #22]
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ac0e:	8afb      	ldrh	r3, [r7, #22]
 800ac10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d007      	beq.n	800ac28 <put_lfn+0x6c>
 800ac18:	69fb      	ldr	r3, [r7, #28]
 800ac1a:	1c5a      	adds	r2, r3, #1
 800ac1c:	61fa      	str	r2, [r7, #28]
 800ac1e:	005b      	lsls	r3, r3, #1
 800ac20:	68fa      	ldr	r2, [r7, #12]
 800ac22:	4413      	add	r3, r2
 800ac24:	881b      	ldrh	r3, [r3, #0]
 800ac26:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ac28:	4a17      	ldr	r2, [pc, #92]	; (800ac88 <put_lfn+0xcc>)
 800ac2a:	69bb      	ldr	r3, [r7, #24]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	461a      	mov	r2, r3
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	4413      	add	r3, r2
 800ac36:	8afa      	ldrh	r2, [r7, #22]
 800ac38:	4611      	mov	r1, r2
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f7fe ff11 	bl	8009a62 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ac40:	8afb      	ldrh	r3, [r7, #22]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d102      	bne.n	800ac4c <put_lfn+0x90>
 800ac46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ac4a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ac4c:	69bb      	ldr	r3, [r7, #24]
 800ac4e:	3301      	adds	r3, #1
 800ac50:	61bb      	str	r3, [r7, #24]
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	2b0c      	cmp	r3, #12
 800ac56:	d9da      	bls.n	800ac0e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ac58:	8afb      	ldrh	r3, [r7, #22]
 800ac5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d006      	beq.n	800ac70 <put_lfn+0xb4>
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	005b      	lsls	r3, r3, #1
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	4413      	add	r3, r2
 800ac6a:	881b      	ldrh	r3, [r3, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d103      	bne.n	800ac78 <put_lfn+0xbc>
 800ac70:	79fb      	ldrb	r3, [r7, #7]
 800ac72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac76:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	79fa      	ldrb	r2, [r7, #7]
 800ac7c:	701a      	strb	r2, [r3, #0]
}
 800ac7e:	bf00      	nop
 800ac80:	3720      	adds	r7, #32
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	080101b0 	.word	0x080101b0

0800ac8c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b08c      	sub	sp, #48	; 0x30
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	60f8      	str	r0, [r7, #12]
 800ac94:	60b9      	str	r1, [r7, #8]
 800ac96:	607a      	str	r2, [r7, #4]
 800ac98:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ac9a:	220b      	movs	r2, #11
 800ac9c:	68b9      	ldr	r1, [r7, #8]
 800ac9e:	68f8      	ldr	r0, [r7, #12]
 800aca0:	f7fe ff26 	bl	8009af0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	2b05      	cmp	r3, #5
 800aca8:	d92b      	bls.n	800ad02 <gen_numname+0x76>
		sr = seq;
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800acae:	e022      	b.n	800acf6 <gen_numname+0x6a>
			wc = *lfn++;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	1c9a      	adds	r2, r3, #2
 800acb4:	607a      	str	r2, [r7, #4]
 800acb6:	881b      	ldrh	r3, [r3, #0]
 800acb8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800acba:	2300      	movs	r3, #0
 800acbc:	62bb      	str	r3, [r7, #40]	; 0x28
 800acbe:	e017      	b.n	800acf0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800acc0:	69fb      	ldr	r3, [r7, #28]
 800acc2:	005a      	lsls	r2, r3, #1
 800acc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800acc6:	f003 0301 	and.w	r3, r3, #1
 800acca:	4413      	add	r3, r2
 800accc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800acce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800acd0:	085b      	lsrs	r3, r3, #1
 800acd2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d005      	beq.n	800acea <gen_numname+0x5e>
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ace4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ace8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800acea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acec:	3301      	adds	r3, #1
 800acee:	62bb      	str	r3, [r7, #40]	; 0x28
 800acf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acf2:	2b0f      	cmp	r3, #15
 800acf4:	d9e4      	bls.n	800acc0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	881b      	ldrh	r3, [r3, #0]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d1d8      	bne.n	800acb0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800acfe:	69fb      	ldr	r3, [r7, #28]
 800ad00:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800ad02:	2307      	movs	r3, #7
 800ad04:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	f003 030f 	and.w	r3, r3, #15
 800ad0e:	b2db      	uxtb	r3, r3
 800ad10:	3330      	adds	r3, #48	; 0x30
 800ad12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ad16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad1a:	2b39      	cmp	r3, #57	; 0x39
 800ad1c:	d904      	bls.n	800ad28 <gen_numname+0x9c>
 800ad1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ad22:	3307      	adds	r3, #7
 800ad24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2a:	1e5a      	subs	r2, r3, #1
 800ad2c:	62ba      	str	r2, [r7, #40]	; 0x28
 800ad2e:	3330      	adds	r3, #48	; 0x30
 800ad30:	443b      	add	r3, r7
 800ad32:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ad36:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	091b      	lsrs	r3, r3, #4
 800ad3e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d1df      	bne.n	800ad06 <gen_numname+0x7a>
	ns[i] = '~';
 800ad46:	f107 0214 	add.w	r2, r7, #20
 800ad4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4c:	4413      	add	r3, r2
 800ad4e:	227e      	movs	r2, #126	; 0x7e
 800ad50:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ad52:	2300      	movs	r3, #0
 800ad54:	627b      	str	r3, [r7, #36]	; 0x24
 800ad56:	e002      	b.n	800ad5e <gen_numname+0xd2>
 800ad58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	627b      	str	r3, [r7, #36]	; 0x24
 800ad5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d205      	bcs.n	800ad72 <gen_numname+0xe6>
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad6a:	4413      	add	r3, r2
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	2b20      	cmp	r3, #32
 800ad70:	d1f2      	bne.n	800ad58 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ad72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad74:	2b07      	cmp	r3, #7
 800ad76:	d807      	bhi.n	800ad88 <gen_numname+0xfc>
 800ad78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7a:	1c5a      	adds	r2, r3, #1
 800ad7c:	62ba      	str	r2, [r7, #40]	; 0x28
 800ad7e:	3330      	adds	r3, #48	; 0x30
 800ad80:	443b      	add	r3, r7
 800ad82:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ad86:	e000      	b.n	800ad8a <gen_numname+0xfe>
 800ad88:	2120      	movs	r1, #32
 800ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad8c:	1c5a      	adds	r2, r3, #1
 800ad8e:	627a      	str	r2, [r7, #36]	; 0x24
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	4413      	add	r3, r2
 800ad94:	460a      	mov	r2, r1
 800ad96:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ad98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad9a:	2b07      	cmp	r3, #7
 800ad9c:	d9e9      	bls.n	800ad72 <gen_numname+0xe6>
}
 800ad9e:	bf00      	nop
 800ada0:	bf00      	nop
 800ada2:	3730      	adds	r7, #48	; 0x30
 800ada4:	46bd      	mov	sp, r7
 800ada6:	bd80      	pop	{r7, pc}

0800ada8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ada8:	b480      	push	{r7}
 800adaa:	b085      	sub	sp, #20
 800adac:	af00      	add	r7, sp, #0
 800adae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800adb0:	2300      	movs	r3, #0
 800adb2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800adb4:	230b      	movs	r3, #11
 800adb6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800adb8:	7bfb      	ldrb	r3, [r7, #15]
 800adba:	b2da      	uxtb	r2, r3
 800adbc:	0852      	lsrs	r2, r2, #1
 800adbe:	01db      	lsls	r3, r3, #7
 800adc0:	4313      	orrs	r3, r2
 800adc2:	b2da      	uxtb	r2, r3
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	1c59      	adds	r1, r3, #1
 800adc8:	6079      	str	r1, [r7, #4]
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	4413      	add	r3, r2
 800adce:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800add0:	68bb      	ldr	r3, [r7, #8]
 800add2:	3b01      	subs	r3, #1
 800add4:	60bb      	str	r3, [r7, #8]
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1ed      	bne.n	800adb8 <sum_sfn+0x10>
	return sum;
 800addc:	7bfb      	ldrb	r3, [r7, #15]
}
 800adde:	4618      	mov	r0, r3
 800ade0:	3714      	adds	r7, #20
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr

0800adea <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b086      	sub	sp, #24
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800adf8:	2100      	movs	r1, #0
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f7ff fc88 	bl	800a710 <dir_sdi>
 800ae00:	4603      	mov	r3, r0
 800ae02:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ae04:	7dfb      	ldrb	r3, [r7, #23]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d001      	beq.n	800ae0e <dir_find+0x24>
 800ae0a:	7dfb      	ldrb	r3, [r7, #23]
 800ae0c:	e0a9      	b.n	800af62 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ae0e:	23ff      	movs	r3, #255	; 0xff
 800ae10:	753b      	strb	r3, [r7, #20]
 800ae12:	7d3b      	ldrb	r3, [r7, #20]
 800ae14:	757b      	strb	r3, [r7, #21]
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	f04f 32ff 	mov.w	r2, #4294967295
 800ae1c:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	69db      	ldr	r3, [r3, #28]
 800ae22:	4619      	mov	r1, r3
 800ae24:	6938      	ldr	r0, [r7, #16]
 800ae26:	f7ff f891 	bl	8009f4c <move_window>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ae2e:	7dfb      	ldrb	r3, [r7, #23]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f040 8090 	bne.w	800af56 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a1b      	ldr	r3, [r3, #32]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ae3e:	7dbb      	ldrb	r3, [r7, #22]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d102      	bne.n	800ae4a <dir_find+0x60>
 800ae44:	2304      	movs	r3, #4
 800ae46:	75fb      	strb	r3, [r7, #23]
 800ae48:	e08a      	b.n	800af60 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a1b      	ldr	r3, [r3, #32]
 800ae4e:	330b      	adds	r3, #11
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ae56:	73fb      	strb	r3, [r7, #15]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	7bfa      	ldrb	r2, [r7, #15]
 800ae5c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ae5e:	7dbb      	ldrb	r3, [r7, #22]
 800ae60:	2be5      	cmp	r3, #229	; 0xe5
 800ae62:	d007      	beq.n	800ae74 <dir_find+0x8a>
 800ae64:	7bfb      	ldrb	r3, [r7, #15]
 800ae66:	f003 0308 	and.w	r3, r3, #8
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d009      	beq.n	800ae82 <dir_find+0x98>
 800ae6e:	7bfb      	ldrb	r3, [r7, #15]
 800ae70:	2b0f      	cmp	r3, #15
 800ae72:	d006      	beq.n	800ae82 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ae74:	23ff      	movs	r3, #255	; 0xff
 800ae76:	757b      	strb	r3, [r7, #21]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f04f 32ff 	mov.w	r2, #4294967295
 800ae7e:	631a      	str	r2, [r3, #48]	; 0x30
 800ae80:	e05e      	b.n	800af40 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ae82:	7bfb      	ldrb	r3, [r7, #15]
 800ae84:	2b0f      	cmp	r3, #15
 800ae86:	d136      	bne.n	800aef6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ae8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d154      	bne.n	800af40 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ae96:	7dbb      	ldrb	r3, [r7, #22]
 800ae98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00d      	beq.n	800aebc <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6a1b      	ldr	r3, [r3, #32]
 800aea4:	7b5b      	ldrb	r3, [r3, #13]
 800aea6:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800aea8:	7dbb      	ldrb	r3, [r7, #22]
 800aeaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aeae:	75bb      	strb	r3, [r7, #22]
 800aeb0:	7dbb      	ldrb	r3, [r7, #22]
 800aeb2:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	695a      	ldr	r2, [r3, #20]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800aebc:	7dba      	ldrb	r2, [r7, #22]
 800aebe:	7d7b      	ldrb	r3, [r7, #21]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d115      	bne.n	800aef0 <dir_find+0x106>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6a1b      	ldr	r3, [r3, #32]
 800aec8:	330d      	adds	r3, #13
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	7d3a      	ldrb	r2, [r7, #20]
 800aece:	429a      	cmp	r2, r3
 800aed0:	d10e      	bne.n	800aef0 <dir_find+0x106>
 800aed2:	693b      	ldr	r3, [r7, #16]
 800aed4:	691a      	ldr	r2, [r3, #16]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a1b      	ldr	r3, [r3, #32]
 800aeda:	4619      	mov	r1, r3
 800aedc:	4610      	mov	r0, r2
 800aede:	f7ff fdfd 	bl	800aadc <cmp_lfn>
 800aee2:	4603      	mov	r3, r0
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d003      	beq.n	800aef0 <dir_find+0x106>
 800aee8:	7d7b      	ldrb	r3, [r7, #21]
 800aeea:	3b01      	subs	r3, #1
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	e000      	b.n	800aef2 <dir_find+0x108>
 800aef0:	23ff      	movs	r3, #255	; 0xff
 800aef2:	757b      	strb	r3, [r7, #21]
 800aef4:	e024      	b.n	800af40 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800aef6:	7d7b      	ldrb	r3, [r7, #21]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d109      	bne.n	800af10 <dir_find+0x126>
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6a1b      	ldr	r3, [r3, #32]
 800af00:	4618      	mov	r0, r3
 800af02:	f7ff ff51 	bl	800ada8 <sum_sfn>
 800af06:	4603      	mov	r3, r0
 800af08:	461a      	mov	r2, r3
 800af0a:	7d3b      	ldrb	r3, [r7, #20]
 800af0c:	4293      	cmp	r3, r2
 800af0e:	d024      	beq.n	800af5a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800af16:	f003 0301 	and.w	r3, r3, #1
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d10a      	bne.n	800af34 <dir_find+0x14a>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	6a18      	ldr	r0, [r3, #32]
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	3324      	adds	r3, #36	; 0x24
 800af26:	220b      	movs	r2, #11
 800af28:	4619      	mov	r1, r3
 800af2a:	f7fe fe1d 	bl	8009b68 <mem_cmp>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d014      	beq.n	800af5e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800af34:	23ff      	movs	r3, #255	; 0xff
 800af36:	757b      	strb	r3, [r7, #21]
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	f04f 32ff 	mov.w	r2, #4294967295
 800af3e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800af40:	2100      	movs	r1, #0
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f7ff fc6d 	bl	800a822 <dir_next>
 800af48:	4603      	mov	r3, r0
 800af4a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800af4c:	7dfb      	ldrb	r3, [r7, #23]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	f43f af65 	beq.w	800ae1e <dir_find+0x34>
 800af54:	e004      	b.n	800af60 <dir_find+0x176>
		if (res != FR_OK) break;
 800af56:	bf00      	nop
 800af58:	e002      	b.n	800af60 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800af5a:	bf00      	nop
 800af5c:	e000      	b.n	800af60 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800af5e:	bf00      	nop

	return res;
 800af60:	7dfb      	ldrb	r3, [r7, #23]
}
 800af62:	4618      	mov	r0, r3
 800af64:	3718      	adds	r7, #24
 800af66:	46bd      	mov	sp, r7
 800af68:	bd80      	pop	{r7, pc}
	...

0800af6c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b08c      	sub	sp, #48	; 0x30
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800af80:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800af84:	2b00      	cmp	r3, #0
 800af86:	d001      	beq.n	800af8c <dir_register+0x20>
 800af88:	2306      	movs	r3, #6
 800af8a:	e0e0      	b.n	800b14e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800af8c:	2300      	movs	r3, #0
 800af8e:	627b      	str	r3, [r7, #36]	; 0x24
 800af90:	e002      	b.n	800af98 <dir_register+0x2c>
 800af92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af94:	3301      	adds	r3, #1
 800af96:	627b      	str	r3, [r7, #36]	; 0x24
 800af98:	69fb      	ldr	r3, [r7, #28]
 800af9a:	691a      	ldr	r2, [r3, #16]
 800af9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9e:	005b      	lsls	r3, r3, #1
 800afa0:	4413      	add	r3, r2
 800afa2:	881b      	ldrh	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d1f4      	bne.n	800af92 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800afae:	f107 030c 	add.w	r3, r7, #12
 800afb2:	220c      	movs	r2, #12
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7fe fd9b 	bl	8009af0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800afba:	7dfb      	ldrb	r3, [r7, #23]
 800afbc:	f003 0301 	and.w	r3, r3, #1
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d032      	beq.n	800b02a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2240      	movs	r2, #64	; 0x40
 800afc8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800afcc:	2301      	movs	r3, #1
 800afce:	62bb      	str	r3, [r7, #40]	; 0x28
 800afd0:	e016      	b.n	800b000 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	691a      	ldr	r2, [r3, #16]
 800afdc:	f107 010c 	add.w	r1, r7, #12
 800afe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afe2:	f7ff fe53 	bl	800ac8c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f7ff feff 	bl	800adea <dir_find>
 800afec:	4603      	mov	r3, r0
 800afee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800aff2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d106      	bne.n	800b008 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800affa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800affc:	3301      	adds	r3, #1
 800affe:	62bb      	str	r3, [r7, #40]	; 0x28
 800b000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b002:	2b63      	cmp	r3, #99	; 0x63
 800b004:	d9e5      	bls.n	800afd2 <dir_register+0x66>
 800b006:	e000      	b.n	800b00a <dir_register+0x9e>
			if (res != FR_OK) break;
 800b008:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b00a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00c:	2b64      	cmp	r3, #100	; 0x64
 800b00e:	d101      	bne.n	800b014 <dir_register+0xa8>
 800b010:	2307      	movs	r3, #7
 800b012:	e09c      	b.n	800b14e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b014:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b018:	2b04      	cmp	r3, #4
 800b01a:	d002      	beq.n	800b022 <dir_register+0xb6>
 800b01c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b020:	e095      	b.n	800b14e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b022:	7dfa      	ldrb	r2, [r7, #23]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b02a:	7dfb      	ldrb	r3, [r7, #23]
 800b02c:	f003 0302 	and.w	r3, r3, #2
 800b030:	2b00      	cmp	r3, #0
 800b032:	d007      	beq.n	800b044 <dir_register+0xd8>
 800b034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b036:	330c      	adds	r3, #12
 800b038:	4a47      	ldr	r2, [pc, #284]	; (800b158 <dir_register+0x1ec>)
 800b03a:	fba2 2303 	umull	r2, r3, r2, r3
 800b03e:	089b      	lsrs	r3, r3, #2
 800b040:	3301      	adds	r3, #1
 800b042:	e000      	b.n	800b046 <dir_register+0xda>
 800b044:	2301      	movs	r3, #1
 800b046:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b048:	6a39      	ldr	r1, [r7, #32]
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f7ff fcbf 	bl	800a9ce <dir_alloc>
 800b050:	4603      	mov	r3, r0
 800b052:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b056:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d148      	bne.n	800b0f0 <dir_register+0x184>
 800b05e:	6a3b      	ldr	r3, [r7, #32]
 800b060:	3b01      	subs	r3, #1
 800b062:	623b      	str	r3, [r7, #32]
 800b064:	6a3b      	ldr	r3, [r7, #32]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d042      	beq.n	800b0f0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	695a      	ldr	r2, [r3, #20]
 800b06e:	6a3b      	ldr	r3, [r7, #32]
 800b070:	015b      	lsls	r3, r3, #5
 800b072:	1ad3      	subs	r3, r2, r3
 800b074:	4619      	mov	r1, r3
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f7ff fb4a 	bl	800a710 <dir_sdi>
 800b07c:	4603      	mov	r3, r0
 800b07e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b082:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b086:	2b00      	cmp	r3, #0
 800b088:	d132      	bne.n	800b0f0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	3324      	adds	r3, #36	; 0x24
 800b08e:	4618      	mov	r0, r3
 800b090:	f7ff fe8a 	bl	800ada8 <sum_sfn>
 800b094:	4603      	mov	r3, r0
 800b096:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	69db      	ldr	r3, [r3, #28]
 800b09c:	4619      	mov	r1, r3
 800b09e:	69f8      	ldr	r0, [r7, #28]
 800b0a0:	f7fe ff54 	bl	8009f4c <move_window>
 800b0a4:	4603      	mov	r3, r0
 800b0a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b0aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d11d      	bne.n	800b0ee <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b0b2:	69fb      	ldr	r3, [r7, #28]
 800b0b4:	6918      	ldr	r0, [r3, #16]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a19      	ldr	r1, [r3, #32]
 800b0ba:	6a3b      	ldr	r3, [r7, #32]
 800b0bc:	b2da      	uxtb	r2, r3
 800b0be:	7efb      	ldrb	r3, [r7, #27]
 800b0c0:	f7ff fd7c 	bl	800abbc <put_lfn>
				fs->wflag = 1;
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	2201      	movs	r2, #1
 800b0c8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b0ca:	2100      	movs	r1, #0
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f7ff fba8 	bl	800a822 <dir_next>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b0d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d107      	bne.n	800b0f0 <dir_register+0x184>
 800b0e0:	6a3b      	ldr	r3, [r7, #32]
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	623b      	str	r3, [r7, #32]
 800b0e6:	6a3b      	ldr	r3, [r7, #32]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d1d5      	bne.n	800b098 <dir_register+0x12c>
 800b0ec:	e000      	b.n	800b0f0 <dir_register+0x184>
				if (res != FR_OK) break;
 800b0ee:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b0f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d128      	bne.n	800b14a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	69db      	ldr	r3, [r3, #28]
 800b0fc:	4619      	mov	r1, r3
 800b0fe:	69f8      	ldr	r0, [r7, #28]
 800b100:	f7fe ff24 	bl	8009f4c <move_window>
 800b104:	4603      	mov	r3, r0
 800b106:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b10a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d11b      	bne.n	800b14a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6a1b      	ldr	r3, [r3, #32]
 800b116:	2220      	movs	r2, #32
 800b118:	2100      	movs	r1, #0
 800b11a:	4618      	mov	r0, r3
 800b11c:	f7fe fd09 	bl	8009b32 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a18      	ldr	r0, [r3, #32]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	3324      	adds	r3, #36	; 0x24
 800b128:	220b      	movs	r2, #11
 800b12a:	4619      	mov	r1, r3
 800b12c:	f7fe fce0 	bl	8009af0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a1b      	ldr	r3, [r3, #32]
 800b13a:	330c      	adds	r3, #12
 800b13c:	f002 0218 	and.w	r2, r2, #24
 800b140:	b2d2      	uxtb	r2, r2
 800b142:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b144:	69fb      	ldr	r3, [r7, #28]
 800b146:	2201      	movs	r2, #1
 800b148:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b14a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b14e:	4618      	mov	r0, r3
 800b150:	3730      	adds	r7, #48	; 0x30
 800b152:	46bd      	mov	sp, r7
 800b154:	bd80      	pop	{r7, pc}
 800b156:	bf00      	nop
 800b158:	4ec4ec4f 	.word	0x4ec4ec4f

0800b15c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b08a      	sub	sp, #40	; 0x28
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b166:	683b      	ldr	r3, [r7, #0]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	613b      	str	r3, [r7, #16]
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	60fb      	str	r3, [r7, #12]
 800b174:	2300      	movs	r3, #0
 800b176:	617b      	str	r3, [r7, #20]
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	1c5a      	adds	r2, r3, #1
 800b180:	61ba      	str	r2, [r7, #24]
 800b182:	693a      	ldr	r2, [r7, #16]
 800b184:	4413      	add	r3, r2
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b18a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b18c:	2b1f      	cmp	r3, #31
 800b18e:	d940      	bls.n	800b212 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b190:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b192:	2b2f      	cmp	r3, #47	; 0x2f
 800b194:	d006      	beq.n	800b1a4 <create_name+0x48>
 800b196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b198:	2b5c      	cmp	r3, #92	; 0x5c
 800b19a:	d110      	bne.n	800b1be <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b19c:	e002      	b.n	800b1a4 <create_name+0x48>
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	3301      	adds	r3, #1
 800b1a2:	61bb      	str	r3, [r7, #24]
 800b1a4:	693a      	ldr	r2, [r7, #16]
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	781b      	ldrb	r3, [r3, #0]
 800b1ac:	2b2f      	cmp	r3, #47	; 0x2f
 800b1ae:	d0f6      	beq.n	800b19e <create_name+0x42>
 800b1b0:	693a      	ldr	r2, [r7, #16]
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	781b      	ldrb	r3, [r3, #0]
 800b1b8:	2b5c      	cmp	r3, #92	; 0x5c
 800b1ba:	d0f0      	beq.n	800b19e <create_name+0x42>
			break;
 800b1bc:	e02a      	b.n	800b214 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	2bfe      	cmp	r3, #254	; 0xfe
 800b1c2:	d901      	bls.n	800b1c8 <create_name+0x6c>
 800b1c4:	2306      	movs	r3, #6
 800b1c6:	e17d      	b.n	800b4c4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b1c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1ca:	b2db      	uxtb	r3, r3
 800b1cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b1ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1d0:	2101      	movs	r1, #1
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	f001 fa36 	bl	800c644 <ff_convert>
 800b1d8:	4603      	mov	r3, r0
 800b1da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b1dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d101      	bne.n	800b1e6 <create_name+0x8a>
 800b1e2:	2306      	movs	r3, #6
 800b1e4:	e16e      	b.n	800b4c4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b1e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1e8:	2b7f      	cmp	r3, #127	; 0x7f
 800b1ea:	d809      	bhi.n	800b200 <create_name+0xa4>
 800b1ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1ee:	4619      	mov	r1, r3
 800b1f0:	488d      	ldr	r0, [pc, #564]	; (800b428 <create_name+0x2cc>)
 800b1f2:	f7fe fce0 	bl	8009bb6 <chk_chr>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d001      	beq.n	800b200 <create_name+0xa4>
 800b1fc:	2306      	movs	r3, #6
 800b1fe:	e161      	b.n	800b4c4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800b200:	697b      	ldr	r3, [r7, #20]
 800b202:	1c5a      	adds	r2, r3, #1
 800b204:	617a      	str	r2, [r7, #20]
 800b206:	005b      	lsls	r3, r3, #1
 800b208:	68fa      	ldr	r2, [r7, #12]
 800b20a:	4413      	add	r3, r2
 800b20c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b20e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b210:	e7b4      	b.n	800b17c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b212:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b214:	693a      	ldr	r2, [r7, #16]
 800b216:	69bb      	ldr	r3, [r7, #24]
 800b218:	441a      	add	r2, r3
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b21e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b220:	2b1f      	cmp	r3, #31
 800b222:	d801      	bhi.n	800b228 <create_name+0xcc>
 800b224:	2304      	movs	r3, #4
 800b226:	e000      	b.n	800b22a <create_name+0xce>
 800b228:	2300      	movs	r3, #0
 800b22a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b22e:	e011      	b.n	800b254 <create_name+0xf8>
		w = lfn[di - 1];
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b236:	3b01      	subs	r3, #1
 800b238:	005b      	lsls	r3, r3, #1
 800b23a:	68fa      	ldr	r2, [r7, #12]
 800b23c:	4413      	add	r3, r2
 800b23e:	881b      	ldrh	r3, [r3, #0]
 800b240:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b244:	2b20      	cmp	r3, #32
 800b246:	d002      	beq.n	800b24e <create_name+0xf2>
 800b248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b24a:	2b2e      	cmp	r3, #46	; 0x2e
 800b24c:	d106      	bne.n	800b25c <create_name+0x100>
		di--;
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	3b01      	subs	r3, #1
 800b252:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	2b00      	cmp	r3, #0
 800b258:	d1ea      	bne.n	800b230 <create_name+0xd4>
 800b25a:	e000      	b.n	800b25e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b25c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	005b      	lsls	r3, r3, #1
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	4413      	add	r3, r2
 800b266:	2200      	movs	r2, #0
 800b268:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d101      	bne.n	800b274 <create_name+0x118>
 800b270:	2306      	movs	r3, #6
 800b272:	e127      	b.n	800b4c4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	3324      	adds	r3, #36	; 0x24
 800b278:	220b      	movs	r2, #11
 800b27a:	2120      	movs	r1, #32
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7fe fc58 	bl	8009b32 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b282:	2300      	movs	r3, #0
 800b284:	61bb      	str	r3, [r7, #24]
 800b286:	e002      	b.n	800b28e <create_name+0x132>
 800b288:	69bb      	ldr	r3, [r7, #24]
 800b28a:	3301      	adds	r3, #1
 800b28c:	61bb      	str	r3, [r7, #24]
 800b28e:	69bb      	ldr	r3, [r7, #24]
 800b290:	005b      	lsls	r3, r3, #1
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	4413      	add	r3, r2
 800b296:	881b      	ldrh	r3, [r3, #0]
 800b298:	2b20      	cmp	r3, #32
 800b29a:	d0f5      	beq.n	800b288 <create_name+0x12c>
 800b29c:	69bb      	ldr	r3, [r7, #24]
 800b29e:	005b      	lsls	r3, r3, #1
 800b2a0:	68fa      	ldr	r2, [r7, #12]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	881b      	ldrh	r3, [r3, #0]
 800b2a6:	2b2e      	cmp	r3, #46	; 0x2e
 800b2a8:	d0ee      	beq.n	800b288 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d009      	beq.n	800b2c4 <create_name+0x168>
 800b2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2b4:	f043 0303 	orr.w	r3, r3, #3
 800b2b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b2bc:	e002      	b.n	800b2c4 <create_name+0x168>
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	3b01      	subs	r3, #1
 800b2c2:	617b      	str	r3, [r7, #20]
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d009      	beq.n	800b2de <create_name+0x182>
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2d0:	3b01      	subs	r3, #1
 800b2d2:	005b      	lsls	r3, r3, #1
 800b2d4:	68fa      	ldr	r2, [r7, #12]
 800b2d6:	4413      	add	r3, r2
 800b2d8:	881b      	ldrh	r3, [r3, #0]
 800b2da:	2b2e      	cmp	r3, #46	; 0x2e
 800b2dc:	d1ef      	bne.n	800b2be <create_name+0x162>

	i = b = 0; ni = 8;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	623b      	str	r3, [r7, #32]
 800b2e8:	2308      	movs	r3, #8
 800b2ea:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b2ec:	69bb      	ldr	r3, [r7, #24]
 800b2ee:	1c5a      	adds	r2, r3, #1
 800b2f0:	61ba      	str	r2, [r7, #24]
 800b2f2:	005b      	lsls	r3, r3, #1
 800b2f4:	68fa      	ldr	r2, [r7, #12]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	881b      	ldrh	r3, [r3, #0]
 800b2fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b2fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	f000 8090 	beq.w	800b424 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b304:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b306:	2b20      	cmp	r3, #32
 800b308:	d006      	beq.n	800b318 <create_name+0x1bc>
 800b30a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b30c:	2b2e      	cmp	r3, #46	; 0x2e
 800b30e:	d10a      	bne.n	800b326 <create_name+0x1ca>
 800b310:	69ba      	ldr	r2, [r7, #24]
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	429a      	cmp	r2, r3
 800b316:	d006      	beq.n	800b326 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b31c:	f043 0303 	orr.w	r3, r3, #3
 800b320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b324:	e07d      	b.n	800b422 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b326:	6a3a      	ldr	r2, [r7, #32]
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d203      	bcs.n	800b336 <create_name+0x1da>
 800b32e:	69ba      	ldr	r2, [r7, #24]
 800b330:	697b      	ldr	r3, [r7, #20]
 800b332:	429a      	cmp	r2, r3
 800b334:	d123      	bne.n	800b37e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b336:	69fb      	ldr	r3, [r7, #28]
 800b338:	2b0b      	cmp	r3, #11
 800b33a:	d106      	bne.n	800b34a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b33c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b340:	f043 0303 	orr.w	r3, r3, #3
 800b344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b348:	e075      	b.n	800b436 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b34a:	69ba      	ldr	r2, [r7, #24]
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d005      	beq.n	800b35e <create_name+0x202>
 800b352:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b356:	f043 0303 	orr.w	r3, r3, #3
 800b35a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b35e:	69ba      	ldr	r2, [r7, #24]
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	429a      	cmp	r2, r3
 800b364:	d866      	bhi.n	800b434 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b366:	697b      	ldr	r3, [r7, #20]
 800b368:	61bb      	str	r3, [r7, #24]
 800b36a:	2308      	movs	r3, #8
 800b36c:	623b      	str	r3, [r7, #32]
 800b36e:	230b      	movs	r3, #11
 800b370:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b372:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b37c:	e051      	b.n	800b422 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b37e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b380:	2b7f      	cmp	r3, #127	; 0x7f
 800b382:	d914      	bls.n	800b3ae <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b384:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b386:	2100      	movs	r1, #0
 800b388:	4618      	mov	r0, r3
 800b38a:	f001 f95b 	bl	800c644 <ff_convert>
 800b38e:	4603      	mov	r3, r0
 800b390:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b392:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b394:	2b00      	cmp	r3, #0
 800b396:	d004      	beq.n	800b3a2 <create_name+0x246>
 800b398:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b39a:	3b80      	subs	r3, #128	; 0x80
 800b39c:	4a23      	ldr	r2, [pc, #140]	; (800b42c <create_name+0x2d0>)
 800b39e:	5cd3      	ldrb	r3, [r2, r3]
 800b3a0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b3a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3a6:	f043 0302 	orr.w	r3, r3, #2
 800b3aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b3ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d007      	beq.n	800b3c4 <create_name+0x268>
 800b3b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	481d      	ldr	r0, [pc, #116]	; (800b430 <create_name+0x2d4>)
 800b3ba:	f7fe fbfc 	bl	8009bb6 <chk_chr>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d008      	beq.n	800b3d6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b3c4:	235f      	movs	r3, #95	; 0x5f
 800b3c6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b3c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3cc:	f043 0303 	orr.w	r3, r3, #3
 800b3d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3d4:	e01b      	b.n	800b40e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b3d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3d8:	2b40      	cmp	r3, #64	; 0x40
 800b3da:	d909      	bls.n	800b3f0 <create_name+0x294>
 800b3dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3de:	2b5a      	cmp	r3, #90	; 0x5a
 800b3e0:	d806      	bhi.n	800b3f0 <create_name+0x294>
					b |= 2;
 800b3e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3e6:	f043 0302 	orr.w	r3, r3, #2
 800b3ea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b3ee:	e00e      	b.n	800b40e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b3f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3f2:	2b60      	cmp	r3, #96	; 0x60
 800b3f4:	d90b      	bls.n	800b40e <create_name+0x2b2>
 800b3f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3f8:	2b7a      	cmp	r3, #122	; 0x7a
 800b3fa:	d808      	bhi.n	800b40e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b3fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b400:	f043 0301 	orr.w	r3, r3, #1
 800b404:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b408:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b40a:	3b20      	subs	r3, #32
 800b40c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b40e:	6a3b      	ldr	r3, [r7, #32]
 800b410:	1c5a      	adds	r2, r3, #1
 800b412:	623a      	str	r2, [r7, #32]
 800b414:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b416:	b2d1      	uxtb	r1, r2
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	4413      	add	r3, r2
 800b41c:	460a      	mov	r2, r1
 800b41e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b422:	e763      	b.n	800b2ec <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b424:	bf00      	nop
 800b426:	e006      	b.n	800b436 <create_name+0x2da>
 800b428:	0800f8e8 	.word	0x0800f8e8
 800b42c:	08010130 	.word	0x08010130
 800b430:	0800f8f4 	.word	0x0800f8f4
			if (si > di) break;			/* No extension */
 800b434:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b43c:	2be5      	cmp	r3, #229	; 0xe5
 800b43e:	d103      	bne.n	800b448 <create_name+0x2ec>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2205      	movs	r2, #5
 800b444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	2b08      	cmp	r3, #8
 800b44c:	d104      	bne.n	800b458 <create_name+0x2fc>
 800b44e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b452:	009b      	lsls	r3, r3, #2
 800b454:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b458:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b45c:	f003 030c 	and.w	r3, r3, #12
 800b460:	2b0c      	cmp	r3, #12
 800b462:	d005      	beq.n	800b470 <create_name+0x314>
 800b464:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b468:	f003 0303 	and.w	r3, r3, #3
 800b46c:	2b03      	cmp	r3, #3
 800b46e:	d105      	bne.n	800b47c <create_name+0x320>
 800b470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b474:	f043 0302 	orr.w	r3, r3, #2
 800b478:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b47c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b480:	f003 0302 	and.w	r3, r3, #2
 800b484:	2b00      	cmp	r3, #0
 800b486:	d117      	bne.n	800b4b8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b488:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b48c:	f003 0303 	and.w	r3, r3, #3
 800b490:	2b01      	cmp	r3, #1
 800b492:	d105      	bne.n	800b4a0 <create_name+0x344>
 800b494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b498:	f043 0310 	orr.w	r3, r3, #16
 800b49c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b4a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4a4:	f003 030c 	and.w	r3, r3, #12
 800b4a8:	2b04      	cmp	r3, #4
 800b4aa:	d105      	bne.n	800b4b8 <create_name+0x35c>
 800b4ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4b0:	f043 0308 	orr.w	r3, r3, #8
 800b4b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b4be:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b4c2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b4c4:	4618      	mov	r0, r3
 800b4c6:	3728      	adds	r7, #40	; 0x28
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b086      	sub	sp, #24
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
 800b4d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b4e0:	e002      	b.n	800b4e8 <follow_path+0x1c>
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	603b      	str	r3, [r7, #0]
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	781b      	ldrb	r3, [r3, #0]
 800b4ec:	2b2f      	cmp	r3, #47	; 0x2f
 800b4ee:	d0f8      	beq.n	800b4e2 <follow_path+0x16>
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	781b      	ldrb	r3, [r3, #0]
 800b4f4:	2b5c      	cmp	r3, #92	; 0x5c
 800b4f6:	d0f4      	beq.n	800b4e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	2b1f      	cmp	r3, #31
 800b504:	d80a      	bhi.n	800b51c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2280      	movs	r2, #128	; 0x80
 800b50a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b50e:	2100      	movs	r1, #0
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f7ff f8fd 	bl	800a710 <dir_sdi>
 800b516:	4603      	mov	r3, r0
 800b518:	75fb      	strb	r3, [r7, #23]
 800b51a:	e048      	b.n	800b5ae <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b51c:	463b      	mov	r3, r7
 800b51e:	4619      	mov	r1, r3
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f7ff fe1b 	bl	800b15c <create_name>
 800b526:	4603      	mov	r3, r0
 800b528:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b52a:	7dfb      	ldrb	r3, [r7, #23]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d139      	bne.n	800b5a4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7ff fc5a 	bl	800adea <dir_find>
 800b536:	4603      	mov	r3, r0
 800b538:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b540:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b542:	7dfb      	ldrb	r3, [r7, #23]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d00a      	beq.n	800b55e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b548:	7dfb      	ldrb	r3, [r7, #23]
 800b54a:	2b04      	cmp	r3, #4
 800b54c:	d12c      	bne.n	800b5a8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b54e:	7afb      	ldrb	r3, [r7, #11]
 800b550:	f003 0304 	and.w	r3, r3, #4
 800b554:	2b00      	cmp	r3, #0
 800b556:	d127      	bne.n	800b5a8 <follow_path+0xdc>
 800b558:	2305      	movs	r3, #5
 800b55a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b55c:	e024      	b.n	800b5a8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b55e:	7afb      	ldrb	r3, [r7, #11]
 800b560:	f003 0304 	and.w	r3, r3, #4
 800b564:	2b00      	cmp	r3, #0
 800b566:	d121      	bne.n	800b5ac <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b568:	693b      	ldr	r3, [r7, #16]
 800b56a:	799b      	ldrb	r3, [r3, #6]
 800b56c:	f003 0310 	and.w	r3, r3, #16
 800b570:	2b00      	cmp	r3, #0
 800b572:	d102      	bne.n	800b57a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b574:	2305      	movs	r3, #5
 800b576:	75fb      	strb	r3, [r7, #23]
 800b578:	e019      	b.n	800b5ae <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	695b      	ldr	r3, [r3, #20]
 800b584:	68fa      	ldr	r2, [r7, #12]
 800b586:	8992      	ldrh	r2, [r2, #12]
 800b588:	fbb3 f0f2 	udiv	r0, r3, r2
 800b58c:	fb00 f202 	mul.w	r2, r0, r2
 800b590:	1a9b      	subs	r3, r3, r2
 800b592:	440b      	add	r3, r1
 800b594:	4619      	mov	r1, r3
 800b596:	68f8      	ldr	r0, [r7, #12]
 800b598:	f7ff fa60 	bl	800aa5c <ld_clust>
 800b59c:	4602      	mov	r2, r0
 800b59e:	693b      	ldr	r3, [r7, #16]
 800b5a0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b5a2:	e7bb      	b.n	800b51c <follow_path+0x50>
			if (res != FR_OK) break;
 800b5a4:	bf00      	nop
 800b5a6:	e002      	b.n	800b5ae <follow_path+0xe2>
				break;
 800b5a8:	bf00      	nop
 800b5aa:	e000      	b.n	800b5ae <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b5ac:	bf00      	nop
			}
		}
	}

	return res;
 800b5ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3718      	adds	r7, #24
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}

0800b5b8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b5b8:	b480      	push	{r7}
 800b5ba:	b087      	sub	sp, #28
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b5c0:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d031      	beq.n	800b632 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	617b      	str	r3, [r7, #20]
 800b5d4:	e002      	b.n	800b5dc <get_ldnumber+0x24>
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	3301      	adds	r3, #1
 800b5da:	617b      	str	r3, [r7, #20]
 800b5dc:	697b      	ldr	r3, [r7, #20]
 800b5de:	781b      	ldrb	r3, [r3, #0]
 800b5e0:	2b1f      	cmp	r3, #31
 800b5e2:	d903      	bls.n	800b5ec <get_ldnumber+0x34>
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	2b3a      	cmp	r3, #58	; 0x3a
 800b5ea:	d1f4      	bne.n	800b5d6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	781b      	ldrb	r3, [r3, #0]
 800b5f0:	2b3a      	cmp	r3, #58	; 0x3a
 800b5f2:	d11c      	bne.n	800b62e <get_ldnumber+0x76>
			tp = *path;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	1c5a      	adds	r2, r3, #1
 800b5fe:	60fa      	str	r2, [r7, #12]
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	3b30      	subs	r3, #48	; 0x30
 800b604:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	2b09      	cmp	r3, #9
 800b60a:	d80e      	bhi.n	800b62a <get_ldnumber+0x72>
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	429a      	cmp	r2, r3
 800b612:	d10a      	bne.n	800b62a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d107      	bne.n	800b62a <get_ldnumber+0x72>
					vol = (int)i;
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b61e:	697b      	ldr	r3, [r7, #20]
 800b620:	3301      	adds	r3, #1
 800b622:	617b      	str	r3, [r7, #20]
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	697a      	ldr	r2, [r7, #20]
 800b628:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	e002      	b.n	800b634 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b62e:	2300      	movs	r3, #0
 800b630:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b632:	693b      	ldr	r3, [r7, #16]
}
 800b634:	4618      	mov	r0, r3
 800b636:	371c      	adds	r7, #28
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2200      	movs	r2, #0
 800b64e:	70da      	strb	r2, [r3, #3]
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f04f 32ff 	mov.w	r2, #4294967295
 800b656:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b658:	6839      	ldr	r1, [r7, #0]
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7fe fc76 	bl	8009f4c <move_window>
 800b660:	4603      	mov	r3, r0
 800b662:	2b00      	cmp	r3, #0
 800b664:	d001      	beq.n	800b66a <check_fs+0x2a>
 800b666:	2304      	movs	r3, #4
 800b668:	e038      	b.n	800b6dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	3338      	adds	r3, #56	; 0x38
 800b66e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b672:	4618      	mov	r0, r3
 800b674:	f7fe f9ba 	bl	80099ec <ld_word>
 800b678:	4603      	mov	r3, r0
 800b67a:	461a      	mov	r2, r3
 800b67c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b680:	429a      	cmp	r2, r3
 800b682:	d001      	beq.n	800b688 <check_fs+0x48>
 800b684:	2303      	movs	r3, #3
 800b686:	e029      	b.n	800b6dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b68e:	2be9      	cmp	r3, #233	; 0xe9
 800b690:	d009      	beq.n	800b6a6 <check_fs+0x66>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b698:	2beb      	cmp	r3, #235	; 0xeb
 800b69a:	d11e      	bne.n	800b6da <check_fs+0x9a>
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b6a2:	2b90      	cmp	r3, #144	; 0x90
 800b6a4:	d119      	bne.n	800b6da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	3338      	adds	r3, #56	; 0x38
 800b6aa:	3336      	adds	r3, #54	; 0x36
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	f7fe f9b5 	bl	8009a1c <ld_dword>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b6b8:	4a0a      	ldr	r2, [pc, #40]	; (800b6e4 <check_fs+0xa4>)
 800b6ba:	4293      	cmp	r3, r2
 800b6bc:	d101      	bne.n	800b6c2 <check_fs+0x82>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	e00c      	b.n	800b6dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	3338      	adds	r3, #56	; 0x38
 800b6c6:	3352      	adds	r3, #82	; 0x52
 800b6c8:	4618      	mov	r0, r3
 800b6ca:	f7fe f9a7 	bl	8009a1c <ld_dword>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	4a05      	ldr	r2, [pc, #20]	; (800b6e8 <check_fs+0xa8>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d101      	bne.n	800b6da <check_fs+0x9a>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	e000      	b.n	800b6dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b6da:	2302      	movs	r3, #2
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3708      	adds	r7, #8
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd80      	pop	{r7, pc}
 800b6e4:	00544146 	.word	0x00544146
 800b6e8:	33544146 	.word	0x33544146

0800b6ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b096      	sub	sp, #88	; 0x58
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	60f8      	str	r0, [r7, #12]
 800b6f4:	60b9      	str	r1, [r7, #8]
 800b6f6:	4613      	mov	r3, r2
 800b6f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b700:	68f8      	ldr	r0, [r7, #12]
 800b702:	f7ff ff59 	bl	800b5b8 <get_ldnumber>
 800b706:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	da01      	bge.n	800b712 <find_volume+0x26>
 800b70e:	230b      	movs	r3, #11
 800b710:	e265      	b.n	800bbde <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b712:	4a9f      	ldr	r2, [pc, #636]	; (800b990 <find_volume+0x2a4>)
 800b714:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b71a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d101      	bne.n	800b726 <find_volume+0x3a>
 800b722:	230c      	movs	r3, #12
 800b724:	e25b      	b.n	800bbde <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b72a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b72c:	79fb      	ldrb	r3, [r7, #7]
 800b72e:	f023 0301 	bic.w	r3, r3, #1
 800b732:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d01a      	beq.n	800b772 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73e:	785b      	ldrb	r3, [r3, #1]
 800b740:	4618      	mov	r0, r3
 800b742:	f7fe f8b5 	bl	80098b0 <disk_status>
 800b746:	4603      	mov	r3, r0
 800b748:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b74c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b750:	f003 0301 	and.w	r3, r3, #1
 800b754:	2b00      	cmp	r3, #0
 800b756:	d10c      	bne.n	800b772 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b758:	79fb      	ldrb	r3, [r7, #7]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d007      	beq.n	800b76e <find_volume+0x82>
 800b75e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b762:	f003 0304 	and.w	r3, r3, #4
 800b766:	2b00      	cmp	r3, #0
 800b768:	d001      	beq.n	800b76e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b76a:	230a      	movs	r3, #10
 800b76c:	e237      	b.n	800bbde <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800b76e:	2300      	movs	r3, #0
 800b770:	e235      	b.n	800bbde <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b774:	2200      	movs	r2, #0
 800b776:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b77a:	b2da      	uxtb	r2, r3
 800b77c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b77e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b782:	785b      	ldrb	r3, [r3, #1]
 800b784:	4618      	mov	r0, r3
 800b786:	f7fe f8ad 	bl	80098e4 <disk_initialize>
 800b78a:	4603      	mov	r3, r0
 800b78c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b790:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b794:	f003 0301 	and.w	r3, r3, #1
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d001      	beq.n	800b7a0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b79c:	2303      	movs	r3, #3
 800b79e:	e21e      	b.n	800bbde <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b7a0:	79fb      	ldrb	r3, [r7, #7]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d007      	beq.n	800b7b6 <find_volume+0xca>
 800b7a6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b7aa:	f003 0304 	and.w	r3, r3, #4
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d001      	beq.n	800b7b6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b7b2:	230a      	movs	r3, #10
 800b7b4:	e213      	b.n	800bbde <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800b7b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7b8:	7858      	ldrb	r0, [r3, #1]
 800b7ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7bc:	330c      	adds	r3, #12
 800b7be:	461a      	mov	r2, r3
 800b7c0:	2102      	movs	r1, #2
 800b7c2:	f7fe f8f5 	bl	80099b0 <disk_ioctl>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d001      	beq.n	800b7d0 <find_volume+0xe4>
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e206      	b.n	800bbde <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800b7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d2:	899b      	ldrh	r3, [r3, #12]
 800b7d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7d8:	d80d      	bhi.n	800b7f6 <find_volume+0x10a>
 800b7da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7dc:	899b      	ldrh	r3, [r3, #12]
 800b7de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7e2:	d308      	bcc.n	800b7f6 <find_volume+0x10a>
 800b7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e6:	899b      	ldrh	r3, [r3, #12]
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ec:	899b      	ldrh	r3, [r3, #12]
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d001      	beq.n	800b7fa <find_volume+0x10e>
 800b7f6:	2301      	movs	r3, #1
 800b7f8:	e1f1      	b.n	800bbde <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b7fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b800:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b802:	f7ff ff1d 	bl	800b640 <check_fs>
 800b806:	4603      	mov	r3, r0
 800b808:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b80c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b810:	2b02      	cmp	r3, #2
 800b812:	d149      	bne.n	800b8a8 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b814:	2300      	movs	r3, #0
 800b816:	643b      	str	r3, [r7, #64]	; 0x40
 800b818:	e01e      	b.n	800b858 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b81c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b822:	011b      	lsls	r3, r3, #4
 800b824:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b828:	4413      	add	r3, r2
 800b82a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82e:	3304      	adds	r3, #4
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d006      	beq.n	800b844 <find_volume+0x158>
 800b836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b838:	3308      	adds	r3, #8
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fe f8ee 	bl	8009a1c <ld_dword>
 800b840:	4602      	mov	r2, r0
 800b842:	e000      	b.n	800b846 <find_volume+0x15a>
 800b844:	2200      	movs	r2, #0
 800b846:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b848:	009b      	lsls	r3, r3, #2
 800b84a:	3358      	adds	r3, #88	; 0x58
 800b84c:	443b      	add	r3, r7
 800b84e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b854:	3301      	adds	r3, #1
 800b856:	643b      	str	r3, [r7, #64]	; 0x40
 800b858:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b85a:	2b03      	cmp	r3, #3
 800b85c:	d9dd      	bls.n	800b81a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b85e:	2300      	movs	r3, #0
 800b860:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b864:	2b00      	cmp	r3, #0
 800b866:	d002      	beq.n	800b86e <find_volume+0x182>
 800b868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b86a:	3b01      	subs	r3, #1
 800b86c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b86e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b870:	009b      	lsls	r3, r3, #2
 800b872:	3358      	adds	r3, #88	; 0x58
 800b874:	443b      	add	r3, r7
 800b876:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b87a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b87c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d005      	beq.n	800b88e <find_volume+0x1a2>
 800b882:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b884:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b886:	f7ff fedb 	bl	800b640 <check_fs>
 800b88a:	4603      	mov	r3, r0
 800b88c:	e000      	b.n	800b890 <find_volume+0x1a4>
 800b88e:	2303      	movs	r3, #3
 800b890:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b894:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d905      	bls.n	800b8a8 <find_volume+0x1bc>
 800b89c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b89e:	3301      	adds	r3, #1
 800b8a0:	643b      	str	r3, [r7, #64]	; 0x40
 800b8a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8a4:	2b03      	cmp	r3, #3
 800b8a6:	d9e2      	bls.n	800b86e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b8a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8ac:	2b04      	cmp	r3, #4
 800b8ae:	d101      	bne.n	800b8b4 <find_volume+0x1c8>
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e194      	b.n	800bbde <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b8b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b8b8:	2b01      	cmp	r3, #1
 800b8ba:	d901      	bls.n	800b8c0 <find_volume+0x1d4>
 800b8bc:	230d      	movs	r3, #13
 800b8be:	e18e      	b.n	800bbde <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8c2:	3338      	adds	r3, #56	; 0x38
 800b8c4:	330b      	adds	r3, #11
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7fe f890 	bl	80099ec <ld_word>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	461a      	mov	r2, r3
 800b8d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8d2:	899b      	ldrh	r3, [r3, #12]
 800b8d4:	429a      	cmp	r2, r3
 800b8d6:	d001      	beq.n	800b8dc <find_volume+0x1f0>
 800b8d8:	230d      	movs	r3, #13
 800b8da:	e180      	b.n	800bbde <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b8dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8de:	3338      	adds	r3, #56	; 0x38
 800b8e0:	3316      	adds	r3, #22
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fe f882 	bl	80099ec <ld_word>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b8ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d106      	bne.n	800b900 <find_volume+0x214>
 800b8f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8f4:	3338      	adds	r3, #56	; 0x38
 800b8f6:	3324      	adds	r3, #36	; 0x24
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fe f88f 	bl	8009a1c <ld_dword>
 800b8fe:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b902:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b904:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b908:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800b90c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b90e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b912:	789b      	ldrb	r3, [r3, #2]
 800b914:	2b01      	cmp	r3, #1
 800b916:	d005      	beq.n	800b924 <find_volume+0x238>
 800b918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b91a:	789b      	ldrb	r3, [r3, #2]
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d001      	beq.n	800b924 <find_volume+0x238>
 800b920:	230d      	movs	r3, #13
 800b922:	e15c      	b.n	800bbde <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b926:	789b      	ldrb	r3, [r3, #2]
 800b928:	461a      	mov	r2, r3
 800b92a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b92c:	fb02 f303 	mul.w	r3, r2, r3
 800b930:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b934:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b938:	b29a      	uxth	r2, r3
 800b93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b93c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b940:	895b      	ldrh	r3, [r3, #10]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d008      	beq.n	800b958 <find_volume+0x26c>
 800b946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b948:	895b      	ldrh	r3, [r3, #10]
 800b94a:	461a      	mov	r2, r3
 800b94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94e:	895b      	ldrh	r3, [r3, #10]
 800b950:	3b01      	subs	r3, #1
 800b952:	4013      	ands	r3, r2
 800b954:	2b00      	cmp	r3, #0
 800b956:	d001      	beq.n	800b95c <find_volume+0x270>
 800b958:	230d      	movs	r3, #13
 800b95a:	e140      	b.n	800bbde <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b95c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b95e:	3338      	adds	r3, #56	; 0x38
 800b960:	3311      	adds	r3, #17
 800b962:	4618      	mov	r0, r3
 800b964:	f7fe f842 	bl	80099ec <ld_word>
 800b968:	4603      	mov	r3, r0
 800b96a:	461a      	mov	r2, r3
 800b96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b972:	891b      	ldrh	r3, [r3, #8]
 800b974:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b976:	8992      	ldrh	r2, [r2, #12]
 800b978:	0952      	lsrs	r2, r2, #5
 800b97a:	b292      	uxth	r2, r2
 800b97c:	fbb3 f1f2 	udiv	r1, r3, r2
 800b980:	fb01 f202 	mul.w	r2, r1, r2
 800b984:	1a9b      	subs	r3, r3, r2
 800b986:	b29b      	uxth	r3, r3
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d003      	beq.n	800b994 <find_volume+0x2a8>
 800b98c:	230d      	movs	r3, #13
 800b98e:	e126      	b.n	800bbde <find_volume+0x4f2>
 800b990:	200034ac 	.word	0x200034ac

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b996:	3338      	adds	r3, #56	; 0x38
 800b998:	3313      	adds	r3, #19
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fe f826 	bl	80099ec <ld_word>
 800b9a0:	4603      	mov	r3, r0
 800b9a2:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b9a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d106      	bne.n	800b9b8 <find_volume+0x2cc>
 800b9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ac:	3338      	adds	r3, #56	; 0x38
 800b9ae:	3320      	adds	r3, #32
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f7fe f833 	bl	8009a1c <ld_dword>
 800b9b6:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b9b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ba:	3338      	adds	r3, #56	; 0x38
 800b9bc:	330e      	adds	r3, #14
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7fe f814 	bl	80099ec <ld_word>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b9c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d101      	bne.n	800b9d2 <find_volume+0x2e6>
 800b9ce:	230d      	movs	r3, #13
 800b9d0:	e105      	b.n	800bbde <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b9d2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b9d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9d6:	4413      	add	r3, r2
 800b9d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9da:	8911      	ldrh	r1, [r2, #8]
 800b9dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b9de:	8992      	ldrh	r2, [r2, #12]
 800b9e0:	0952      	lsrs	r2, r2, #5
 800b9e2:	b292      	uxth	r2, r2
 800b9e4:	fbb1 f2f2 	udiv	r2, r1, r2
 800b9e8:	b292      	uxth	r2, r2
 800b9ea:	4413      	add	r3, r2
 800b9ec:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b9ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d201      	bcs.n	800b9fa <find_volume+0x30e>
 800b9f6:	230d      	movs	r3, #13
 800b9f8:	e0f1      	b.n	800bbde <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b9fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9fe:	1ad3      	subs	r3, r2, r3
 800ba00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba02:	8952      	ldrh	r2, [r2, #10]
 800ba04:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba08:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ba0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d101      	bne.n	800ba14 <find_volume+0x328>
 800ba10:	230d      	movs	r3, #13
 800ba12:	e0e4      	b.n	800bbde <find_volume+0x4f2>
		fmt = FS_FAT32;
 800ba14:	2303      	movs	r3, #3
 800ba16:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ba1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba1c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ba20:	4293      	cmp	r3, r2
 800ba22:	d802      	bhi.n	800ba2a <find_volume+0x33e>
 800ba24:	2302      	movs	r3, #2
 800ba26:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d802      	bhi.n	800ba3a <find_volume+0x34e>
 800ba34:	2301      	movs	r3, #1
 800ba36:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3c:	1c9a      	adds	r2, r3, #2
 800ba3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba40:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800ba42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba46:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ba48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba4c:	441a      	add	r2, r3
 800ba4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba50:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800ba52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba56:	441a      	add	r2, r3
 800ba58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba5a:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800ba5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ba60:	2b03      	cmp	r3, #3
 800ba62:	d11e      	bne.n	800baa2 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ba64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba66:	3338      	adds	r3, #56	; 0x38
 800ba68:	332a      	adds	r3, #42	; 0x2a
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fd ffbe 	bl	80099ec <ld_word>
 800ba70:	4603      	mov	r3, r0
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d001      	beq.n	800ba7a <find_volume+0x38e>
 800ba76:	230d      	movs	r3, #13
 800ba78:	e0b1      	b.n	800bbde <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ba7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba7c:	891b      	ldrh	r3, [r3, #8]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d001      	beq.n	800ba86 <find_volume+0x39a>
 800ba82:	230d      	movs	r3, #13
 800ba84:	e0ab      	b.n	800bbde <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ba86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba88:	3338      	adds	r3, #56	; 0x38
 800ba8a:	332c      	adds	r3, #44	; 0x2c
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	f7fd ffc5 	bl	8009a1c <ld_dword>
 800ba92:	4602      	mov	r2, r0
 800ba94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba96:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ba98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9a:	69db      	ldr	r3, [r3, #28]
 800ba9c:	009b      	lsls	r3, r3, #2
 800ba9e:	647b      	str	r3, [r7, #68]	; 0x44
 800baa0:	e01f      	b.n	800bae2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800baa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa4:	891b      	ldrh	r3, [r3, #8]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d101      	bne.n	800baae <find_volume+0x3c2>
 800baaa:	230d      	movs	r3, #13
 800baac:	e097      	b.n	800bbde <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800baae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bab2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bab4:	441a      	add	r2, r3
 800bab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab8:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800baba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800babe:	2b02      	cmp	r3, #2
 800bac0:	d103      	bne.n	800baca <find_volume+0x3de>
 800bac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bac4:	69db      	ldr	r3, [r3, #28]
 800bac6:	005b      	lsls	r3, r3, #1
 800bac8:	e00a      	b.n	800bae0 <find_volume+0x3f4>
 800baca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bacc:	69da      	ldr	r2, [r3, #28]
 800bace:	4613      	mov	r3, r2
 800bad0:	005b      	lsls	r3, r3, #1
 800bad2:	4413      	add	r3, r2
 800bad4:	085a      	lsrs	r2, r3, #1
 800bad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad8:	69db      	ldr	r3, [r3, #28]
 800bada:	f003 0301 	and.w	r3, r3, #1
 800bade:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bae0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae4:	6a1a      	ldr	r2, [r3, #32]
 800bae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae8:	899b      	ldrh	r3, [r3, #12]
 800baea:	4619      	mov	r1, r3
 800baec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800baee:	440b      	add	r3, r1
 800baf0:	3b01      	subs	r3, #1
 800baf2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800baf4:	8989      	ldrh	r1, [r1, #12]
 800baf6:	fbb3 f3f1 	udiv	r3, r3, r1
 800bafa:	429a      	cmp	r2, r3
 800bafc:	d201      	bcs.n	800bb02 <find_volume+0x416>
 800bafe:	230d      	movs	r3, #13
 800bb00:	e06d      	b.n	800bbde <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bb02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb04:	f04f 32ff 	mov.w	r2, #4294967295
 800bb08:	619a      	str	r2, [r3, #24]
 800bb0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb0c:	699a      	ldr	r2, [r3, #24]
 800bb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb10:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800bb12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb14:	2280      	movs	r2, #128	; 0x80
 800bb16:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bb18:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb1c:	2b03      	cmp	r3, #3
 800bb1e:	d149      	bne.n	800bbb4 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bb20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb22:	3338      	adds	r3, #56	; 0x38
 800bb24:	3330      	adds	r3, #48	; 0x30
 800bb26:	4618      	mov	r0, r3
 800bb28:	f7fd ff60 	bl	80099ec <ld_word>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d140      	bne.n	800bbb4 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bb32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb34:	3301      	adds	r3, #1
 800bb36:	4619      	mov	r1, r3
 800bb38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb3a:	f7fe fa07 	bl	8009f4c <move_window>
 800bb3e:	4603      	mov	r3, r0
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d137      	bne.n	800bbb4 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800bb44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb46:	2200      	movs	r2, #0
 800bb48:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bb4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb4c:	3338      	adds	r3, #56	; 0x38
 800bb4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bb52:	4618      	mov	r0, r3
 800bb54:	f7fd ff4a 	bl	80099ec <ld_word>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	461a      	mov	r2, r3
 800bb5c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d127      	bne.n	800bbb4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bb64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb66:	3338      	adds	r3, #56	; 0x38
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fd ff57 	bl	8009a1c <ld_dword>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	4a1d      	ldr	r2, [pc, #116]	; (800bbe8 <find_volume+0x4fc>)
 800bb72:	4293      	cmp	r3, r2
 800bb74:	d11e      	bne.n	800bbb4 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bb76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb78:	3338      	adds	r3, #56	; 0x38
 800bb7a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f7fd ff4c 	bl	8009a1c <ld_dword>
 800bb84:	4603      	mov	r3, r0
 800bb86:	4a19      	ldr	r2, [pc, #100]	; (800bbec <find_volume+0x500>)
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d113      	bne.n	800bbb4 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb8e:	3338      	adds	r3, #56	; 0x38
 800bb90:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bb94:	4618      	mov	r0, r3
 800bb96:	f7fd ff41 	bl	8009a1c <ld_dword>
 800bb9a:	4602      	mov	r2, r0
 800bb9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb9e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bba2:	3338      	adds	r3, #56	; 0x38
 800bba4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bba8:	4618      	mov	r0, r3
 800bbaa:	f7fd ff37 	bl	8009a1c <ld_dword>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bbba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bbbc:	4b0c      	ldr	r3, [pc, #48]	; (800bbf0 <find_volume+0x504>)
 800bbbe:	881b      	ldrh	r3, [r3, #0]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	b29a      	uxth	r2, r3
 800bbc4:	4b0a      	ldr	r3, [pc, #40]	; (800bbf0 <find_volume+0x504>)
 800bbc6:	801a      	strh	r2, [r3, #0]
 800bbc8:	4b09      	ldr	r3, [pc, #36]	; (800bbf0 <find_volume+0x504>)
 800bbca:	881a      	ldrh	r2, [r3, #0]
 800bbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbce:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800bbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd2:	4a08      	ldr	r2, [pc, #32]	; (800bbf4 <find_volume+0x508>)
 800bbd4:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bbd6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bbd8:	f7fe f950 	bl	8009e7c <clear_lock>
#endif
	return FR_OK;
 800bbdc:	2300      	movs	r3, #0
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3758      	adds	r7, #88	; 0x58
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	41615252 	.word	0x41615252
 800bbec:	61417272 	.word	0x61417272
 800bbf0:	200034b0 	.word	0x200034b0
 800bbf4:	200034d4 	.word	0x200034d4

0800bbf8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bc02:	2309      	movs	r3, #9
 800bc04:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d01c      	beq.n	800bc46 <validate+0x4e>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	681b      	ldr	r3, [r3, #0]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d018      	beq.n	800bc46 <validate+0x4e>
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	2b00      	cmp	r3, #0
 800bc1c:	d013      	beq.n	800bc46 <validate+0x4e>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	889a      	ldrh	r2, [r3, #4]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	88db      	ldrh	r3, [r3, #6]
 800bc28:	429a      	cmp	r2, r3
 800bc2a:	d10c      	bne.n	800bc46 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	785b      	ldrb	r3, [r3, #1]
 800bc32:	4618      	mov	r0, r3
 800bc34:	f7fd fe3c 	bl	80098b0 <disk_status>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	f003 0301 	and.w	r3, r3, #1
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d101      	bne.n	800bc46 <validate+0x4e>
			res = FR_OK;
 800bc42:	2300      	movs	r3, #0
 800bc44:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bc46:	7bfb      	ldrb	r3, [r7, #15]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d102      	bne.n	800bc52 <validate+0x5a>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	e000      	b.n	800bc54 <validate+0x5c>
 800bc52:	2300      	movs	r3, #0
 800bc54:	683a      	ldr	r2, [r7, #0]
 800bc56:	6013      	str	r3, [r2, #0]
	return res;
 800bc58:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}
	...

0800bc64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bc64:	b580      	push	{r7, lr}
 800bc66:	b088      	sub	sp, #32
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	4613      	mov	r3, r2
 800bc70:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bc76:	f107 0310 	add.w	r3, r7, #16
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	f7ff fc9c 	bl	800b5b8 <get_ldnumber>
 800bc80:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	da01      	bge.n	800bc8c <f_mount+0x28>
 800bc88:	230b      	movs	r3, #11
 800bc8a:	e02b      	b.n	800bce4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bc8c:	4a17      	ldr	r2, [pc, #92]	; (800bcec <f_mount+0x88>)
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc94:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d005      	beq.n	800bca8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bc9c:	69b8      	ldr	r0, [r7, #24]
 800bc9e:	f7fe f8ed 	bl	8009e7c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bca2:	69bb      	ldr	r3, [r7, #24]
 800bca4:	2200      	movs	r2, #0
 800bca6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d002      	beq.n	800bcb4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	490d      	ldr	r1, [pc, #52]	; (800bcec <f_mount+0x88>)
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d002      	beq.n	800bcca <f_mount+0x66>
 800bcc4:	79fb      	ldrb	r3, [r7, #7]
 800bcc6:	2b01      	cmp	r3, #1
 800bcc8:	d001      	beq.n	800bcce <f_mount+0x6a>
 800bcca:	2300      	movs	r3, #0
 800bccc:	e00a      	b.n	800bce4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bcce:	f107 010c 	add.w	r1, r7, #12
 800bcd2:	f107 0308 	add.w	r3, r7, #8
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7ff fd07 	bl	800b6ec <find_volume>
 800bcde:	4603      	mov	r3, r0
 800bce0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bce4:	4618      	mov	r0, r3
 800bce6:	3720      	adds	r7, #32
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}
 800bcec:	200034ac 	.word	0x200034ac

0800bcf0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b09a      	sub	sp, #104	; 0x68
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	60f8      	str	r0, [r7, #12]
 800bcf8:	60b9      	str	r1, [r7, #8]
 800bcfa:	4613      	mov	r3, r2
 800bcfc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d101      	bne.n	800bd08 <f_open+0x18>
 800bd04:	2309      	movs	r3, #9
 800bd06:	e1bb      	b.n	800c080 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bd08:	79fb      	ldrb	r3, [r7, #7]
 800bd0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bd0e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bd10:	79fa      	ldrb	r2, [r7, #7]
 800bd12:	f107 0114 	add.w	r1, r7, #20
 800bd16:	f107 0308 	add.w	r3, r7, #8
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	f7ff fce6 	bl	800b6ec <find_volume>
 800bd20:	4603      	mov	r3, r0
 800bd22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800bd26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	f040 819f 	bne.w	800c06e <f_open+0x37e>
		dj.obj.fs = fs;
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bd34:	68ba      	ldr	r2, [r7, #8]
 800bd36:	f107 0318 	add.w	r3, r7, #24
 800bd3a:	4611      	mov	r1, r2
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	f7ff fbc5 	bl	800b4cc <follow_path>
 800bd42:	4603      	mov	r3, r0
 800bd44:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bd48:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d11a      	bne.n	800bd86 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bd50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800bd54:	b25b      	sxtb	r3, r3
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	da03      	bge.n	800bd62 <f_open+0x72>
				res = FR_INVALID_NAME;
 800bd5a:	2306      	movs	r3, #6
 800bd5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bd60:	e011      	b.n	800bd86 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bd62:	79fb      	ldrb	r3, [r7, #7]
 800bd64:	f023 0301 	bic.w	r3, r3, #1
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	bf14      	ite	ne
 800bd6c:	2301      	movne	r3, #1
 800bd6e:	2300      	moveq	r3, #0
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	461a      	mov	r2, r3
 800bd74:	f107 0318 	add.w	r3, r7, #24
 800bd78:	4611      	mov	r1, r2
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7fd ff36 	bl	8009bec <chk_lock>
 800bd80:	4603      	mov	r3, r0
 800bd82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bd86:	79fb      	ldrb	r3, [r7, #7]
 800bd88:	f003 031c 	and.w	r3, r3, #28
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d07f      	beq.n	800be90 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800bd90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d017      	beq.n	800bdc8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bd98:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bd9c:	2b04      	cmp	r3, #4
 800bd9e:	d10e      	bne.n	800bdbe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bda0:	f7fd ff80 	bl	8009ca4 <enq_lock>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d006      	beq.n	800bdb8 <f_open+0xc8>
 800bdaa:	f107 0318 	add.w	r3, r7, #24
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f7ff f8dc 	bl	800af6c <dir_register>
 800bdb4:	4603      	mov	r3, r0
 800bdb6:	e000      	b.n	800bdba <f_open+0xca>
 800bdb8:	2312      	movs	r3, #18
 800bdba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bdbe:	79fb      	ldrb	r3, [r7, #7]
 800bdc0:	f043 0308 	orr.w	r3, r3, #8
 800bdc4:	71fb      	strb	r3, [r7, #7]
 800bdc6:	e010      	b.n	800bdea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bdc8:	7fbb      	ldrb	r3, [r7, #30]
 800bdca:	f003 0311 	and.w	r3, r3, #17
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d003      	beq.n	800bdda <f_open+0xea>
					res = FR_DENIED;
 800bdd2:	2307      	movs	r3, #7
 800bdd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bdd8:	e007      	b.n	800bdea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bdda:	79fb      	ldrb	r3, [r7, #7]
 800bddc:	f003 0304 	and.w	r3, r3, #4
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d002      	beq.n	800bdea <f_open+0xfa>
 800bde4:	2308      	movs	r3, #8
 800bde6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bdea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d168      	bne.n	800bec4 <f_open+0x1d4>
 800bdf2:	79fb      	ldrb	r3, [r7, #7]
 800bdf4:	f003 0308 	and.w	r3, r3, #8
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d063      	beq.n	800bec4 <f_open+0x1d4>
				dw = GET_FATTIME();
 800bdfc:	f7fd fc56 	bl	80096ac <get_fattime>
 800be00:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800be02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be04:	330e      	adds	r3, #14
 800be06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be08:	4618      	mov	r0, r3
 800be0a:	f7fd fe45 	bl	8009a98 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800be0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be10:	3316      	adds	r3, #22
 800be12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be14:	4618      	mov	r0, r3
 800be16:	f7fd fe3f 	bl	8009a98 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800be1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1c:	330b      	adds	r3, #11
 800be1e:	2220      	movs	r2, #32
 800be20:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be26:	4611      	mov	r1, r2
 800be28:	4618      	mov	r0, r3
 800be2a:	f7fe fe17 	bl	800aa5c <ld_clust>
 800be2e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800be34:	2200      	movs	r2, #0
 800be36:	4618      	mov	r0, r3
 800be38:	f7fe fe2f 	bl	800aa9a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800be3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be3e:	331c      	adds	r3, #28
 800be40:	2100      	movs	r1, #0
 800be42:	4618      	mov	r0, r3
 800be44:	f7fd fe28 	bl	8009a98 <st_dword>
					fs->wflag = 1;
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	2201      	movs	r2, #1
 800be4c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800be4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800be50:	2b00      	cmp	r3, #0
 800be52:	d037      	beq.n	800bec4 <f_open+0x1d4>
						dw = fs->winsect;
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be58:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800be5a:	f107 0318 	add.w	r3, r7, #24
 800be5e:	2200      	movs	r2, #0
 800be60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800be62:	4618      	mov	r0, r3
 800be64:	f7fe fb1f 	bl	800a4a6 <remove_chain>
 800be68:	4603      	mov	r3, r0
 800be6a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800be6e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800be72:	2b00      	cmp	r3, #0
 800be74:	d126      	bne.n	800bec4 <f_open+0x1d4>
							res = move_window(fs, dw);
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800be7a:	4618      	mov	r0, r3
 800be7c:	f7fe f866 	bl	8009f4c <move_window>
 800be80:	4603      	mov	r3, r0
 800be82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800be8a:	3a01      	subs	r2, #1
 800be8c:	615a      	str	r2, [r3, #20]
 800be8e:	e019      	b.n	800bec4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800be90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800be94:	2b00      	cmp	r3, #0
 800be96:	d115      	bne.n	800bec4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800be98:	7fbb      	ldrb	r3, [r7, #30]
 800be9a:	f003 0310 	and.w	r3, r3, #16
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d003      	beq.n	800beaa <f_open+0x1ba>
					res = FR_NO_FILE;
 800bea2:	2304      	movs	r3, #4
 800bea4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800bea8:	e00c      	b.n	800bec4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800beaa:	79fb      	ldrb	r3, [r7, #7]
 800beac:	f003 0302 	and.w	r3, r3, #2
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d007      	beq.n	800bec4 <f_open+0x1d4>
 800beb4:	7fbb      	ldrb	r3, [r7, #30]
 800beb6:	f003 0301 	and.w	r3, r3, #1
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d002      	beq.n	800bec4 <f_open+0x1d4>
						res = FR_DENIED;
 800bebe:	2307      	movs	r3, #7
 800bec0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800bec4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d128      	bne.n	800bf1e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800becc:	79fb      	ldrb	r3, [r7, #7]
 800bece:	f003 0308 	and.w	r3, r3, #8
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d003      	beq.n	800bede <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800bed6:	79fb      	ldrb	r3, [r7, #7]
 800bed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bedc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bee6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800beec:	79fb      	ldrb	r3, [r7, #7]
 800beee:	f023 0301 	bic.w	r3, r3, #1
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	bf14      	ite	ne
 800bef6:	2301      	movne	r3, #1
 800bef8:	2300      	moveq	r3, #0
 800befa:	b2db      	uxtb	r3, r3
 800befc:	461a      	mov	r2, r3
 800befe:	f107 0318 	add.w	r3, r7, #24
 800bf02:	4611      	mov	r1, r2
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7fd feef 	bl	8009ce8 <inc_lock>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d102      	bne.n	800bf1e <f_open+0x22e>
 800bf18:	2302      	movs	r3, #2
 800bf1a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bf1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	f040 80a3 	bne.w	800c06e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bf28:	697b      	ldr	r3, [r7, #20]
 800bf2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bf2c:	4611      	mov	r1, r2
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7fe fd94 	bl	800aa5c <ld_clust>
 800bf34:	4602      	mov	r2, r0
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3c:	331c      	adds	r3, #28
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f7fd fd6c 	bl	8009a1c <ld_dword>
 800bf44:	4602      	mov	r2, r0
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bf50:	697a      	ldr	r2, [r7, #20]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	88da      	ldrh	r2, [r3, #6]
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	79fa      	ldrb	r2, [r7, #7]
 800bf62:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2200      	movs	r2, #0
 800bf68:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2200      	movs	r2, #0
 800bf74:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	3330      	adds	r3, #48	; 0x30
 800bf7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bf7e:	2100      	movs	r1, #0
 800bf80:	4618      	mov	r0, r3
 800bf82:	f7fd fdd6 	bl	8009b32 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bf86:	79fb      	ldrb	r3, [r7, #7]
 800bf88:	f003 0320 	and.w	r3, r3, #32
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d06e      	beq.n	800c06e <f_open+0x37e>
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d06a      	beq.n	800c06e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bf98:	68fb      	ldr	r3, [r7, #12]
 800bf9a:	68da      	ldr	r2, [r3, #12]
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	895b      	ldrh	r3, [r3, #10]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	697b      	ldr	r3, [r7, #20]
 800bfa8:	899b      	ldrh	r3, [r3, #12]
 800bfaa:	fb02 f303 	mul.w	r3, r2, r3
 800bfae:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bfbc:	e016      	b.n	800bfec <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7fe f87f 	bl	800a0c6 <get_fat>
 800bfc8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800bfca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d802      	bhi.n	800bfd6 <f_open+0x2e6>
 800bfd0:	2302      	movs	r3, #2
 800bfd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bfd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bfd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bfdc:	d102      	bne.n	800bfe4 <f_open+0x2f4>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bfe4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bfe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfe8:	1ad3      	subs	r3, r2, r3
 800bfea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bfec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d103      	bne.n	800bffc <f_open+0x30c>
 800bff4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800bff6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d8e0      	bhi.n	800bfbe <f_open+0x2ce>
				}
				fp->clust = clst;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c000:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c002:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c006:	2b00      	cmp	r3, #0
 800c008:	d131      	bne.n	800c06e <f_open+0x37e>
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	899b      	ldrh	r3, [r3, #12]
 800c00e:	461a      	mov	r2, r3
 800c010:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c012:	fbb3 f1f2 	udiv	r1, r3, r2
 800c016:	fb01 f202 	mul.w	r2, r1, r2
 800c01a:	1a9b      	subs	r3, r3, r2
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d026      	beq.n	800c06e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800c024:	4618      	mov	r0, r3
 800c026:	f7fe f82f 	bl	800a088 <clust2sect>
 800c02a:	64f8      	str	r0, [r7, #76]	; 0x4c
 800c02c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d103      	bne.n	800c03a <f_open+0x34a>
						res = FR_INT_ERR;
 800c032:	2302      	movs	r3, #2
 800c034:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800c038:	e019      	b.n	800c06e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	899b      	ldrh	r3, [r3, #12]
 800c03e:	461a      	mov	r2, r3
 800c040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c042:	fbb3 f2f2 	udiv	r2, r3, r2
 800c046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c048:	441a      	add	r2, r3
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	7858      	ldrb	r0, [r3, #1]
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	6a1a      	ldr	r2, [r3, #32]
 800c05c:	2301      	movs	r3, #1
 800c05e:	f7fd fc67 	bl	8009930 <disk_read>
 800c062:	4603      	mov	r3, r0
 800c064:	2b00      	cmp	r3, #0
 800c066:	d002      	beq.n	800c06e <f_open+0x37e>
 800c068:	2301      	movs	r3, #1
 800c06a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c06e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c072:	2b00      	cmp	r3, #0
 800c074:	d002      	beq.n	800c07c <f_open+0x38c>
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	2200      	movs	r2, #0
 800c07a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c07c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800c080:	4618      	mov	r0, r3
 800c082:	3768      	adds	r7, #104	; 0x68
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b08c      	sub	sp, #48	; 0x30
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	60f8      	str	r0, [r7, #12]
 800c090:	60b9      	str	r1, [r7, #8]
 800c092:	607a      	str	r2, [r7, #4]
 800c094:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c096:	68bb      	ldr	r3, [r7, #8]
 800c098:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	2200      	movs	r2, #0
 800c09e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f107 0210 	add.w	r2, r7, #16
 800c0a6:	4611      	mov	r1, r2
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f7ff fda5 	bl	800bbf8 <validate>
 800c0ae:	4603      	mov	r3, r0
 800c0b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c0b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d107      	bne.n	800c0cc <f_write+0x44>
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	7d5b      	ldrb	r3, [r3, #21]
 800c0c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c0c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d002      	beq.n	800c0d2 <f_write+0x4a>
 800c0cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c0d0:	e16a      	b.n	800c3a8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	7d1b      	ldrb	r3, [r3, #20]
 800c0d6:	f003 0302 	and.w	r3, r3, #2
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d101      	bne.n	800c0e2 <f_write+0x5a>
 800c0de:	2307      	movs	r3, #7
 800c0e0:	e162      	b.n	800c3a8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	699a      	ldr	r2, [r3, #24]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	441a      	add	r2, r3
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	699b      	ldr	r3, [r3, #24]
 800c0ee:	429a      	cmp	r2, r3
 800c0f0:	f080 814c 	bcs.w	800c38c <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	699b      	ldr	r3, [r3, #24]
 800c0f8:	43db      	mvns	r3, r3
 800c0fa:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c0fc:	e146      	b.n	800c38c <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	699b      	ldr	r3, [r3, #24]
 800c102:	693a      	ldr	r2, [r7, #16]
 800c104:	8992      	ldrh	r2, [r2, #12]
 800c106:	fbb3 f1f2 	udiv	r1, r3, r2
 800c10a:	fb01 f202 	mul.w	r2, r1, r2
 800c10e:	1a9b      	subs	r3, r3, r2
 800c110:	2b00      	cmp	r3, #0
 800c112:	f040 80f1 	bne.w	800c2f8 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	699b      	ldr	r3, [r3, #24]
 800c11a:	693a      	ldr	r2, [r7, #16]
 800c11c:	8992      	ldrh	r2, [r2, #12]
 800c11e:	fbb3 f3f2 	udiv	r3, r3, r2
 800c122:	693a      	ldr	r2, [r7, #16]
 800c124:	8952      	ldrh	r2, [r2, #10]
 800c126:	3a01      	subs	r2, #1
 800c128:	4013      	ands	r3, r2
 800c12a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d143      	bne.n	800c1ba <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	699b      	ldr	r3, [r3, #24]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d10c      	bne.n	800c154 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c142:	2b00      	cmp	r3, #0
 800c144:	d11a      	bne.n	800c17c <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	2100      	movs	r1, #0
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7fe fa10 	bl	800a570 <create_chain>
 800c150:	62b8      	str	r0, [r7, #40]	; 0x28
 800c152:	e013      	b.n	800c17c <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d007      	beq.n	800c16c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	699b      	ldr	r3, [r3, #24]
 800c160:	4619      	mov	r1, r3
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f7fe fa9c 	bl	800a6a0 <clmt_clust>
 800c168:	62b8      	str	r0, [r7, #40]	; 0x28
 800c16a:	e007      	b.n	800c17c <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	69db      	ldr	r3, [r3, #28]
 800c172:	4619      	mov	r1, r3
 800c174:	4610      	mov	r0, r2
 800c176:	f7fe f9fb 	bl	800a570 <create_chain>
 800c17a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17e:	2b00      	cmp	r3, #0
 800c180:	f000 8109 	beq.w	800c396 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c186:	2b01      	cmp	r3, #1
 800c188:	d104      	bne.n	800c194 <f_write+0x10c>
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2202      	movs	r2, #2
 800c18e:	755a      	strb	r2, [r3, #21]
 800c190:	2302      	movs	r3, #2
 800c192:	e109      	b.n	800c3a8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c19a:	d104      	bne.n	800c1a6 <f_write+0x11e>
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2201      	movs	r2, #1
 800c1a0:	755a      	strb	r2, [r3, #21]
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	e100      	b.n	800c3a8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1aa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	689b      	ldr	r3, [r3, #8]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d102      	bne.n	800c1ba <f_write+0x132>
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c1b8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	7d1b      	ldrb	r3, [r3, #20]
 800c1be:	b25b      	sxtb	r3, r3
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	da18      	bge.n	800c1f6 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	7858      	ldrb	r0, [r3, #1]
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c1ce:	68fb      	ldr	r3, [r7, #12]
 800c1d0:	6a1a      	ldr	r2, [r3, #32]
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	f7fd fbcc 	bl	8009970 <disk_write>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d004      	beq.n	800c1e8 <f_write+0x160>
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	2201      	movs	r2, #1
 800c1e2:	755a      	strb	r2, [r3, #21]
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	e0df      	b.n	800c3a8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	7d1b      	ldrb	r3, [r3, #20]
 800c1ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1f0:	b2da      	uxtb	r2, r3
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c1f6:	693a      	ldr	r2, [r7, #16]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	69db      	ldr	r3, [r3, #28]
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	4610      	mov	r0, r2
 800c200:	f7fd ff42 	bl	800a088 <clust2sect>
 800c204:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d104      	bne.n	800c216 <f_write+0x18e>
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	2202      	movs	r2, #2
 800c210:	755a      	strb	r2, [r3, #21]
 800c212:	2302      	movs	r3, #2
 800c214:	e0c8      	b.n	800c3a8 <f_write+0x320>
			sect += csect;
 800c216:	697a      	ldr	r2, [r7, #20]
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	4413      	add	r3, r2
 800c21c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	899b      	ldrh	r3, [r3, #12]
 800c222:	461a      	mov	r2, r3
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	fbb3 f3f2 	udiv	r3, r3, r2
 800c22a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c22c:	6a3b      	ldr	r3, [r7, #32]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d043      	beq.n	800c2ba <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c232:	69ba      	ldr	r2, [r7, #24]
 800c234:	6a3b      	ldr	r3, [r7, #32]
 800c236:	4413      	add	r3, r2
 800c238:	693a      	ldr	r2, [r7, #16]
 800c23a:	8952      	ldrh	r2, [r2, #10]
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d905      	bls.n	800c24c <f_write+0x1c4>
					cc = fs->csize - csect;
 800c240:	693b      	ldr	r3, [r7, #16]
 800c242:	895b      	ldrh	r3, [r3, #10]
 800c244:	461a      	mov	r2, r3
 800c246:	69bb      	ldr	r3, [r7, #24]
 800c248:	1ad3      	subs	r3, r2, r3
 800c24a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c24c:	693b      	ldr	r3, [r7, #16]
 800c24e:	7858      	ldrb	r0, [r3, #1]
 800c250:	6a3b      	ldr	r3, [r7, #32]
 800c252:	697a      	ldr	r2, [r7, #20]
 800c254:	69f9      	ldr	r1, [r7, #28]
 800c256:	f7fd fb8b 	bl	8009970 <disk_write>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d004      	beq.n	800c26a <f_write+0x1e2>
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	2201      	movs	r2, #1
 800c264:	755a      	strb	r2, [r3, #21]
 800c266:	2301      	movs	r3, #1
 800c268:	e09e      	b.n	800c3a8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	6a1a      	ldr	r2, [r3, #32]
 800c26e:	697b      	ldr	r3, [r7, #20]
 800c270:	1ad3      	subs	r3, r2, r3
 800c272:	6a3a      	ldr	r2, [r7, #32]
 800c274:	429a      	cmp	r2, r3
 800c276:	d918      	bls.n	800c2aa <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	6a1a      	ldr	r2, [r3, #32]
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	1ad3      	subs	r3, r2, r3
 800c286:	693a      	ldr	r2, [r7, #16]
 800c288:	8992      	ldrh	r2, [r2, #12]
 800c28a:	fb02 f303 	mul.w	r3, r2, r3
 800c28e:	69fa      	ldr	r2, [r7, #28]
 800c290:	18d1      	adds	r1, r2, r3
 800c292:	693b      	ldr	r3, [r7, #16]
 800c294:	899b      	ldrh	r3, [r3, #12]
 800c296:	461a      	mov	r2, r3
 800c298:	f7fd fc2a 	bl	8009af0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	7d1b      	ldrb	r3, [r3, #20]
 800c2a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2a4:	b2da      	uxtb	r2, r3
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	899b      	ldrh	r3, [r3, #12]
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	6a3b      	ldr	r3, [r7, #32]
 800c2b2:	fb02 f303 	mul.w	r3, r2, r3
 800c2b6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c2b8:	e04b      	b.n	800c352 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	6a1b      	ldr	r3, [r3, #32]
 800c2be:	697a      	ldr	r2, [r7, #20]
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d016      	beq.n	800c2f2 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	699a      	ldr	r2, [r3, #24]
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d210      	bcs.n	800c2f2 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c2d0:	693b      	ldr	r3, [r7, #16]
 800c2d2:	7858      	ldrb	r0, [r3, #1]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c2da:	2301      	movs	r3, #1
 800c2dc:	697a      	ldr	r2, [r7, #20]
 800c2de:	f7fd fb27 	bl	8009930 <disk_read>
 800c2e2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d004      	beq.n	800c2f2 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2201      	movs	r2, #1
 800c2ec:	755a      	strb	r2, [r3, #21]
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	e05a      	b.n	800c3a8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	697a      	ldr	r2, [r7, #20]
 800c2f6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	899b      	ldrh	r3, [r3, #12]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	699b      	ldr	r3, [r3, #24]
 800c302:	693a      	ldr	r2, [r7, #16]
 800c304:	8992      	ldrh	r2, [r2, #12]
 800c306:	fbb3 f1f2 	udiv	r1, r3, r2
 800c30a:	fb01 f202 	mul.w	r2, r1, r2
 800c30e:	1a9b      	subs	r3, r3, r2
 800c310:	1ac3      	subs	r3, r0, r3
 800c312:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	429a      	cmp	r2, r3
 800c31a:	d901      	bls.n	800c320 <f_write+0x298>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	699b      	ldr	r3, [r3, #24]
 800c32a:	693a      	ldr	r2, [r7, #16]
 800c32c:	8992      	ldrh	r2, [r2, #12]
 800c32e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c332:	fb00 f202 	mul.w	r2, r0, r2
 800c336:	1a9b      	subs	r3, r3, r2
 800c338:	440b      	add	r3, r1
 800c33a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c33c:	69f9      	ldr	r1, [r7, #28]
 800c33e:	4618      	mov	r0, r3
 800c340:	f7fd fbd6 	bl	8009af0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	7d1b      	ldrb	r3, [r3, #20]
 800c348:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c34c:	b2da      	uxtb	r2, r3
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c352:	69fa      	ldr	r2, [r7, #28]
 800c354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c356:	4413      	add	r3, r2
 800c358:	61fb      	str	r3, [r7, #28]
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	699a      	ldr	r2, [r3, #24]
 800c35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c360:	441a      	add	r2, r3
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	619a      	str	r2, [r3, #24]
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	68da      	ldr	r2, [r3, #12]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	699b      	ldr	r3, [r3, #24]
 800c36e:	429a      	cmp	r2, r3
 800c370:	bf38      	it	cc
 800c372:	461a      	movcc	r2, r3
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	60da      	str	r2, [r3, #12]
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c37e:	441a      	add	r2, r3
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	601a      	str	r2, [r3, #0]
 800c384:	687a      	ldr	r2, [r7, #4]
 800c386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c388:	1ad3      	subs	r3, r2, r3
 800c38a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	f47f aeb5 	bne.w	800c0fe <f_write+0x76>
 800c394:	e000      	b.n	800c398 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c396:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	7d1b      	ldrb	r3, [r3, #20]
 800c39c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3a0:	b2da      	uxtb	r2, r3
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	3730      	adds	r7, #48	; 0x30
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd80      	pop	{r7, pc}

0800c3b0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b086      	sub	sp, #24
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	f107 0208 	add.w	r2, r7, #8
 800c3be:	4611      	mov	r1, r2
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	f7ff fc19 	bl	800bbf8 <validate>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c3ca:	7dfb      	ldrb	r3, [r7, #23]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d168      	bne.n	800c4a2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	7d1b      	ldrb	r3, [r3, #20]
 800c3d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d062      	beq.n	800c4a2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	7d1b      	ldrb	r3, [r3, #20]
 800c3e0:	b25b      	sxtb	r3, r3
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	da15      	bge.n	800c412 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	7858      	ldrb	r0, [r3, #1]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6a1a      	ldr	r2, [r3, #32]
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	f7fd fabb 	bl	8009970 <disk_write>
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d001      	beq.n	800c404 <f_sync+0x54>
 800c400:	2301      	movs	r3, #1
 800c402:	e04f      	b.n	800c4a4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	7d1b      	ldrb	r3, [r3, #20]
 800c408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c40c:	b2da      	uxtb	r2, r3
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c412:	f7fd f94b 	bl	80096ac <get_fattime>
 800c416:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c418:	68ba      	ldr	r2, [r7, #8]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c41e:	4619      	mov	r1, r3
 800c420:	4610      	mov	r0, r2
 800c422:	f7fd fd93 	bl	8009f4c <move_window>
 800c426:	4603      	mov	r3, r0
 800c428:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c42a:	7dfb      	ldrb	r3, [r7, #23]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d138      	bne.n	800c4a2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c434:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	330b      	adds	r3, #11
 800c43a:	781a      	ldrb	r2, [r3, #0]
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	330b      	adds	r3, #11
 800c440:	f042 0220 	orr.w	r2, r2, #32
 800c444:	b2d2      	uxtb	r2, r2
 800c446:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6818      	ldr	r0, [r3, #0]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	461a      	mov	r2, r3
 800c452:	68f9      	ldr	r1, [r7, #12]
 800c454:	f7fe fb21 	bl	800aa9a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	f103 021c 	add.w	r2, r3, #28
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	68db      	ldr	r3, [r3, #12]
 800c462:	4619      	mov	r1, r3
 800c464:	4610      	mov	r0, r2
 800c466:	f7fd fb17 	bl	8009a98 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	3316      	adds	r3, #22
 800c46e:	6939      	ldr	r1, [r7, #16]
 800c470:	4618      	mov	r0, r3
 800c472:	f7fd fb11 	bl	8009a98 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	3312      	adds	r3, #18
 800c47a:	2100      	movs	r1, #0
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7fd faf0 	bl	8009a62 <st_word>
					fs->wflag = 1;
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	2201      	movs	r2, #1
 800c486:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	4618      	mov	r0, r3
 800c48c:	f7fd fd8c 	bl	8009fa8 <sync_fs>
 800c490:	4603      	mov	r3, r0
 800c492:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	7d1b      	ldrb	r3, [r3, #20]
 800c498:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c49c:	b2da      	uxtb	r2, r3
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c4a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	3718      	adds	r7, #24
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	bd80      	pop	{r7, pc}

0800c4ac <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f7ff ff7b 	bl	800c3b0 <f_sync>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c4be:	7bfb      	ldrb	r3, [r7, #15]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d118      	bne.n	800c4f6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	f107 0208 	add.w	r2, r7, #8
 800c4ca:	4611      	mov	r1, r2
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f7ff fb93 	bl	800bbf8 <validate>
 800c4d2:	4603      	mov	r3, r0
 800c4d4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c4d6:	7bfb      	ldrb	r3, [r7, #15]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d10c      	bne.n	800c4f6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	691b      	ldr	r3, [r3, #16]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f7fd fc8f 	bl	8009e04 <dec_lock>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c4ea:	7bfb      	ldrb	r3, [r7, #15]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d102      	bne.n	800c4f6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c4f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3710      	adds	r7, #16
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}

0800c500 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c500:	b480      	push	{r7}
 800c502:	b087      	sub	sp, #28
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	4613      	mov	r3, r2
 800c50c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c50e:	2301      	movs	r3, #1
 800c510:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c512:	2300      	movs	r3, #0
 800c514:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c516:	4b1f      	ldr	r3, [pc, #124]	; (800c594 <FATFS_LinkDriverEx+0x94>)
 800c518:	7a5b      	ldrb	r3, [r3, #9]
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d131      	bne.n	800c584 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c520:	4b1c      	ldr	r3, [pc, #112]	; (800c594 <FATFS_LinkDriverEx+0x94>)
 800c522:	7a5b      	ldrb	r3, [r3, #9]
 800c524:	b2db      	uxtb	r3, r3
 800c526:	461a      	mov	r2, r3
 800c528:	4b1a      	ldr	r3, [pc, #104]	; (800c594 <FATFS_LinkDriverEx+0x94>)
 800c52a:	2100      	movs	r1, #0
 800c52c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c52e:	4b19      	ldr	r3, [pc, #100]	; (800c594 <FATFS_LinkDriverEx+0x94>)
 800c530:	7a5b      	ldrb	r3, [r3, #9]
 800c532:	b2db      	uxtb	r3, r3
 800c534:	4a17      	ldr	r2, [pc, #92]	; (800c594 <FATFS_LinkDriverEx+0x94>)
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	4413      	add	r3, r2
 800c53a:	68fa      	ldr	r2, [r7, #12]
 800c53c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c53e:	4b15      	ldr	r3, [pc, #84]	; (800c594 <FATFS_LinkDriverEx+0x94>)
 800c540:	7a5b      	ldrb	r3, [r3, #9]
 800c542:	b2db      	uxtb	r3, r3
 800c544:	461a      	mov	r2, r3
 800c546:	4b13      	ldr	r3, [pc, #76]	; (800c594 <FATFS_LinkDriverEx+0x94>)
 800c548:	4413      	add	r3, r2
 800c54a:	79fa      	ldrb	r2, [r7, #7]
 800c54c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c54e:	4b11      	ldr	r3, [pc, #68]	; (800c594 <FATFS_LinkDriverEx+0x94>)
 800c550:	7a5b      	ldrb	r3, [r3, #9]
 800c552:	b2db      	uxtb	r3, r3
 800c554:	1c5a      	adds	r2, r3, #1
 800c556:	b2d1      	uxtb	r1, r2
 800c558:	4a0e      	ldr	r2, [pc, #56]	; (800c594 <FATFS_LinkDriverEx+0x94>)
 800c55a:	7251      	strb	r1, [r2, #9]
 800c55c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c55e:	7dbb      	ldrb	r3, [r7, #22]
 800c560:	3330      	adds	r3, #48	; 0x30
 800c562:	b2da      	uxtb	r2, r3
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	3301      	adds	r3, #1
 800c56c:	223a      	movs	r2, #58	; 0x3a
 800c56e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	3302      	adds	r3, #2
 800c574:	222f      	movs	r2, #47	; 0x2f
 800c576:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	3303      	adds	r3, #3
 800c57c:	2200      	movs	r2, #0
 800c57e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c580:	2300      	movs	r3, #0
 800c582:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c584:	7dfb      	ldrb	r3, [r7, #23]
}
 800c586:	4618      	mov	r0, r3
 800c588:	371c      	adds	r7, #28
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	200036d4 	.word	0x200036d4

0800c598 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b082      	sub	sp, #8
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	6839      	ldr	r1, [r7, #0]
 800c5a6:	6878      	ldr	r0, [r7, #4]
 800c5a8:	f7ff ffaa 	bl	800c500 <FATFS_LinkDriverEx>
 800c5ac:	4603      	mov	r3, r0
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3708      	adds	r7, #8
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}
	...

0800c5b8 <FATFS_UnLinkDriverEx>:
  * @param  path: pointer to the logical drive path
  * @param  lun : not used
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriverEx(char *path, uint8_t lun)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b085      	sub	sp, #20
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	6078      	str	r0, [r7, #4]
 800c5c0:	460b      	mov	r3, r1
 800c5c2:	70fb      	strb	r3, [r7, #3]
  uint8_t DiskNum = 0;
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	73bb      	strb	r3, [r7, #14]
  uint8_t ret = 1;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	73fb      	strb	r3, [r7, #15]

  if(disk.nbr >= 1)
 800c5cc:	4b15      	ldr	r3, [pc, #84]	; (800c624 <FATFS_UnLinkDriverEx+0x6c>)
 800c5ce:	7a5b      	ldrb	r3, [r3, #9]
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d01e      	beq.n	800c614 <FATFS_UnLinkDriverEx+0x5c>
  {
    DiskNum = path[0] - '0';
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	781b      	ldrb	r3, [r3, #0]
 800c5da:	3b30      	subs	r3, #48	; 0x30
 800c5dc:	73bb      	strb	r3, [r7, #14]
    if(disk.drv[DiskNum] != 0)
 800c5de:	7bbb      	ldrb	r3, [r7, #14]
 800c5e0:	4a10      	ldr	r2, [pc, #64]	; (800c624 <FATFS_UnLinkDriverEx+0x6c>)
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	4413      	add	r3, r2
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d013      	beq.n	800c614 <FATFS_UnLinkDriverEx+0x5c>
    {
      disk.drv[DiskNum] = 0;
 800c5ec:	7bbb      	ldrb	r3, [r7, #14]
 800c5ee:	4a0d      	ldr	r2, [pc, #52]	; (800c624 <FATFS_UnLinkDriverEx+0x6c>)
 800c5f0:	009b      	lsls	r3, r3, #2
 800c5f2:	4413      	add	r3, r2
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	605a      	str	r2, [r3, #4]
      disk.lun[DiskNum] = 0;
 800c5f8:	7bbb      	ldrb	r3, [r7, #14]
 800c5fa:	4a0a      	ldr	r2, [pc, #40]	; (800c624 <FATFS_UnLinkDriverEx+0x6c>)
 800c5fc:	4413      	add	r3, r2
 800c5fe:	2200      	movs	r2, #0
 800c600:	721a      	strb	r2, [r3, #8]
      disk.nbr--;
 800c602:	4b08      	ldr	r3, [pc, #32]	; (800c624 <FATFS_UnLinkDriverEx+0x6c>)
 800c604:	7a5b      	ldrb	r3, [r3, #9]
 800c606:	b2db      	uxtb	r3, r3
 800c608:	3b01      	subs	r3, #1
 800c60a:	b2da      	uxtb	r2, r3
 800c60c:	4b05      	ldr	r3, [pc, #20]	; (800c624 <FATFS_UnLinkDriverEx+0x6c>)
 800c60e:	725a      	strb	r2, [r3, #9]
      ret = 0;
 800c610:	2300      	movs	r3, #0
 800c612:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800c614:	7bfb      	ldrb	r3, [r7, #15]
}
 800c616:	4618      	mov	r0, r3
 800c618:	3714      	adds	r7, #20
 800c61a:	46bd      	mov	sp, r7
 800c61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c620:	4770      	bx	lr
 800c622:	bf00      	nop
 800c624:	200036d4 	.word	0x200036d4

0800c628 <FATFS_UnLinkDriver>:
  *         drivers.
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_UnLinkDriver(char *path)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  return FATFS_UnLinkDriverEx(path, 0);
 800c630:	2100      	movs	r1, #0
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f7ff ffc0 	bl	800c5b8 <FATFS_UnLinkDriverEx>
 800c638:	4603      	mov	r3, r0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3708      	adds	r7, #8
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
	...

0800c644 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800c644:	b480      	push	{r7}
 800c646:	b085      	sub	sp, #20
 800c648:	af00      	add	r7, sp, #0
 800c64a:	4603      	mov	r3, r0
 800c64c:	6039      	str	r1, [r7, #0]
 800c64e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800c650:	88fb      	ldrh	r3, [r7, #6]
 800c652:	2b7f      	cmp	r3, #127	; 0x7f
 800c654:	d802      	bhi.n	800c65c <ff_convert+0x18>
		c = chr;
 800c656:	88fb      	ldrh	r3, [r7, #6]
 800c658:	81fb      	strh	r3, [r7, #14]
 800c65a:	e025      	b.n	800c6a8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800c65c:	683b      	ldr	r3, [r7, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d00b      	beq.n	800c67a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800c662:	88fb      	ldrh	r3, [r7, #6]
 800c664:	2bff      	cmp	r3, #255	; 0xff
 800c666:	d805      	bhi.n	800c674 <ff_convert+0x30>
 800c668:	88fb      	ldrh	r3, [r7, #6]
 800c66a:	3b80      	subs	r3, #128	; 0x80
 800c66c:	4a12      	ldr	r2, [pc, #72]	; (800c6b8 <ff_convert+0x74>)
 800c66e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c672:	e000      	b.n	800c676 <ff_convert+0x32>
 800c674:	2300      	movs	r3, #0
 800c676:	81fb      	strh	r3, [r7, #14]
 800c678:	e016      	b.n	800c6a8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800c67a:	2300      	movs	r3, #0
 800c67c:	81fb      	strh	r3, [r7, #14]
 800c67e:	e009      	b.n	800c694 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800c680:	89fb      	ldrh	r3, [r7, #14]
 800c682:	4a0d      	ldr	r2, [pc, #52]	; (800c6b8 <ff_convert+0x74>)
 800c684:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c688:	88fa      	ldrh	r2, [r7, #6]
 800c68a:	429a      	cmp	r2, r3
 800c68c:	d006      	beq.n	800c69c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800c68e:	89fb      	ldrh	r3, [r7, #14]
 800c690:	3301      	adds	r3, #1
 800c692:	81fb      	strh	r3, [r7, #14]
 800c694:	89fb      	ldrh	r3, [r7, #14]
 800c696:	2b7f      	cmp	r3, #127	; 0x7f
 800c698:	d9f2      	bls.n	800c680 <ff_convert+0x3c>
 800c69a:	e000      	b.n	800c69e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800c69c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800c69e:	89fb      	ldrh	r3, [r7, #14]
 800c6a0:	3380      	adds	r3, #128	; 0x80
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800c6a8:	89fb      	ldrh	r3, [r7, #14]
}
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	3714      	adds	r7, #20
 800c6ae:	46bd      	mov	sp, r7
 800c6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b4:	4770      	bx	lr
 800c6b6:	bf00      	nop
 800c6b8:	080101c0 	.word	0x080101c0

0800c6bc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b087      	sub	sp, #28
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800c6c6:	88fb      	ldrh	r3, [r7, #6]
 800c6c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6cc:	d201      	bcs.n	800c6d2 <ff_wtoupper+0x16>
 800c6ce:	4b3e      	ldr	r3, [pc, #248]	; (800c7c8 <ff_wtoupper+0x10c>)
 800c6d0:	e000      	b.n	800c6d4 <ff_wtoupper+0x18>
 800c6d2:	4b3e      	ldr	r3, [pc, #248]	; (800c7cc <ff_wtoupper+0x110>)
 800c6d4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	1c9a      	adds	r2, r3, #2
 800c6da:	617a      	str	r2, [r7, #20]
 800c6dc:	881b      	ldrh	r3, [r3, #0]
 800c6de:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800c6e0:	8a7b      	ldrh	r3, [r7, #18]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d068      	beq.n	800c7b8 <ff_wtoupper+0xfc>
 800c6e6:	88fa      	ldrh	r2, [r7, #6]
 800c6e8:	8a7b      	ldrh	r3, [r7, #18]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	d364      	bcc.n	800c7b8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800c6ee:	697b      	ldr	r3, [r7, #20]
 800c6f0:	1c9a      	adds	r2, r3, #2
 800c6f2:	617a      	str	r2, [r7, #20]
 800c6f4:	881b      	ldrh	r3, [r3, #0]
 800c6f6:	823b      	strh	r3, [r7, #16]
 800c6f8:	8a3b      	ldrh	r3, [r7, #16]
 800c6fa:	0a1b      	lsrs	r3, r3, #8
 800c6fc:	81fb      	strh	r3, [r7, #14]
 800c6fe:	8a3b      	ldrh	r3, [r7, #16]
 800c700:	b2db      	uxtb	r3, r3
 800c702:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800c704:	88fa      	ldrh	r2, [r7, #6]
 800c706:	8a79      	ldrh	r1, [r7, #18]
 800c708:	8a3b      	ldrh	r3, [r7, #16]
 800c70a:	440b      	add	r3, r1
 800c70c:	429a      	cmp	r2, r3
 800c70e:	da49      	bge.n	800c7a4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800c710:	89fb      	ldrh	r3, [r7, #14]
 800c712:	2b08      	cmp	r3, #8
 800c714:	d84f      	bhi.n	800c7b6 <ff_wtoupper+0xfa>
 800c716:	a201      	add	r2, pc, #4	; (adr r2, 800c71c <ff_wtoupper+0x60>)
 800c718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c71c:	0800c741 	.word	0x0800c741
 800c720:	0800c753 	.word	0x0800c753
 800c724:	0800c769 	.word	0x0800c769
 800c728:	0800c771 	.word	0x0800c771
 800c72c:	0800c779 	.word	0x0800c779
 800c730:	0800c781 	.word	0x0800c781
 800c734:	0800c789 	.word	0x0800c789
 800c738:	0800c791 	.word	0x0800c791
 800c73c:	0800c799 	.word	0x0800c799
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800c740:	88fa      	ldrh	r2, [r7, #6]
 800c742:	8a7b      	ldrh	r3, [r7, #18]
 800c744:	1ad3      	subs	r3, r2, r3
 800c746:	005b      	lsls	r3, r3, #1
 800c748:	697a      	ldr	r2, [r7, #20]
 800c74a:	4413      	add	r3, r2
 800c74c:	881b      	ldrh	r3, [r3, #0]
 800c74e:	80fb      	strh	r3, [r7, #6]
 800c750:	e027      	b.n	800c7a2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800c752:	88fa      	ldrh	r2, [r7, #6]
 800c754:	8a7b      	ldrh	r3, [r7, #18]
 800c756:	1ad3      	subs	r3, r2, r3
 800c758:	b29b      	uxth	r3, r3
 800c75a:	f003 0301 	and.w	r3, r3, #1
 800c75e:	b29b      	uxth	r3, r3
 800c760:	88fa      	ldrh	r2, [r7, #6]
 800c762:	1ad3      	subs	r3, r2, r3
 800c764:	80fb      	strh	r3, [r7, #6]
 800c766:	e01c      	b.n	800c7a2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800c768:	88fb      	ldrh	r3, [r7, #6]
 800c76a:	3b10      	subs	r3, #16
 800c76c:	80fb      	strh	r3, [r7, #6]
 800c76e:	e018      	b.n	800c7a2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800c770:	88fb      	ldrh	r3, [r7, #6]
 800c772:	3b20      	subs	r3, #32
 800c774:	80fb      	strh	r3, [r7, #6]
 800c776:	e014      	b.n	800c7a2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800c778:	88fb      	ldrh	r3, [r7, #6]
 800c77a:	3b30      	subs	r3, #48	; 0x30
 800c77c:	80fb      	strh	r3, [r7, #6]
 800c77e:	e010      	b.n	800c7a2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800c780:	88fb      	ldrh	r3, [r7, #6]
 800c782:	3b1a      	subs	r3, #26
 800c784:	80fb      	strh	r3, [r7, #6]
 800c786:	e00c      	b.n	800c7a2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800c788:	88fb      	ldrh	r3, [r7, #6]
 800c78a:	3308      	adds	r3, #8
 800c78c:	80fb      	strh	r3, [r7, #6]
 800c78e:	e008      	b.n	800c7a2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800c790:	88fb      	ldrh	r3, [r7, #6]
 800c792:	3b50      	subs	r3, #80	; 0x50
 800c794:	80fb      	strh	r3, [r7, #6]
 800c796:	e004      	b.n	800c7a2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800c798:	88fb      	ldrh	r3, [r7, #6]
 800c79a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800c79e:	80fb      	strh	r3, [r7, #6]
 800c7a0:	bf00      	nop
			}
			break;
 800c7a2:	e008      	b.n	800c7b6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800c7a4:	89fb      	ldrh	r3, [r7, #14]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d195      	bne.n	800c6d6 <ff_wtoupper+0x1a>
 800c7aa:	8a3b      	ldrh	r3, [r7, #16]
 800c7ac:	005b      	lsls	r3, r3, #1
 800c7ae:	697a      	ldr	r2, [r7, #20]
 800c7b0:	4413      	add	r3, r2
 800c7b2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800c7b4:	e78f      	b.n	800c6d6 <ff_wtoupper+0x1a>
			break;
 800c7b6:	bf00      	nop
	}

	return chr;
 800c7b8:	88fb      	ldrh	r3, [r7, #6]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	371c      	adds	r7, #28
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	080102c0 	.word	0x080102c0
 800c7cc:	080104b4 	.word	0x080104b4

0800c7d0 <__errno>:
 800c7d0:	4b01      	ldr	r3, [pc, #4]	; (800c7d8 <__errno+0x8>)
 800c7d2:	6818      	ldr	r0, [r3, #0]
 800c7d4:	4770      	bx	lr
 800c7d6:	bf00      	nop
 800c7d8:	200002a0 	.word	0x200002a0

0800c7dc <__libc_init_array>:
 800c7dc:	b570      	push	{r4, r5, r6, lr}
 800c7de:	4d0d      	ldr	r5, [pc, #52]	; (800c814 <__libc_init_array+0x38>)
 800c7e0:	4c0d      	ldr	r4, [pc, #52]	; (800c818 <__libc_init_array+0x3c>)
 800c7e2:	1b64      	subs	r4, r4, r5
 800c7e4:	10a4      	asrs	r4, r4, #2
 800c7e6:	2600      	movs	r6, #0
 800c7e8:	42a6      	cmp	r6, r4
 800c7ea:	d109      	bne.n	800c800 <__libc_init_array+0x24>
 800c7ec:	4d0b      	ldr	r5, [pc, #44]	; (800c81c <__libc_init_array+0x40>)
 800c7ee:	4c0c      	ldr	r4, [pc, #48]	; (800c820 <__libc_init_array+0x44>)
 800c7f0:	f002 ff02 	bl	800f5f8 <_init>
 800c7f4:	1b64      	subs	r4, r4, r5
 800c7f6:	10a4      	asrs	r4, r4, #2
 800c7f8:	2600      	movs	r6, #0
 800c7fa:	42a6      	cmp	r6, r4
 800c7fc:	d105      	bne.n	800c80a <__libc_init_array+0x2e>
 800c7fe:	bd70      	pop	{r4, r5, r6, pc}
 800c800:	f855 3b04 	ldr.w	r3, [r5], #4
 800c804:	4798      	blx	r3
 800c806:	3601      	adds	r6, #1
 800c808:	e7ee      	b.n	800c7e8 <__libc_init_array+0xc>
 800c80a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c80e:	4798      	blx	r3
 800c810:	3601      	adds	r6, #1
 800c812:	e7f2      	b.n	800c7fa <__libc_init_array+0x1e>
 800c814:	08010954 	.word	0x08010954
 800c818:	08010954 	.word	0x08010954
 800c81c:	08010954 	.word	0x08010954
 800c820:	08010958 	.word	0x08010958

0800c824 <memset>:
 800c824:	4402      	add	r2, r0
 800c826:	4603      	mov	r3, r0
 800c828:	4293      	cmp	r3, r2
 800c82a:	d100      	bne.n	800c82e <memset+0xa>
 800c82c:	4770      	bx	lr
 800c82e:	f803 1b01 	strb.w	r1, [r3], #1
 800c832:	e7f9      	b.n	800c828 <memset+0x4>

0800c834 <__cvt>:
 800c834:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c838:	ec55 4b10 	vmov	r4, r5, d0
 800c83c:	2d00      	cmp	r5, #0
 800c83e:	460e      	mov	r6, r1
 800c840:	4619      	mov	r1, r3
 800c842:	462b      	mov	r3, r5
 800c844:	bfbb      	ittet	lt
 800c846:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c84a:	461d      	movlt	r5, r3
 800c84c:	2300      	movge	r3, #0
 800c84e:	232d      	movlt	r3, #45	; 0x2d
 800c850:	700b      	strb	r3, [r1, #0]
 800c852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c854:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c858:	4691      	mov	r9, r2
 800c85a:	f023 0820 	bic.w	r8, r3, #32
 800c85e:	bfbc      	itt	lt
 800c860:	4622      	movlt	r2, r4
 800c862:	4614      	movlt	r4, r2
 800c864:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c868:	d005      	beq.n	800c876 <__cvt+0x42>
 800c86a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c86e:	d100      	bne.n	800c872 <__cvt+0x3e>
 800c870:	3601      	adds	r6, #1
 800c872:	2102      	movs	r1, #2
 800c874:	e000      	b.n	800c878 <__cvt+0x44>
 800c876:	2103      	movs	r1, #3
 800c878:	ab03      	add	r3, sp, #12
 800c87a:	9301      	str	r3, [sp, #4]
 800c87c:	ab02      	add	r3, sp, #8
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	ec45 4b10 	vmov	d0, r4, r5
 800c884:	4653      	mov	r3, sl
 800c886:	4632      	mov	r2, r6
 800c888:	f000 fcea 	bl	800d260 <_dtoa_r>
 800c88c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c890:	4607      	mov	r7, r0
 800c892:	d102      	bne.n	800c89a <__cvt+0x66>
 800c894:	f019 0f01 	tst.w	r9, #1
 800c898:	d022      	beq.n	800c8e0 <__cvt+0xac>
 800c89a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c89e:	eb07 0906 	add.w	r9, r7, r6
 800c8a2:	d110      	bne.n	800c8c6 <__cvt+0x92>
 800c8a4:	783b      	ldrb	r3, [r7, #0]
 800c8a6:	2b30      	cmp	r3, #48	; 0x30
 800c8a8:	d10a      	bne.n	800c8c0 <__cvt+0x8c>
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	4620      	mov	r0, r4
 800c8b0:	4629      	mov	r1, r5
 800c8b2:	f7f4 f911 	bl	8000ad8 <__aeabi_dcmpeq>
 800c8b6:	b918      	cbnz	r0, 800c8c0 <__cvt+0x8c>
 800c8b8:	f1c6 0601 	rsb	r6, r6, #1
 800c8bc:	f8ca 6000 	str.w	r6, [sl]
 800c8c0:	f8da 3000 	ldr.w	r3, [sl]
 800c8c4:	4499      	add	r9, r3
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	4620      	mov	r0, r4
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	f7f4 f903 	bl	8000ad8 <__aeabi_dcmpeq>
 800c8d2:	b108      	cbz	r0, 800c8d8 <__cvt+0xa4>
 800c8d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800c8d8:	2230      	movs	r2, #48	; 0x30
 800c8da:	9b03      	ldr	r3, [sp, #12]
 800c8dc:	454b      	cmp	r3, r9
 800c8de:	d307      	bcc.n	800c8f0 <__cvt+0xbc>
 800c8e0:	9b03      	ldr	r3, [sp, #12]
 800c8e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c8e4:	1bdb      	subs	r3, r3, r7
 800c8e6:	4638      	mov	r0, r7
 800c8e8:	6013      	str	r3, [r2, #0]
 800c8ea:	b004      	add	sp, #16
 800c8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8f0:	1c59      	adds	r1, r3, #1
 800c8f2:	9103      	str	r1, [sp, #12]
 800c8f4:	701a      	strb	r2, [r3, #0]
 800c8f6:	e7f0      	b.n	800c8da <__cvt+0xa6>

0800c8f8 <__exponent>:
 800c8f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8fa:	4603      	mov	r3, r0
 800c8fc:	2900      	cmp	r1, #0
 800c8fe:	bfb8      	it	lt
 800c900:	4249      	neglt	r1, r1
 800c902:	f803 2b02 	strb.w	r2, [r3], #2
 800c906:	bfb4      	ite	lt
 800c908:	222d      	movlt	r2, #45	; 0x2d
 800c90a:	222b      	movge	r2, #43	; 0x2b
 800c90c:	2909      	cmp	r1, #9
 800c90e:	7042      	strb	r2, [r0, #1]
 800c910:	dd2a      	ble.n	800c968 <__exponent+0x70>
 800c912:	f10d 0407 	add.w	r4, sp, #7
 800c916:	46a4      	mov	ip, r4
 800c918:	270a      	movs	r7, #10
 800c91a:	46a6      	mov	lr, r4
 800c91c:	460a      	mov	r2, r1
 800c91e:	fb91 f6f7 	sdiv	r6, r1, r7
 800c922:	fb07 1516 	mls	r5, r7, r6, r1
 800c926:	3530      	adds	r5, #48	; 0x30
 800c928:	2a63      	cmp	r2, #99	; 0x63
 800c92a:	f104 34ff 	add.w	r4, r4, #4294967295
 800c92e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c932:	4631      	mov	r1, r6
 800c934:	dcf1      	bgt.n	800c91a <__exponent+0x22>
 800c936:	3130      	adds	r1, #48	; 0x30
 800c938:	f1ae 0502 	sub.w	r5, lr, #2
 800c93c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c940:	1c44      	adds	r4, r0, #1
 800c942:	4629      	mov	r1, r5
 800c944:	4561      	cmp	r1, ip
 800c946:	d30a      	bcc.n	800c95e <__exponent+0x66>
 800c948:	f10d 0209 	add.w	r2, sp, #9
 800c94c:	eba2 020e 	sub.w	r2, r2, lr
 800c950:	4565      	cmp	r5, ip
 800c952:	bf88      	it	hi
 800c954:	2200      	movhi	r2, #0
 800c956:	4413      	add	r3, r2
 800c958:	1a18      	subs	r0, r3, r0
 800c95a:	b003      	add	sp, #12
 800c95c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c95e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c962:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c966:	e7ed      	b.n	800c944 <__exponent+0x4c>
 800c968:	2330      	movs	r3, #48	; 0x30
 800c96a:	3130      	adds	r1, #48	; 0x30
 800c96c:	7083      	strb	r3, [r0, #2]
 800c96e:	70c1      	strb	r1, [r0, #3]
 800c970:	1d03      	adds	r3, r0, #4
 800c972:	e7f1      	b.n	800c958 <__exponent+0x60>

0800c974 <_printf_float>:
 800c974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c978:	ed2d 8b02 	vpush	{d8}
 800c97c:	b08d      	sub	sp, #52	; 0x34
 800c97e:	460c      	mov	r4, r1
 800c980:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c984:	4616      	mov	r6, r2
 800c986:	461f      	mov	r7, r3
 800c988:	4605      	mov	r5, r0
 800c98a:	f001 fa57 	bl	800de3c <_localeconv_r>
 800c98e:	f8d0 a000 	ldr.w	sl, [r0]
 800c992:	4650      	mov	r0, sl
 800c994:	f7f3 fc24 	bl	80001e0 <strlen>
 800c998:	2300      	movs	r3, #0
 800c99a:	930a      	str	r3, [sp, #40]	; 0x28
 800c99c:	6823      	ldr	r3, [r4, #0]
 800c99e:	9305      	str	r3, [sp, #20]
 800c9a0:	f8d8 3000 	ldr.w	r3, [r8]
 800c9a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c9a8:	3307      	adds	r3, #7
 800c9aa:	f023 0307 	bic.w	r3, r3, #7
 800c9ae:	f103 0208 	add.w	r2, r3, #8
 800c9b2:	f8c8 2000 	str.w	r2, [r8]
 800c9b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c9be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c9c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c9c6:	9307      	str	r3, [sp, #28]
 800c9c8:	f8cd 8018 	str.w	r8, [sp, #24]
 800c9cc:	ee08 0a10 	vmov	s16, r0
 800c9d0:	4b9f      	ldr	r3, [pc, #636]	; (800cc50 <_printf_float+0x2dc>)
 800c9d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9da:	f7f4 f8af 	bl	8000b3c <__aeabi_dcmpun>
 800c9de:	bb88      	cbnz	r0, 800ca44 <_printf_float+0xd0>
 800c9e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9e4:	4b9a      	ldr	r3, [pc, #616]	; (800cc50 <_printf_float+0x2dc>)
 800c9e6:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ea:	f7f4 f889 	bl	8000b00 <__aeabi_dcmple>
 800c9ee:	bb48      	cbnz	r0, 800ca44 <_printf_float+0xd0>
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	2300      	movs	r3, #0
 800c9f4:	4640      	mov	r0, r8
 800c9f6:	4649      	mov	r1, r9
 800c9f8:	f7f4 f878 	bl	8000aec <__aeabi_dcmplt>
 800c9fc:	b110      	cbz	r0, 800ca04 <_printf_float+0x90>
 800c9fe:	232d      	movs	r3, #45	; 0x2d
 800ca00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca04:	4b93      	ldr	r3, [pc, #588]	; (800cc54 <_printf_float+0x2e0>)
 800ca06:	4894      	ldr	r0, [pc, #592]	; (800cc58 <_printf_float+0x2e4>)
 800ca08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ca0c:	bf94      	ite	ls
 800ca0e:	4698      	movls	r8, r3
 800ca10:	4680      	movhi	r8, r0
 800ca12:	2303      	movs	r3, #3
 800ca14:	6123      	str	r3, [r4, #16]
 800ca16:	9b05      	ldr	r3, [sp, #20]
 800ca18:	f023 0204 	bic.w	r2, r3, #4
 800ca1c:	6022      	str	r2, [r4, #0]
 800ca1e:	f04f 0900 	mov.w	r9, #0
 800ca22:	9700      	str	r7, [sp, #0]
 800ca24:	4633      	mov	r3, r6
 800ca26:	aa0b      	add	r2, sp, #44	; 0x2c
 800ca28:	4621      	mov	r1, r4
 800ca2a:	4628      	mov	r0, r5
 800ca2c:	f000 f9d8 	bl	800cde0 <_printf_common>
 800ca30:	3001      	adds	r0, #1
 800ca32:	f040 8090 	bne.w	800cb56 <_printf_float+0x1e2>
 800ca36:	f04f 30ff 	mov.w	r0, #4294967295
 800ca3a:	b00d      	add	sp, #52	; 0x34
 800ca3c:	ecbd 8b02 	vpop	{d8}
 800ca40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca44:	4642      	mov	r2, r8
 800ca46:	464b      	mov	r3, r9
 800ca48:	4640      	mov	r0, r8
 800ca4a:	4649      	mov	r1, r9
 800ca4c:	f7f4 f876 	bl	8000b3c <__aeabi_dcmpun>
 800ca50:	b140      	cbz	r0, 800ca64 <_printf_float+0xf0>
 800ca52:	464b      	mov	r3, r9
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	bfbc      	itt	lt
 800ca58:	232d      	movlt	r3, #45	; 0x2d
 800ca5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ca5e:	487f      	ldr	r0, [pc, #508]	; (800cc5c <_printf_float+0x2e8>)
 800ca60:	4b7f      	ldr	r3, [pc, #508]	; (800cc60 <_printf_float+0x2ec>)
 800ca62:	e7d1      	b.n	800ca08 <_printf_float+0x94>
 800ca64:	6863      	ldr	r3, [r4, #4]
 800ca66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ca6a:	9206      	str	r2, [sp, #24]
 800ca6c:	1c5a      	adds	r2, r3, #1
 800ca6e:	d13f      	bne.n	800caf0 <_printf_float+0x17c>
 800ca70:	2306      	movs	r3, #6
 800ca72:	6063      	str	r3, [r4, #4]
 800ca74:	9b05      	ldr	r3, [sp, #20]
 800ca76:	6861      	ldr	r1, [r4, #4]
 800ca78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	9303      	str	r3, [sp, #12]
 800ca80:	ab0a      	add	r3, sp, #40	; 0x28
 800ca82:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ca86:	ab09      	add	r3, sp, #36	; 0x24
 800ca88:	ec49 8b10 	vmov	d0, r8, r9
 800ca8c:	9300      	str	r3, [sp, #0]
 800ca8e:	6022      	str	r2, [r4, #0]
 800ca90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ca94:	4628      	mov	r0, r5
 800ca96:	f7ff fecd 	bl	800c834 <__cvt>
 800ca9a:	9b06      	ldr	r3, [sp, #24]
 800ca9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca9e:	2b47      	cmp	r3, #71	; 0x47
 800caa0:	4680      	mov	r8, r0
 800caa2:	d108      	bne.n	800cab6 <_printf_float+0x142>
 800caa4:	1cc8      	adds	r0, r1, #3
 800caa6:	db02      	blt.n	800caae <_printf_float+0x13a>
 800caa8:	6863      	ldr	r3, [r4, #4]
 800caaa:	4299      	cmp	r1, r3
 800caac:	dd41      	ble.n	800cb32 <_printf_float+0x1be>
 800caae:	f1ab 0b02 	sub.w	fp, fp, #2
 800cab2:	fa5f fb8b 	uxtb.w	fp, fp
 800cab6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800caba:	d820      	bhi.n	800cafe <_printf_float+0x18a>
 800cabc:	3901      	subs	r1, #1
 800cabe:	465a      	mov	r2, fp
 800cac0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800cac4:	9109      	str	r1, [sp, #36]	; 0x24
 800cac6:	f7ff ff17 	bl	800c8f8 <__exponent>
 800caca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cacc:	1813      	adds	r3, r2, r0
 800cace:	2a01      	cmp	r2, #1
 800cad0:	4681      	mov	r9, r0
 800cad2:	6123      	str	r3, [r4, #16]
 800cad4:	dc02      	bgt.n	800cadc <_printf_float+0x168>
 800cad6:	6822      	ldr	r2, [r4, #0]
 800cad8:	07d2      	lsls	r2, r2, #31
 800cada:	d501      	bpl.n	800cae0 <_printf_float+0x16c>
 800cadc:	3301      	adds	r3, #1
 800cade:	6123      	str	r3, [r4, #16]
 800cae0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d09c      	beq.n	800ca22 <_printf_float+0xae>
 800cae8:	232d      	movs	r3, #45	; 0x2d
 800caea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caee:	e798      	b.n	800ca22 <_printf_float+0xae>
 800caf0:	9a06      	ldr	r2, [sp, #24]
 800caf2:	2a47      	cmp	r2, #71	; 0x47
 800caf4:	d1be      	bne.n	800ca74 <_printf_float+0x100>
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d1bc      	bne.n	800ca74 <_printf_float+0x100>
 800cafa:	2301      	movs	r3, #1
 800cafc:	e7b9      	b.n	800ca72 <_printf_float+0xfe>
 800cafe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cb02:	d118      	bne.n	800cb36 <_printf_float+0x1c2>
 800cb04:	2900      	cmp	r1, #0
 800cb06:	6863      	ldr	r3, [r4, #4]
 800cb08:	dd0b      	ble.n	800cb22 <_printf_float+0x1ae>
 800cb0a:	6121      	str	r1, [r4, #16]
 800cb0c:	b913      	cbnz	r3, 800cb14 <_printf_float+0x1a0>
 800cb0e:	6822      	ldr	r2, [r4, #0]
 800cb10:	07d0      	lsls	r0, r2, #31
 800cb12:	d502      	bpl.n	800cb1a <_printf_float+0x1a6>
 800cb14:	3301      	adds	r3, #1
 800cb16:	440b      	add	r3, r1
 800cb18:	6123      	str	r3, [r4, #16]
 800cb1a:	65a1      	str	r1, [r4, #88]	; 0x58
 800cb1c:	f04f 0900 	mov.w	r9, #0
 800cb20:	e7de      	b.n	800cae0 <_printf_float+0x16c>
 800cb22:	b913      	cbnz	r3, 800cb2a <_printf_float+0x1b6>
 800cb24:	6822      	ldr	r2, [r4, #0]
 800cb26:	07d2      	lsls	r2, r2, #31
 800cb28:	d501      	bpl.n	800cb2e <_printf_float+0x1ba>
 800cb2a:	3302      	adds	r3, #2
 800cb2c:	e7f4      	b.n	800cb18 <_printf_float+0x1a4>
 800cb2e:	2301      	movs	r3, #1
 800cb30:	e7f2      	b.n	800cb18 <_printf_float+0x1a4>
 800cb32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cb36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb38:	4299      	cmp	r1, r3
 800cb3a:	db05      	blt.n	800cb48 <_printf_float+0x1d4>
 800cb3c:	6823      	ldr	r3, [r4, #0]
 800cb3e:	6121      	str	r1, [r4, #16]
 800cb40:	07d8      	lsls	r0, r3, #31
 800cb42:	d5ea      	bpl.n	800cb1a <_printf_float+0x1a6>
 800cb44:	1c4b      	adds	r3, r1, #1
 800cb46:	e7e7      	b.n	800cb18 <_printf_float+0x1a4>
 800cb48:	2900      	cmp	r1, #0
 800cb4a:	bfd4      	ite	le
 800cb4c:	f1c1 0202 	rsble	r2, r1, #2
 800cb50:	2201      	movgt	r2, #1
 800cb52:	4413      	add	r3, r2
 800cb54:	e7e0      	b.n	800cb18 <_printf_float+0x1a4>
 800cb56:	6823      	ldr	r3, [r4, #0]
 800cb58:	055a      	lsls	r2, r3, #21
 800cb5a:	d407      	bmi.n	800cb6c <_printf_float+0x1f8>
 800cb5c:	6923      	ldr	r3, [r4, #16]
 800cb5e:	4642      	mov	r2, r8
 800cb60:	4631      	mov	r1, r6
 800cb62:	4628      	mov	r0, r5
 800cb64:	47b8      	blx	r7
 800cb66:	3001      	adds	r0, #1
 800cb68:	d12c      	bne.n	800cbc4 <_printf_float+0x250>
 800cb6a:	e764      	b.n	800ca36 <_printf_float+0xc2>
 800cb6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cb70:	f240 80e0 	bls.w	800cd34 <_printf_float+0x3c0>
 800cb74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb78:	2200      	movs	r2, #0
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	f7f3 ffac 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d034      	beq.n	800cbee <_printf_float+0x27a>
 800cb84:	4a37      	ldr	r2, [pc, #220]	; (800cc64 <_printf_float+0x2f0>)
 800cb86:	2301      	movs	r3, #1
 800cb88:	4631      	mov	r1, r6
 800cb8a:	4628      	mov	r0, r5
 800cb8c:	47b8      	blx	r7
 800cb8e:	3001      	adds	r0, #1
 800cb90:	f43f af51 	beq.w	800ca36 <_printf_float+0xc2>
 800cb94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb98:	429a      	cmp	r2, r3
 800cb9a:	db02      	blt.n	800cba2 <_printf_float+0x22e>
 800cb9c:	6823      	ldr	r3, [r4, #0]
 800cb9e:	07d8      	lsls	r0, r3, #31
 800cba0:	d510      	bpl.n	800cbc4 <_printf_float+0x250>
 800cba2:	ee18 3a10 	vmov	r3, s16
 800cba6:	4652      	mov	r2, sl
 800cba8:	4631      	mov	r1, r6
 800cbaa:	4628      	mov	r0, r5
 800cbac:	47b8      	blx	r7
 800cbae:	3001      	adds	r0, #1
 800cbb0:	f43f af41 	beq.w	800ca36 <_printf_float+0xc2>
 800cbb4:	f04f 0800 	mov.w	r8, #0
 800cbb8:	f104 091a 	add.w	r9, r4, #26
 800cbbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbbe:	3b01      	subs	r3, #1
 800cbc0:	4543      	cmp	r3, r8
 800cbc2:	dc09      	bgt.n	800cbd8 <_printf_float+0x264>
 800cbc4:	6823      	ldr	r3, [r4, #0]
 800cbc6:	079b      	lsls	r3, r3, #30
 800cbc8:	f100 8105 	bmi.w	800cdd6 <_printf_float+0x462>
 800cbcc:	68e0      	ldr	r0, [r4, #12]
 800cbce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cbd0:	4298      	cmp	r0, r3
 800cbd2:	bfb8      	it	lt
 800cbd4:	4618      	movlt	r0, r3
 800cbd6:	e730      	b.n	800ca3a <_printf_float+0xc6>
 800cbd8:	2301      	movs	r3, #1
 800cbda:	464a      	mov	r2, r9
 800cbdc:	4631      	mov	r1, r6
 800cbde:	4628      	mov	r0, r5
 800cbe0:	47b8      	blx	r7
 800cbe2:	3001      	adds	r0, #1
 800cbe4:	f43f af27 	beq.w	800ca36 <_printf_float+0xc2>
 800cbe8:	f108 0801 	add.w	r8, r8, #1
 800cbec:	e7e6      	b.n	800cbbc <_printf_float+0x248>
 800cbee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	dc39      	bgt.n	800cc68 <_printf_float+0x2f4>
 800cbf4:	4a1b      	ldr	r2, [pc, #108]	; (800cc64 <_printf_float+0x2f0>)
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	4631      	mov	r1, r6
 800cbfa:	4628      	mov	r0, r5
 800cbfc:	47b8      	blx	r7
 800cbfe:	3001      	adds	r0, #1
 800cc00:	f43f af19 	beq.w	800ca36 <_printf_float+0xc2>
 800cc04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc08:	4313      	orrs	r3, r2
 800cc0a:	d102      	bne.n	800cc12 <_printf_float+0x29e>
 800cc0c:	6823      	ldr	r3, [r4, #0]
 800cc0e:	07d9      	lsls	r1, r3, #31
 800cc10:	d5d8      	bpl.n	800cbc4 <_printf_float+0x250>
 800cc12:	ee18 3a10 	vmov	r3, s16
 800cc16:	4652      	mov	r2, sl
 800cc18:	4631      	mov	r1, r6
 800cc1a:	4628      	mov	r0, r5
 800cc1c:	47b8      	blx	r7
 800cc1e:	3001      	adds	r0, #1
 800cc20:	f43f af09 	beq.w	800ca36 <_printf_float+0xc2>
 800cc24:	f04f 0900 	mov.w	r9, #0
 800cc28:	f104 0a1a 	add.w	sl, r4, #26
 800cc2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc2e:	425b      	negs	r3, r3
 800cc30:	454b      	cmp	r3, r9
 800cc32:	dc01      	bgt.n	800cc38 <_printf_float+0x2c4>
 800cc34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc36:	e792      	b.n	800cb5e <_printf_float+0x1ea>
 800cc38:	2301      	movs	r3, #1
 800cc3a:	4652      	mov	r2, sl
 800cc3c:	4631      	mov	r1, r6
 800cc3e:	4628      	mov	r0, r5
 800cc40:	47b8      	blx	r7
 800cc42:	3001      	adds	r0, #1
 800cc44:	f43f aef7 	beq.w	800ca36 <_printf_float+0xc2>
 800cc48:	f109 0901 	add.w	r9, r9, #1
 800cc4c:	e7ee      	b.n	800cc2c <_printf_float+0x2b8>
 800cc4e:	bf00      	nop
 800cc50:	7fefffff 	.word	0x7fefffff
 800cc54:	08010574 	.word	0x08010574
 800cc58:	08010578 	.word	0x08010578
 800cc5c:	08010580 	.word	0x08010580
 800cc60:	0801057c 	.word	0x0801057c
 800cc64:	08010584 	.word	0x08010584
 800cc68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	bfa8      	it	ge
 800cc70:	461a      	movge	r2, r3
 800cc72:	2a00      	cmp	r2, #0
 800cc74:	4691      	mov	r9, r2
 800cc76:	dc37      	bgt.n	800cce8 <_printf_float+0x374>
 800cc78:	f04f 0b00 	mov.w	fp, #0
 800cc7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cc80:	f104 021a 	add.w	r2, r4, #26
 800cc84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cc86:	9305      	str	r3, [sp, #20]
 800cc88:	eba3 0309 	sub.w	r3, r3, r9
 800cc8c:	455b      	cmp	r3, fp
 800cc8e:	dc33      	bgt.n	800ccf8 <_printf_float+0x384>
 800cc90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cc94:	429a      	cmp	r2, r3
 800cc96:	db3b      	blt.n	800cd10 <_printf_float+0x39c>
 800cc98:	6823      	ldr	r3, [r4, #0]
 800cc9a:	07da      	lsls	r2, r3, #31
 800cc9c:	d438      	bmi.n	800cd10 <_printf_float+0x39c>
 800cc9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cca0:	9a05      	ldr	r2, [sp, #20]
 800cca2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cca4:	1a9a      	subs	r2, r3, r2
 800cca6:	eba3 0901 	sub.w	r9, r3, r1
 800ccaa:	4591      	cmp	r9, r2
 800ccac:	bfa8      	it	ge
 800ccae:	4691      	movge	r9, r2
 800ccb0:	f1b9 0f00 	cmp.w	r9, #0
 800ccb4:	dc35      	bgt.n	800cd22 <_printf_float+0x3ae>
 800ccb6:	f04f 0800 	mov.w	r8, #0
 800ccba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ccbe:	f104 0a1a 	add.w	sl, r4, #26
 800ccc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ccc6:	1a9b      	subs	r3, r3, r2
 800ccc8:	eba3 0309 	sub.w	r3, r3, r9
 800cccc:	4543      	cmp	r3, r8
 800ccce:	f77f af79 	ble.w	800cbc4 <_printf_float+0x250>
 800ccd2:	2301      	movs	r3, #1
 800ccd4:	4652      	mov	r2, sl
 800ccd6:	4631      	mov	r1, r6
 800ccd8:	4628      	mov	r0, r5
 800ccda:	47b8      	blx	r7
 800ccdc:	3001      	adds	r0, #1
 800ccde:	f43f aeaa 	beq.w	800ca36 <_printf_float+0xc2>
 800cce2:	f108 0801 	add.w	r8, r8, #1
 800cce6:	e7ec      	b.n	800ccc2 <_printf_float+0x34e>
 800cce8:	4613      	mov	r3, r2
 800ccea:	4631      	mov	r1, r6
 800ccec:	4642      	mov	r2, r8
 800ccee:	4628      	mov	r0, r5
 800ccf0:	47b8      	blx	r7
 800ccf2:	3001      	adds	r0, #1
 800ccf4:	d1c0      	bne.n	800cc78 <_printf_float+0x304>
 800ccf6:	e69e      	b.n	800ca36 <_printf_float+0xc2>
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	4631      	mov	r1, r6
 800ccfc:	4628      	mov	r0, r5
 800ccfe:	9205      	str	r2, [sp, #20]
 800cd00:	47b8      	blx	r7
 800cd02:	3001      	adds	r0, #1
 800cd04:	f43f ae97 	beq.w	800ca36 <_printf_float+0xc2>
 800cd08:	9a05      	ldr	r2, [sp, #20]
 800cd0a:	f10b 0b01 	add.w	fp, fp, #1
 800cd0e:	e7b9      	b.n	800cc84 <_printf_float+0x310>
 800cd10:	ee18 3a10 	vmov	r3, s16
 800cd14:	4652      	mov	r2, sl
 800cd16:	4631      	mov	r1, r6
 800cd18:	4628      	mov	r0, r5
 800cd1a:	47b8      	blx	r7
 800cd1c:	3001      	adds	r0, #1
 800cd1e:	d1be      	bne.n	800cc9e <_printf_float+0x32a>
 800cd20:	e689      	b.n	800ca36 <_printf_float+0xc2>
 800cd22:	9a05      	ldr	r2, [sp, #20]
 800cd24:	464b      	mov	r3, r9
 800cd26:	4442      	add	r2, r8
 800cd28:	4631      	mov	r1, r6
 800cd2a:	4628      	mov	r0, r5
 800cd2c:	47b8      	blx	r7
 800cd2e:	3001      	adds	r0, #1
 800cd30:	d1c1      	bne.n	800ccb6 <_printf_float+0x342>
 800cd32:	e680      	b.n	800ca36 <_printf_float+0xc2>
 800cd34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cd36:	2a01      	cmp	r2, #1
 800cd38:	dc01      	bgt.n	800cd3e <_printf_float+0x3ca>
 800cd3a:	07db      	lsls	r3, r3, #31
 800cd3c:	d538      	bpl.n	800cdb0 <_printf_float+0x43c>
 800cd3e:	2301      	movs	r3, #1
 800cd40:	4642      	mov	r2, r8
 800cd42:	4631      	mov	r1, r6
 800cd44:	4628      	mov	r0, r5
 800cd46:	47b8      	blx	r7
 800cd48:	3001      	adds	r0, #1
 800cd4a:	f43f ae74 	beq.w	800ca36 <_printf_float+0xc2>
 800cd4e:	ee18 3a10 	vmov	r3, s16
 800cd52:	4652      	mov	r2, sl
 800cd54:	4631      	mov	r1, r6
 800cd56:	4628      	mov	r0, r5
 800cd58:	47b8      	blx	r7
 800cd5a:	3001      	adds	r0, #1
 800cd5c:	f43f ae6b 	beq.w	800ca36 <_printf_float+0xc2>
 800cd60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd64:	2200      	movs	r2, #0
 800cd66:	2300      	movs	r3, #0
 800cd68:	f7f3 feb6 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd6c:	b9d8      	cbnz	r0, 800cda6 <_printf_float+0x432>
 800cd6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd70:	f108 0201 	add.w	r2, r8, #1
 800cd74:	3b01      	subs	r3, #1
 800cd76:	4631      	mov	r1, r6
 800cd78:	4628      	mov	r0, r5
 800cd7a:	47b8      	blx	r7
 800cd7c:	3001      	adds	r0, #1
 800cd7e:	d10e      	bne.n	800cd9e <_printf_float+0x42a>
 800cd80:	e659      	b.n	800ca36 <_printf_float+0xc2>
 800cd82:	2301      	movs	r3, #1
 800cd84:	4652      	mov	r2, sl
 800cd86:	4631      	mov	r1, r6
 800cd88:	4628      	mov	r0, r5
 800cd8a:	47b8      	blx	r7
 800cd8c:	3001      	adds	r0, #1
 800cd8e:	f43f ae52 	beq.w	800ca36 <_printf_float+0xc2>
 800cd92:	f108 0801 	add.w	r8, r8, #1
 800cd96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd98:	3b01      	subs	r3, #1
 800cd9a:	4543      	cmp	r3, r8
 800cd9c:	dcf1      	bgt.n	800cd82 <_printf_float+0x40e>
 800cd9e:	464b      	mov	r3, r9
 800cda0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cda4:	e6dc      	b.n	800cb60 <_printf_float+0x1ec>
 800cda6:	f04f 0800 	mov.w	r8, #0
 800cdaa:	f104 0a1a 	add.w	sl, r4, #26
 800cdae:	e7f2      	b.n	800cd96 <_printf_float+0x422>
 800cdb0:	2301      	movs	r3, #1
 800cdb2:	4642      	mov	r2, r8
 800cdb4:	e7df      	b.n	800cd76 <_printf_float+0x402>
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	464a      	mov	r2, r9
 800cdba:	4631      	mov	r1, r6
 800cdbc:	4628      	mov	r0, r5
 800cdbe:	47b8      	blx	r7
 800cdc0:	3001      	adds	r0, #1
 800cdc2:	f43f ae38 	beq.w	800ca36 <_printf_float+0xc2>
 800cdc6:	f108 0801 	add.w	r8, r8, #1
 800cdca:	68e3      	ldr	r3, [r4, #12]
 800cdcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cdce:	1a5b      	subs	r3, r3, r1
 800cdd0:	4543      	cmp	r3, r8
 800cdd2:	dcf0      	bgt.n	800cdb6 <_printf_float+0x442>
 800cdd4:	e6fa      	b.n	800cbcc <_printf_float+0x258>
 800cdd6:	f04f 0800 	mov.w	r8, #0
 800cdda:	f104 0919 	add.w	r9, r4, #25
 800cdde:	e7f4      	b.n	800cdca <_printf_float+0x456>

0800cde0 <_printf_common>:
 800cde0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cde4:	4616      	mov	r6, r2
 800cde6:	4699      	mov	r9, r3
 800cde8:	688a      	ldr	r2, [r1, #8]
 800cdea:	690b      	ldr	r3, [r1, #16]
 800cdec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cdf0:	4293      	cmp	r3, r2
 800cdf2:	bfb8      	it	lt
 800cdf4:	4613      	movlt	r3, r2
 800cdf6:	6033      	str	r3, [r6, #0]
 800cdf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cdfc:	4607      	mov	r7, r0
 800cdfe:	460c      	mov	r4, r1
 800ce00:	b10a      	cbz	r2, 800ce06 <_printf_common+0x26>
 800ce02:	3301      	adds	r3, #1
 800ce04:	6033      	str	r3, [r6, #0]
 800ce06:	6823      	ldr	r3, [r4, #0]
 800ce08:	0699      	lsls	r1, r3, #26
 800ce0a:	bf42      	ittt	mi
 800ce0c:	6833      	ldrmi	r3, [r6, #0]
 800ce0e:	3302      	addmi	r3, #2
 800ce10:	6033      	strmi	r3, [r6, #0]
 800ce12:	6825      	ldr	r5, [r4, #0]
 800ce14:	f015 0506 	ands.w	r5, r5, #6
 800ce18:	d106      	bne.n	800ce28 <_printf_common+0x48>
 800ce1a:	f104 0a19 	add.w	sl, r4, #25
 800ce1e:	68e3      	ldr	r3, [r4, #12]
 800ce20:	6832      	ldr	r2, [r6, #0]
 800ce22:	1a9b      	subs	r3, r3, r2
 800ce24:	42ab      	cmp	r3, r5
 800ce26:	dc26      	bgt.n	800ce76 <_printf_common+0x96>
 800ce28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ce2c:	1e13      	subs	r3, r2, #0
 800ce2e:	6822      	ldr	r2, [r4, #0]
 800ce30:	bf18      	it	ne
 800ce32:	2301      	movne	r3, #1
 800ce34:	0692      	lsls	r2, r2, #26
 800ce36:	d42b      	bmi.n	800ce90 <_printf_common+0xb0>
 800ce38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ce3c:	4649      	mov	r1, r9
 800ce3e:	4638      	mov	r0, r7
 800ce40:	47c0      	blx	r8
 800ce42:	3001      	adds	r0, #1
 800ce44:	d01e      	beq.n	800ce84 <_printf_common+0xa4>
 800ce46:	6823      	ldr	r3, [r4, #0]
 800ce48:	68e5      	ldr	r5, [r4, #12]
 800ce4a:	6832      	ldr	r2, [r6, #0]
 800ce4c:	f003 0306 	and.w	r3, r3, #6
 800ce50:	2b04      	cmp	r3, #4
 800ce52:	bf08      	it	eq
 800ce54:	1aad      	subeq	r5, r5, r2
 800ce56:	68a3      	ldr	r3, [r4, #8]
 800ce58:	6922      	ldr	r2, [r4, #16]
 800ce5a:	bf0c      	ite	eq
 800ce5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ce60:	2500      	movne	r5, #0
 800ce62:	4293      	cmp	r3, r2
 800ce64:	bfc4      	itt	gt
 800ce66:	1a9b      	subgt	r3, r3, r2
 800ce68:	18ed      	addgt	r5, r5, r3
 800ce6a:	2600      	movs	r6, #0
 800ce6c:	341a      	adds	r4, #26
 800ce6e:	42b5      	cmp	r5, r6
 800ce70:	d11a      	bne.n	800cea8 <_printf_common+0xc8>
 800ce72:	2000      	movs	r0, #0
 800ce74:	e008      	b.n	800ce88 <_printf_common+0xa8>
 800ce76:	2301      	movs	r3, #1
 800ce78:	4652      	mov	r2, sl
 800ce7a:	4649      	mov	r1, r9
 800ce7c:	4638      	mov	r0, r7
 800ce7e:	47c0      	blx	r8
 800ce80:	3001      	adds	r0, #1
 800ce82:	d103      	bne.n	800ce8c <_printf_common+0xac>
 800ce84:	f04f 30ff 	mov.w	r0, #4294967295
 800ce88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce8c:	3501      	adds	r5, #1
 800ce8e:	e7c6      	b.n	800ce1e <_printf_common+0x3e>
 800ce90:	18e1      	adds	r1, r4, r3
 800ce92:	1c5a      	adds	r2, r3, #1
 800ce94:	2030      	movs	r0, #48	; 0x30
 800ce96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ce9a:	4422      	add	r2, r4
 800ce9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cea4:	3302      	adds	r3, #2
 800cea6:	e7c7      	b.n	800ce38 <_printf_common+0x58>
 800cea8:	2301      	movs	r3, #1
 800ceaa:	4622      	mov	r2, r4
 800ceac:	4649      	mov	r1, r9
 800ceae:	4638      	mov	r0, r7
 800ceb0:	47c0      	blx	r8
 800ceb2:	3001      	adds	r0, #1
 800ceb4:	d0e6      	beq.n	800ce84 <_printf_common+0xa4>
 800ceb6:	3601      	adds	r6, #1
 800ceb8:	e7d9      	b.n	800ce6e <_printf_common+0x8e>
	...

0800cebc <_printf_i>:
 800cebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cec0:	7e0f      	ldrb	r7, [r1, #24]
 800cec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cec4:	2f78      	cmp	r7, #120	; 0x78
 800cec6:	4691      	mov	r9, r2
 800cec8:	4680      	mov	r8, r0
 800ceca:	460c      	mov	r4, r1
 800cecc:	469a      	mov	sl, r3
 800cece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ced2:	d807      	bhi.n	800cee4 <_printf_i+0x28>
 800ced4:	2f62      	cmp	r7, #98	; 0x62
 800ced6:	d80a      	bhi.n	800ceee <_printf_i+0x32>
 800ced8:	2f00      	cmp	r7, #0
 800ceda:	f000 80d8 	beq.w	800d08e <_printf_i+0x1d2>
 800cede:	2f58      	cmp	r7, #88	; 0x58
 800cee0:	f000 80a3 	beq.w	800d02a <_printf_i+0x16e>
 800cee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ceec:	e03a      	b.n	800cf64 <_printf_i+0xa8>
 800ceee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cef2:	2b15      	cmp	r3, #21
 800cef4:	d8f6      	bhi.n	800cee4 <_printf_i+0x28>
 800cef6:	a101      	add	r1, pc, #4	; (adr r1, 800cefc <_printf_i+0x40>)
 800cef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cefc:	0800cf55 	.word	0x0800cf55
 800cf00:	0800cf69 	.word	0x0800cf69
 800cf04:	0800cee5 	.word	0x0800cee5
 800cf08:	0800cee5 	.word	0x0800cee5
 800cf0c:	0800cee5 	.word	0x0800cee5
 800cf10:	0800cee5 	.word	0x0800cee5
 800cf14:	0800cf69 	.word	0x0800cf69
 800cf18:	0800cee5 	.word	0x0800cee5
 800cf1c:	0800cee5 	.word	0x0800cee5
 800cf20:	0800cee5 	.word	0x0800cee5
 800cf24:	0800cee5 	.word	0x0800cee5
 800cf28:	0800d075 	.word	0x0800d075
 800cf2c:	0800cf99 	.word	0x0800cf99
 800cf30:	0800d057 	.word	0x0800d057
 800cf34:	0800cee5 	.word	0x0800cee5
 800cf38:	0800cee5 	.word	0x0800cee5
 800cf3c:	0800d097 	.word	0x0800d097
 800cf40:	0800cee5 	.word	0x0800cee5
 800cf44:	0800cf99 	.word	0x0800cf99
 800cf48:	0800cee5 	.word	0x0800cee5
 800cf4c:	0800cee5 	.word	0x0800cee5
 800cf50:	0800d05f 	.word	0x0800d05f
 800cf54:	682b      	ldr	r3, [r5, #0]
 800cf56:	1d1a      	adds	r2, r3, #4
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	602a      	str	r2, [r5, #0]
 800cf5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cf60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cf64:	2301      	movs	r3, #1
 800cf66:	e0a3      	b.n	800d0b0 <_printf_i+0x1f4>
 800cf68:	6820      	ldr	r0, [r4, #0]
 800cf6a:	6829      	ldr	r1, [r5, #0]
 800cf6c:	0606      	lsls	r6, r0, #24
 800cf6e:	f101 0304 	add.w	r3, r1, #4
 800cf72:	d50a      	bpl.n	800cf8a <_printf_i+0xce>
 800cf74:	680e      	ldr	r6, [r1, #0]
 800cf76:	602b      	str	r3, [r5, #0]
 800cf78:	2e00      	cmp	r6, #0
 800cf7a:	da03      	bge.n	800cf84 <_printf_i+0xc8>
 800cf7c:	232d      	movs	r3, #45	; 0x2d
 800cf7e:	4276      	negs	r6, r6
 800cf80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cf84:	485e      	ldr	r0, [pc, #376]	; (800d100 <_printf_i+0x244>)
 800cf86:	230a      	movs	r3, #10
 800cf88:	e019      	b.n	800cfbe <_printf_i+0x102>
 800cf8a:	680e      	ldr	r6, [r1, #0]
 800cf8c:	602b      	str	r3, [r5, #0]
 800cf8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cf92:	bf18      	it	ne
 800cf94:	b236      	sxthne	r6, r6
 800cf96:	e7ef      	b.n	800cf78 <_printf_i+0xbc>
 800cf98:	682b      	ldr	r3, [r5, #0]
 800cf9a:	6820      	ldr	r0, [r4, #0]
 800cf9c:	1d19      	adds	r1, r3, #4
 800cf9e:	6029      	str	r1, [r5, #0]
 800cfa0:	0601      	lsls	r1, r0, #24
 800cfa2:	d501      	bpl.n	800cfa8 <_printf_i+0xec>
 800cfa4:	681e      	ldr	r6, [r3, #0]
 800cfa6:	e002      	b.n	800cfae <_printf_i+0xf2>
 800cfa8:	0646      	lsls	r6, r0, #25
 800cfaa:	d5fb      	bpl.n	800cfa4 <_printf_i+0xe8>
 800cfac:	881e      	ldrh	r6, [r3, #0]
 800cfae:	4854      	ldr	r0, [pc, #336]	; (800d100 <_printf_i+0x244>)
 800cfb0:	2f6f      	cmp	r7, #111	; 0x6f
 800cfb2:	bf0c      	ite	eq
 800cfb4:	2308      	moveq	r3, #8
 800cfb6:	230a      	movne	r3, #10
 800cfb8:	2100      	movs	r1, #0
 800cfba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cfbe:	6865      	ldr	r5, [r4, #4]
 800cfc0:	60a5      	str	r5, [r4, #8]
 800cfc2:	2d00      	cmp	r5, #0
 800cfc4:	bfa2      	ittt	ge
 800cfc6:	6821      	ldrge	r1, [r4, #0]
 800cfc8:	f021 0104 	bicge.w	r1, r1, #4
 800cfcc:	6021      	strge	r1, [r4, #0]
 800cfce:	b90e      	cbnz	r6, 800cfd4 <_printf_i+0x118>
 800cfd0:	2d00      	cmp	r5, #0
 800cfd2:	d04d      	beq.n	800d070 <_printf_i+0x1b4>
 800cfd4:	4615      	mov	r5, r2
 800cfd6:	fbb6 f1f3 	udiv	r1, r6, r3
 800cfda:	fb03 6711 	mls	r7, r3, r1, r6
 800cfde:	5dc7      	ldrb	r7, [r0, r7]
 800cfe0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cfe4:	4637      	mov	r7, r6
 800cfe6:	42bb      	cmp	r3, r7
 800cfe8:	460e      	mov	r6, r1
 800cfea:	d9f4      	bls.n	800cfd6 <_printf_i+0x11a>
 800cfec:	2b08      	cmp	r3, #8
 800cfee:	d10b      	bne.n	800d008 <_printf_i+0x14c>
 800cff0:	6823      	ldr	r3, [r4, #0]
 800cff2:	07de      	lsls	r6, r3, #31
 800cff4:	d508      	bpl.n	800d008 <_printf_i+0x14c>
 800cff6:	6923      	ldr	r3, [r4, #16]
 800cff8:	6861      	ldr	r1, [r4, #4]
 800cffa:	4299      	cmp	r1, r3
 800cffc:	bfde      	ittt	le
 800cffe:	2330      	movle	r3, #48	; 0x30
 800d000:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d004:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d008:	1b52      	subs	r2, r2, r5
 800d00a:	6122      	str	r2, [r4, #16]
 800d00c:	f8cd a000 	str.w	sl, [sp]
 800d010:	464b      	mov	r3, r9
 800d012:	aa03      	add	r2, sp, #12
 800d014:	4621      	mov	r1, r4
 800d016:	4640      	mov	r0, r8
 800d018:	f7ff fee2 	bl	800cde0 <_printf_common>
 800d01c:	3001      	adds	r0, #1
 800d01e:	d14c      	bne.n	800d0ba <_printf_i+0x1fe>
 800d020:	f04f 30ff 	mov.w	r0, #4294967295
 800d024:	b004      	add	sp, #16
 800d026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d02a:	4835      	ldr	r0, [pc, #212]	; (800d100 <_printf_i+0x244>)
 800d02c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d030:	6829      	ldr	r1, [r5, #0]
 800d032:	6823      	ldr	r3, [r4, #0]
 800d034:	f851 6b04 	ldr.w	r6, [r1], #4
 800d038:	6029      	str	r1, [r5, #0]
 800d03a:	061d      	lsls	r5, r3, #24
 800d03c:	d514      	bpl.n	800d068 <_printf_i+0x1ac>
 800d03e:	07df      	lsls	r7, r3, #31
 800d040:	bf44      	itt	mi
 800d042:	f043 0320 	orrmi.w	r3, r3, #32
 800d046:	6023      	strmi	r3, [r4, #0]
 800d048:	b91e      	cbnz	r6, 800d052 <_printf_i+0x196>
 800d04a:	6823      	ldr	r3, [r4, #0]
 800d04c:	f023 0320 	bic.w	r3, r3, #32
 800d050:	6023      	str	r3, [r4, #0]
 800d052:	2310      	movs	r3, #16
 800d054:	e7b0      	b.n	800cfb8 <_printf_i+0xfc>
 800d056:	6823      	ldr	r3, [r4, #0]
 800d058:	f043 0320 	orr.w	r3, r3, #32
 800d05c:	6023      	str	r3, [r4, #0]
 800d05e:	2378      	movs	r3, #120	; 0x78
 800d060:	4828      	ldr	r0, [pc, #160]	; (800d104 <_printf_i+0x248>)
 800d062:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d066:	e7e3      	b.n	800d030 <_printf_i+0x174>
 800d068:	0659      	lsls	r1, r3, #25
 800d06a:	bf48      	it	mi
 800d06c:	b2b6      	uxthmi	r6, r6
 800d06e:	e7e6      	b.n	800d03e <_printf_i+0x182>
 800d070:	4615      	mov	r5, r2
 800d072:	e7bb      	b.n	800cfec <_printf_i+0x130>
 800d074:	682b      	ldr	r3, [r5, #0]
 800d076:	6826      	ldr	r6, [r4, #0]
 800d078:	6961      	ldr	r1, [r4, #20]
 800d07a:	1d18      	adds	r0, r3, #4
 800d07c:	6028      	str	r0, [r5, #0]
 800d07e:	0635      	lsls	r5, r6, #24
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	d501      	bpl.n	800d088 <_printf_i+0x1cc>
 800d084:	6019      	str	r1, [r3, #0]
 800d086:	e002      	b.n	800d08e <_printf_i+0x1d2>
 800d088:	0670      	lsls	r0, r6, #25
 800d08a:	d5fb      	bpl.n	800d084 <_printf_i+0x1c8>
 800d08c:	8019      	strh	r1, [r3, #0]
 800d08e:	2300      	movs	r3, #0
 800d090:	6123      	str	r3, [r4, #16]
 800d092:	4615      	mov	r5, r2
 800d094:	e7ba      	b.n	800d00c <_printf_i+0x150>
 800d096:	682b      	ldr	r3, [r5, #0]
 800d098:	1d1a      	adds	r2, r3, #4
 800d09a:	602a      	str	r2, [r5, #0]
 800d09c:	681d      	ldr	r5, [r3, #0]
 800d09e:	6862      	ldr	r2, [r4, #4]
 800d0a0:	2100      	movs	r1, #0
 800d0a2:	4628      	mov	r0, r5
 800d0a4:	f7f3 f8a4 	bl	80001f0 <memchr>
 800d0a8:	b108      	cbz	r0, 800d0ae <_printf_i+0x1f2>
 800d0aa:	1b40      	subs	r0, r0, r5
 800d0ac:	6060      	str	r0, [r4, #4]
 800d0ae:	6863      	ldr	r3, [r4, #4]
 800d0b0:	6123      	str	r3, [r4, #16]
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0b8:	e7a8      	b.n	800d00c <_printf_i+0x150>
 800d0ba:	6923      	ldr	r3, [r4, #16]
 800d0bc:	462a      	mov	r2, r5
 800d0be:	4649      	mov	r1, r9
 800d0c0:	4640      	mov	r0, r8
 800d0c2:	47d0      	blx	sl
 800d0c4:	3001      	adds	r0, #1
 800d0c6:	d0ab      	beq.n	800d020 <_printf_i+0x164>
 800d0c8:	6823      	ldr	r3, [r4, #0]
 800d0ca:	079b      	lsls	r3, r3, #30
 800d0cc:	d413      	bmi.n	800d0f6 <_printf_i+0x23a>
 800d0ce:	68e0      	ldr	r0, [r4, #12]
 800d0d0:	9b03      	ldr	r3, [sp, #12]
 800d0d2:	4298      	cmp	r0, r3
 800d0d4:	bfb8      	it	lt
 800d0d6:	4618      	movlt	r0, r3
 800d0d8:	e7a4      	b.n	800d024 <_printf_i+0x168>
 800d0da:	2301      	movs	r3, #1
 800d0dc:	4632      	mov	r2, r6
 800d0de:	4649      	mov	r1, r9
 800d0e0:	4640      	mov	r0, r8
 800d0e2:	47d0      	blx	sl
 800d0e4:	3001      	adds	r0, #1
 800d0e6:	d09b      	beq.n	800d020 <_printf_i+0x164>
 800d0e8:	3501      	adds	r5, #1
 800d0ea:	68e3      	ldr	r3, [r4, #12]
 800d0ec:	9903      	ldr	r1, [sp, #12]
 800d0ee:	1a5b      	subs	r3, r3, r1
 800d0f0:	42ab      	cmp	r3, r5
 800d0f2:	dcf2      	bgt.n	800d0da <_printf_i+0x21e>
 800d0f4:	e7eb      	b.n	800d0ce <_printf_i+0x212>
 800d0f6:	2500      	movs	r5, #0
 800d0f8:	f104 0619 	add.w	r6, r4, #25
 800d0fc:	e7f5      	b.n	800d0ea <_printf_i+0x22e>
 800d0fe:	bf00      	nop
 800d100:	08010586 	.word	0x08010586
 800d104:	08010597 	.word	0x08010597

0800d108 <siprintf>:
 800d108:	b40e      	push	{r1, r2, r3}
 800d10a:	b500      	push	{lr}
 800d10c:	b09c      	sub	sp, #112	; 0x70
 800d10e:	ab1d      	add	r3, sp, #116	; 0x74
 800d110:	9002      	str	r0, [sp, #8]
 800d112:	9006      	str	r0, [sp, #24]
 800d114:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d118:	4809      	ldr	r0, [pc, #36]	; (800d140 <siprintf+0x38>)
 800d11a:	9107      	str	r1, [sp, #28]
 800d11c:	9104      	str	r1, [sp, #16]
 800d11e:	4909      	ldr	r1, [pc, #36]	; (800d144 <siprintf+0x3c>)
 800d120:	f853 2b04 	ldr.w	r2, [r3], #4
 800d124:	9105      	str	r1, [sp, #20]
 800d126:	6800      	ldr	r0, [r0, #0]
 800d128:	9301      	str	r3, [sp, #4]
 800d12a:	a902      	add	r1, sp, #8
 800d12c:	f001 fb76 	bl	800e81c <_svfiprintf_r>
 800d130:	9b02      	ldr	r3, [sp, #8]
 800d132:	2200      	movs	r2, #0
 800d134:	701a      	strb	r2, [r3, #0]
 800d136:	b01c      	add	sp, #112	; 0x70
 800d138:	f85d eb04 	ldr.w	lr, [sp], #4
 800d13c:	b003      	add	sp, #12
 800d13e:	4770      	bx	lr
 800d140:	200002a0 	.word	0x200002a0
 800d144:	ffff0208 	.word	0xffff0208

0800d148 <quorem>:
 800d148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d14c:	6903      	ldr	r3, [r0, #16]
 800d14e:	690c      	ldr	r4, [r1, #16]
 800d150:	42a3      	cmp	r3, r4
 800d152:	4607      	mov	r7, r0
 800d154:	f2c0 8081 	blt.w	800d25a <quorem+0x112>
 800d158:	3c01      	subs	r4, #1
 800d15a:	f101 0814 	add.w	r8, r1, #20
 800d15e:	f100 0514 	add.w	r5, r0, #20
 800d162:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d166:	9301      	str	r3, [sp, #4]
 800d168:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d16c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d170:	3301      	adds	r3, #1
 800d172:	429a      	cmp	r2, r3
 800d174:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d178:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d17c:	fbb2 f6f3 	udiv	r6, r2, r3
 800d180:	d331      	bcc.n	800d1e6 <quorem+0x9e>
 800d182:	f04f 0e00 	mov.w	lr, #0
 800d186:	4640      	mov	r0, r8
 800d188:	46ac      	mov	ip, r5
 800d18a:	46f2      	mov	sl, lr
 800d18c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d190:	b293      	uxth	r3, r2
 800d192:	fb06 e303 	mla	r3, r6, r3, lr
 800d196:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d19a:	b29b      	uxth	r3, r3
 800d19c:	ebaa 0303 	sub.w	r3, sl, r3
 800d1a0:	f8dc a000 	ldr.w	sl, [ip]
 800d1a4:	0c12      	lsrs	r2, r2, #16
 800d1a6:	fa13 f38a 	uxtah	r3, r3, sl
 800d1aa:	fb06 e202 	mla	r2, r6, r2, lr
 800d1ae:	9300      	str	r3, [sp, #0]
 800d1b0:	9b00      	ldr	r3, [sp, #0]
 800d1b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d1b6:	b292      	uxth	r2, r2
 800d1b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d1bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1c0:	f8bd 3000 	ldrh.w	r3, [sp]
 800d1c4:	4581      	cmp	r9, r0
 800d1c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1ca:	f84c 3b04 	str.w	r3, [ip], #4
 800d1ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d1d2:	d2db      	bcs.n	800d18c <quorem+0x44>
 800d1d4:	f855 300b 	ldr.w	r3, [r5, fp]
 800d1d8:	b92b      	cbnz	r3, 800d1e6 <quorem+0x9e>
 800d1da:	9b01      	ldr	r3, [sp, #4]
 800d1dc:	3b04      	subs	r3, #4
 800d1de:	429d      	cmp	r5, r3
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	d32e      	bcc.n	800d242 <quorem+0xfa>
 800d1e4:	613c      	str	r4, [r7, #16]
 800d1e6:	4638      	mov	r0, r7
 800d1e8:	f001 f8c4 	bl	800e374 <__mcmp>
 800d1ec:	2800      	cmp	r0, #0
 800d1ee:	db24      	blt.n	800d23a <quorem+0xf2>
 800d1f0:	3601      	adds	r6, #1
 800d1f2:	4628      	mov	r0, r5
 800d1f4:	f04f 0c00 	mov.w	ip, #0
 800d1f8:	f858 2b04 	ldr.w	r2, [r8], #4
 800d1fc:	f8d0 e000 	ldr.w	lr, [r0]
 800d200:	b293      	uxth	r3, r2
 800d202:	ebac 0303 	sub.w	r3, ip, r3
 800d206:	0c12      	lsrs	r2, r2, #16
 800d208:	fa13 f38e 	uxtah	r3, r3, lr
 800d20c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d210:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d214:	b29b      	uxth	r3, r3
 800d216:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d21a:	45c1      	cmp	r9, r8
 800d21c:	f840 3b04 	str.w	r3, [r0], #4
 800d220:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d224:	d2e8      	bcs.n	800d1f8 <quorem+0xb0>
 800d226:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d22a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d22e:	b922      	cbnz	r2, 800d23a <quorem+0xf2>
 800d230:	3b04      	subs	r3, #4
 800d232:	429d      	cmp	r5, r3
 800d234:	461a      	mov	r2, r3
 800d236:	d30a      	bcc.n	800d24e <quorem+0x106>
 800d238:	613c      	str	r4, [r7, #16]
 800d23a:	4630      	mov	r0, r6
 800d23c:	b003      	add	sp, #12
 800d23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d242:	6812      	ldr	r2, [r2, #0]
 800d244:	3b04      	subs	r3, #4
 800d246:	2a00      	cmp	r2, #0
 800d248:	d1cc      	bne.n	800d1e4 <quorem+0x9c>
 800d24a:	3c01      	subs	r4, #1
 800d24c:	e7c7      	b.n	800d1de <quorem+0x96>
 800d24e:	6812      	ldr	r2, [r2, #0]
 800d250:	3b04      	subs	r3, #4
 800d252:	2a00      	cmp	r2, #0
 800d254:	d1f0      	bne.n	800d238 <quorem+0xf0>
 800d256:	3c01      	subs	r4, #1
 800d258:	e7eb      	b.n	800d232 <quorem+0xea>
 800d25a:	2000      	movs	r0, #0
 800d25c:	e7ee      	b.n	800d23c <quorem+0xf4>
	...

0800d260 <_dtoa_r>:
 800d260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d264:	ed2d 8b04 	vpush	{d8-d9}
 800d268:	ec57 6b10 	vmov	r6, r7, d0
 800d26c:	b093      	sub	sp, #76	; 0x4c
 800d26e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d270:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d274:	9106      	str	r1, [sp, #24]
 800d276:	ee10 aa10 	vmov	sl, s0
 800d27a:	4604      	mov	r4, r0
 800d27c:	9209      	str	r2, [sp, #36]	; 0x24
 800d27e:	930c      	str	r3, [sp, #48]	; 0x30
 800d280:	46bb      	mov	fp, r7
 800d282:	b975      	cbnz	r5, 800d2a2 <_dtoa_r+0x42>
 800d284:	2010      	movs	r0, #16
 800d286:	f000 fddd 	bl	800de44 <malloc>
 800d28a:	4602      	mov	r2, r0
 800d28c:	6260      	str	r0, [r4, #36]	; 0x24
 800d28e:	b920      	cbnz	r0, 800d29a <_dtoa_r+0x3a>
 800d290:	4ba7      	ldr	r3, [pc, #668]	; (800d530 <_dtoa_r+0x2d0>)
 800d292:	21ea      	movs	r1, #234	; 0xea
 800d294:	48a7      	ldr	r0, [pc, #668]	; (800d534 <_dtoa_r+0x2d4>)
 800d296:	f001 fbd1 	bl	800ea3c <__assert_func>
 800d29a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d29e:	6005      	str	r5, [r0, #0]
 800d2a0:	60c5      	str	r5, [r0, #12]
 800d2a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2a4:	6819      	ldr	r1, [r3, #0]
 800d2a6:	b151      	cbz	r1, 800d2be <_dtoa_r+0x5e>
 800d2a8:	685a      	ldr	r2, [r3, #4]
 800d2aa:	604a      	str	r2, [r1, #4]
 800d2ac:	2301      	movs	r3, #1
 800d2ae:	4093      	lsls	r3, r2
 800d2b0:	608b      	str	r3, [r1, #8]
 800d2b2:	4620      	mov	r0, r4
 800d2b4:	f000 fe1c 	bl	800def0 <_Bfree>
 800d2b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	601a      	str	r2, [r3, #0]
 800d2be:	1e3b      	subs	r3, r7, #0
 800d2c0:	bfaa      	itet	ge
 800d2c2:	2300      	movge	r3, #0
 800d2c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d2c8:	f8c8 3000 	strge.w	r3, [r8]
 800d2cc:	4b9a      	ldr	r3, [pc, #616]	; (800d538 <_dtoa_r+0x2d8>)
 800d2ce:	bfbc      	itt	lt
 800d2d0:	2201      	movlt	r2, #1
 800d2d2:	f8c8 2000 	strlt.w	r2, [r8]
 800d2d6:	ea33 030b 	bics.w	r3, r3, fp
 800d2da:	d11b      	bne.n	800d314 <_dtoa_r+0xb4>
 800d2dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d2de:	f242 730f 	movw	r3, #9999	; 0x270f
 800d2e2:	6013      	str	r3, [r2, #0]
 800d2e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2e8:	4333      	orrs	r3, r6
 800d2ea:	f000 8592 	beq.w	800de12 <_dtoa_r+0xbb2>
 800d2ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2f0:	b963      	cbnz	r3, 800d30c <_dtoa_r+0xac>
 800d2f2:	4b92      	ldr	r3, [pc, #584]	; (800d53c <_dtoa_r+0x2dc>)
 800d2f4:	e022      	b.n	800d33c <_dtoa_r+0xdc>
 800d2f6:	4b92      	ldr	r3, [pc, #584]	; (800d540 <_dtoa_r+0x2e0>)
 800d2f8:	9301      	str	r3, [sp, #4]
 800d2fa:	3308      	adds	r3, #8
 800d2fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d2fe:	6013      	str	r3, [r2, #0]
 800d300:	9801      	ldr	r0, [sp, #4]
 800d302:	b013      	add	sp, #76	; 0x4c
 800d304:	ecbd 8b04 	vpop	{d8-d9}
 800d308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d30c:	4b8b      	ldr	r3, [pc, #556]	; (800d53c <_dtoa_r+0x2dc>)
 800d30e:	9301      	str	r3, [sp, #4]
 800d310:	3303      	adds	r3, #3
 800d312:	e7f3      	b.n	800d2fc <_dtoa_r+0x9c>
 800d314:	2200      	movs	r2, #0
 800d316:	2300      	movs	r3, #0
 800d318:	4650      	mov	r0, sl
 800d31a:	4659      	mov	r1, fp
 800d31c:	f7f3 fbdc 	bl	8000ad8 <__aeabi_dcmpeq>
 800d320:	ec4b ab19 	vmov	d9, sl, fp
 800d324:	4680      	mov	r8, r0
 800d326:	b158      	cbz	r0, 800d340 <_dtoa_r+0xe0>
 800d328:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d32a:	2301      	movs	r3, #1
 800d32c:	6013      	str	r3, [r2, #0]
 800d32e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d330:	2b00      	cmp	r3, #0
 800d332:	f000 856b 	beq.w	800de0c <_dtoa_r+0xbac>
 800d336:	4883      	ldr	r0, [pc, #524]	; (800d544 <_dtoa_r+0x2e4>)
 800d338:	6018      	str	r0, [r3, #0]
 800d33a:	1e43      	subs	r3, r0, #1
 800d33c:	9301      	str	r3, [sp, #4]
 800d33e:	e7df      	b.n	800d300 <_dtoa_r+0xa0>
 800d340:	ec4b ab10 	vmov	d0, sl, fp
 800d344:	aa10      	add	r2, sp, #64	; 0x40
 800d346:	a911      	add	r1, sp, #68	; 0x44
 800d348:	4620      	mov	r0, r4
 800d34a:	f001 f8b9 	bl	800e4c0 <__d2b>
 800d34e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d352:	ee08 0a10 	vmov	s16, r0
 800d356:	2d00      	cmp	r5, #0
 800d358:	f000 8084 	beq.w	800d464 <_dtoa_r+0x204>
 800d35c:	ee19 3a90 	vmov	r3, s19
 800d360:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d364:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d368:	4656      	mov	r6, sl
 800d36a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d36e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d372:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d376:	4b74      	ldr	r3, [pc, #464]	; (800d548 <_dtoa_r+0x2e8>)
 800d378:	2200      	movs	r2, #0
 800d37a:	4630      	mov	r0, r6
 800d37c:	4639      	mov	r1, r7
 800d37e:	f7f2 ff8b 	bl	8000298 <__aeabi_dsub>
 800d382:	a365      	add	r3, pc, #404	; (adr r3, 800d518 <_dtoa_r+0x2b8>)
 800d384:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d388:	f7f3 f93e 	bl	8000608 <__aeabi_dmul>
 800d38c:	a364      	add	r3, pc, #400	; (adr r3, 800d520 <_dtoa_r+0x2c0>)
 800d38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d392:	f7f2 ff83 	bl	800029c <__adddf3>
 800d396:	4606      	mov	r6, r0
 800d398:	4628      	mov	r0, r5
 800d39a:	460f      	mov	r7, r1
 800d39c:	f7f3 f8ca 	bl	8000534 <__aeabi_i2d>
 800d3a0:	a361      	add	r3, pc, #388	; (adr r3, 800d528 <_dtoa_r+0x2c8>)
 800d3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3a6:	f7f3 f92f 	bl	8000608 <__aeabi_dmul>
 800d3aa:	4602      	mov	r2, r0
 800d3ac:	460b      	mov	r3, r1
 800d3ae:	4630      	mov	r0, r6
 800d3b0:	4639      	mov	r1, r7
 800d3b2:	f7f2 ff73 	bl	800029c <__adddf3>
 800d3b6:	4606      	mov	r6, r0
 800d3b8:	460f      	mov	r7, r1
 800d3ba:	f7f3 fbd5 	bl	8000b68 <__aeabi_d2iz>
 800d3be:	2200      	movs	r2, #0
 800d3c0:	9000      	str	r0, [sp, #0]
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	4630      	mov	r0, r6
 800d3c6:	4639      	mov	r1, r7
 800d3c8:	f7f3 fb90 	bl	8000aec <__aeabi_dcmplt>
 800d3cc:	b150      	cbz	r0, 800d3e4 <_dtoa_r+0x184>
 800d3ce:	9800      	ldr	r0, [sp, #0]
 800d3d0:	f7f3 f8b0 	bl	8000534 <__aeabi_i2d>
 800d3d4:	4632      	mov	r2, r6
 800d3d6:	463b      	mov	r3, r7
 800d3d8:	f7f3 fb7e 	bl	8000ad8 <__aeabi_dcmpeq>
 800d3dc:	b910      	cbnz	r0, 800d3e4 <_dtoa_r+0x184>
 800d3de:	9b00      	ldr	r3, [sp, #0]
 800d3e0:	3b01      	subs	r3, #1
 800d3e2:	9300      	str	r3, [sp, #0]
 800d3e4:	9b00      	ldr	r3, [sp, #0]
 800d3e6:	2b16      	cmp	r3, #22
 800d3e8:	d85a      	bhi.n	800d4a0 <_dtoa_r+0x240>
 800d3ea:	9a00      	ldr	r2, [sp, #0]
 800d3ec:	4b57      	ldr	r3, [pc, #348]	; (800d54c <_dtoa_r+0x2ec>)
 800d3ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f6:	ec51 0b19 	vmov	r0, r1, d9
 800d3fa:	f7f3 fb77 	bl	8000aec <__aeabi_dcmplt>
 800d3fe:	2800      	cmp	r0, #0
 800d400:	d050      	beq.n	800d4a4 <_dtoa_r+0x244>
 800d402:	9b00      	ldr	r3, [sp, #0]
 800d404:	3b01      	subs	r3, #1
 800d406:	9300      	str	r3, [sp, #0]
 800d408:	2300      	movs	r3, #0
 800d40a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d40c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d40e:	1b5d      	subs	r5, r3, r5
 800d410:	1e6b      	subs	r3, r5, #1
 800d412:	9305      	str	r3, [sp, #20]
 800d414:	bf45      	ittet	mi
 800d416:	f1c5 0301 	rsbmi	r3, r5, #1
 800d41a:	9304      	strmi	r3, [sp, #16]
 800d41c:	2300      	movpl	r3, #0
 800d41e:	2300      	movmi	r3, #0
 800d420:	bf4c      	ite	mi
 800d422:	9305      	strmi	r3, [sp, #20]
 800d424:	9304      	strpl	r3, [sp, #16]
 800d426:	9b00      	ldr	r3, [sp, #0]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	db3d      	blt.n	800d4a8 <_dtoa_r+0x248>
 800d42c:	9b05      	ldr	r3, [sp, #20]
 800d42e:	9a00      	ldr	r2, [sp, #0]
 800d430:	920a      	str	r2, [sp, #40]	; 0x28
 800d432:	4413      	add	r3, r2
 800d434:	9305      	str	r3, [sp, #20]
 800d436:	2300      	movs	r3, #0
 800d438:	9307      	str	r3, [sp, #28]
 800d43a:	9b06      	ldr	r3, [sp, #24]
 800d43c:	2b09      	cmp	r3, #9
 800d43e:	f200 8089 	bhi.w	800d554 <_dtoa_r+0x2f4>
 800d442:	2b05      	cmp	r3, #5
 800d444:	bfc4      	itt	gt
 800d446:	3b04      	subgt	r3, #4
 800d448:	9306      	strgt	r3, [sp, #24]
 800d44a:	9b06      	ldr	r3, [sp, #24]
 800d44c:	f1a3 0302 	sub.w	r3, r3, #2
 800d450:	bfcc      	ite	gt
 800d452:	2500      	movgt	r5, #0
 800d454:	2501      	movle	r5, #1
 800d456:	2b03      	cmp	r3, #3
 800d458:	f200 8087 	bhi.w	800d56a <_dtoa_r+0x30a>
 800d45c:	e8df f003 	tbb	[pc, r3]
 800d460:	59383a2d 	.word	0x59383a2d
 800d464:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d468:	441d      	add	r5, r3
 800d46a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d46e:	2b20      	cmp	r3, #32
 800d470:	bfc1      	itttt	gt
 800d472:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d476:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d47a:	fa0b f303 	lslgt.w	r3, fp, r3
 800d47e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d482:	bfda      	itte	le
 800d484:	f1c3 0320 	rsble	r3, r3, #32
 800d488:	fa06 f003 	lslle.w	r0, r6, r3
 800d48c:	4318      	orrgt	r0, r3
 800d48e:	f7f3 f841 	bl	8000514 <__aeabi_ui2d>
 800d492:	2301      	movs	r3, #1
 800d494:	4606      	mov	r6, r0
 800d496:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d49a:	3d01      	subs	r5, #1
 800d49c:	930e      	str	r3, [sp, #56]	; 0x38
 800d49e:	e76a      	b.n	800d376 <_dtoa_r+0x116>
 800d4a0:	2301      	movs	r3, #1
 800d4a2:	e7b2      	b.n	800d40a <_dtoa_r+0x1aa>
 800d4a4:	900b      	str	r0, [sp, #44]	; 0x2c
 800d4a6:	e7b1      	b.n	800d40c <_dtoa_r+0x1ac>
 800d4a8:	9b04      	ldr	r3, [sp, #16]
 800d4aa:	9a00      	ldr	r2, [sp, #0]
 800d4ac:	1a9b      	subs	r3, r3, r2
 800d4ae:	9304      	str	r3, [sp, #16]
 800d4b0:	4253      	negs	r3, r2
 800d4b2:	9307      	str	r3, [sp, #28]
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	930a      	str	r3, [sp, #40]	; 0x28
 800d4b8:	e7bf      	b.n	800d43a <_dtoa_r+0x1da>
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	9308      	str	r3, [sp, #32]
 800d4be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	dc55      	bgt.n	800d570 <_dtoa_r+0x310>
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	9209      	str	r2, [sp, #36]	; 0x24
 800d4ce:	e00c      	b.n	800d4ea <_dtoa_r+0x28a>
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	e7f3      	b.n	800d4bc <_dtoa_r+0x25c>
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4d8:	9308      	str	r3, [sp, #32]
 800d4da:	9b00      	ldr	r3, [sp, #0]
 800d4dc:	4413      	add	r3, r2
 800d4de:	9302      	str	r3, [sp, #8]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	9303      	str	r3, [sp, #12]
 800d4e6:	bfb8      	it	lt
 800d4e8:	2301      	movlt	r3, #1
 800d4ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	6042      	str	r2, [r0, #4]
 800d4f0:	2204      	movs	r2, #4
 800d4f2:	f102 0614 	add.w	r6, r2, #20
 800d4f6:	429e      	cmp	r6, r3
 800d4f8:	6841      	ldr	r1, [r0, #4]
 800d4fa:	d93d      	bls.n	800d578 <_dtoa_r+0x318>
 800d4fc:	4620      	mov	r0, r4
 800d4fe:	f000 fcb7 	bl	800de70 <_Balloc>
 800d502:	9001      	str	r0, [sp, #4]
 800d504:	2800      	cmp	r0, #0
 800d506:	d13b      	bne.n	800d580 <_dtoa_r+0x320>
 800d508:	4b11      	ldr	r3, [pc, #68]	; (800d550 <_dtoa_r+0x2f0>)
 800d50a:	4602      	mov	r2, r0
 800d50c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d510:	e6c0      	b.n	800d294 <_dtoa_r+0x34>
 800d512:	2301      	movs	r3, #1
 800d514:	e7df      	b.n	800d4d6 <_dtoa_r+0x276>
 800d516:	bf00      	nop
 800d518:	636f4361 	.word	0x636f4361
 800d51c:	3fd287a7 	.word	0x3fd287a7
 800d520:	8b60c8b3 	.word	0x8b60c8b3
 800d524:	3fc68a28 	.word	0x3fc68a28
 800d528:	509f79fb 	.word	0x509f79fb
 800d52c:	3fd34413 	.word	0x3fd34413
 800d530:	080105b5 	.word	0x080105b5
 800d534:	080105cc 	.word	0x080105cc
 800d538:	7ff00000 	.word	0x7ff00000
 800d53c:	080105b1 	.word	0x080105b1
 800d540:	080105a8 	.word	0x080105a8
 800d544:	08010585 	.word	0x08010585
 800d548:	3ff80000 	.word	0x3ff80000
 800d54c:	080106c0 	.word	0x080106c0
 800d550:	08010627 	.word	0x08010627
 800d554:	2501      	movs	r5, #1
 800d556:	2300      	movs	r3, #0
 800d558:	9306      	str	r3, [sp, #24]
 800d55a:	9508      	str	r5, [sp, #32]
 800d55c:	f04f 33ff 	mov.w	r3, #4294967295
 800d560:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d564:	2200      	movs	r2, #0
 800d566:	2312      	movs	r3, #18
 800d568:	e7b0      	b.n	800d4cc <_dtoa_r+0x26c>
 800d56a:	2301      	movs	r3, #1
 800d56c:	9308      	str	r3, [sp, #32]
 800d56e:	e7f5      	b.n	800d55c <_dtoa_r+0x2fc>
 800d570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d572:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d576:	e7b8      	b.n	800d4ea <_dtoa_r+0x28a>
 800d578:	3101      	adds	r1, #1
 800d57a:	6041      	str	r1, [r0, #4]
 800d57c:	0052      	lsls	r2, r2, #1
 800d57e:	e7b8      	b.n	800d4f2 <_dtoa_r+0x292>
 800d580:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d582:	9a01      	ldr	r2, [sp, #4]
 800d584:	601a      	str	r2, [r3, #0]
 800d586:	9b03      	ldr	r3, [sp, #12]
 800d588:	2b0e      	cmp	r3, #14
 800d58a:	f200 809d 	bhi.w	800d6c8 <_dtoa_r+0x468>
 800d58e:	2d00      	cmp	r5, #0
 800d590:	f000 809a 	beq.w	800d6c8 <_dtoa_r+0x468>
 800d594:	9b00      	ldr	r3, [sp, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	dd32      	ble.n	800d600 <_dtoa_r+0x3a0>
 800d59a:	4ab7      	ldr	r2, [pc, #732]	; (800d878 <_dtoa_r+0x618>)
 800d59c:	f003 030f 	and.w	r3, r3, #15
 800d5a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d5a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d5a8:	9b00      	ldr	r3, [sp, #0]
 800d5aa:	05d8      	lsls	r0, r3, #23
 800d5ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d5b0:	d516      	bpl.n	800d5e0 <_dtoa_r+0x380>
 800d5b2:	4bb2      	ldr	r3, [pc, #712]	; (800d87c <_dtoa_r+0x61c>)
 800d5b4:	ec51 0b19 	vmov	r0, r1, d9
 800d5b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d5bc:	f7f3 f94e 	bl	800085c <__aeabi_ddiv>
 800d5c0:	f007 070f 	and.w	r7, r7, #15
 800d5c4:	4682      	mov	sl, r0
 800d5c6:	468b      	mov	fp, r1
 800d5c8:	2503      	movs	r5, #3
 800d5ca:	4eac      	ldr	r6, [pc, #688]	; (800d87c <_dtoa_r+0x61c>)
 800d5cc:	b957      	cbnz	r7, 800d5e4 <_dtoa_r+0x384>
 800d5ce:	4642      	mov	r2, r8
 800d5d0:	464b      	mov	r3, r9
 800d5d2:	4650      	mov	r0, sl
 800d5d4:	4659      	mov	r1, fp
 800d5d6:	f7f3 f941 	bl	800085c <__aeabi_ddiv>
 800d5da:	4682      	mov	sl, r0
 800d5dc:	468b      	mov	fp, r1
 800d5de:	e028      	b.n	800d632 <_dtoa_r+0x3d2>
 800d5e0:	2502      	movs	r5, #2
 800d5e2:	e7f2      	b.n	800d5ca <_dtoa_r+0x36a>
 800d5e4:	07f9      	lsls	r1, r7, #31
 800d5e6:	d508      	bpl.n	800d5fa <_dtoa_r+0x39a>
 800d5e8:	4640      	mov	r0, r8
 800d5ea:	4649      	mov	r1, r9
 800d5ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d5f0:	f7f3 f80a 	bl	8000608 <__aeabi_dmul>
 800d5f4:	3501      	adds	r5, #1
 800d5f6:	4680      	mov	r8, r0
 800d5f8:	4689      	mov	r9, r1
 800d5fa:	107f      	asrs	r7, r7, #1
 800d5fc:	3608      	adds	r6, #8
 800d5fe:	e7e5      	b.n	800d5cc <_dtoa_r+0x36c>
 800d600:	f000 809b 	beq.w	800d73a <_dtoa_r+0x4da>
 800d604:	9b00      	ldr	r3, [sp, #0]
 800d606:	4f9d      	ldr	r7, [pc, #628]	; (800d87c <_dtoa_r+0x61c>)
 800d608:	425e      	negs	r6, r3
 800d60a:	4b9b      	ldr	r3, [pc, #620]	; (800d878 <_dtoa_r+0x618>)
 800d60c:	f006 020f 	and.w	r2, r6, #15
 800d610:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d614:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d618:	ec51 0b19 	vmov	r0, r1, d9
 800d61c:	f7f2 fff4 	bl	8000608 <__aeabi_dmul>
 800d620:	1136      	asrs	r6, r6, #4
 800d622:	4682      	mov	sl, r0
 800d624:	468b      	mov	fp, r1
 800d626:	2300      	movs	r3, #0
 800d628:	2502      	movs	r5, #2
 800d62a:	2e00      	cmp	r6, #0
 800d62c:	d17a      	bne.n	800d724 <_dtoa_r+0x4c4>
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d1d3      	bne.n	800d5da <_dtoa_r+0x37a>
 800d632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d634:	2b00      	cmp	r3, #0
 800d636:	f000 8082 	beq.w	800d73e <_dtoa_r+0x4de>
 800d63a:	4b91      	ldr	r3, [pc, #580]	; (800d880 <_dtoa_r+0x620>)
 800d63c:	2200      	movs	r2, #0
 800d63e:	4650      	mov	r0, sl
 800d640:	4659      	mov	r1, fp
 800d642:	f7f3 fa53 	bl	8000aec <__aeabi_dcmplt>
 800d646:	2800      	cmp	r0, #0
 800d648:	d079      	beq.n	800d73e <_dtoa_r+0x4de>
 800d64a:	9b03      	ldr	r3, [sp, #12]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d076      	beq.n	800d73e <_dtoa_r+0x4de>
 800d650:	9b02      	ldr	r3, [sp, #8]
 800d652:	2b00      	cmp	r3, #0
 800d654:	dd36      	ble.n	800d6c4 <_dtoa_r+0x464>
 800d656:	9b00      	ldr	r3, [sp, #0]
 800d658:	4650      	mov	r0, sl
 800d65a:	4659      	mov	r1, fp
 800d65c:	1e5f      	subs	r7, r3, #1
 800d65e:	2200      	movs	r2, #0
 800d660:	4b88      	ldr	r3, [pc, #544]	; (800d884 <_dtoa_r+0x624>)
 800d662:	f7f2 ffd1 	bl	8000608 <__aeabi_dmul>
 800d666:	9e02      	ldr	r6, [sp, #8]
 800d668:	4682      	mov	sl, r0
 800d66a:	468b      	mov	fp, r1
 800d66c:	3501      	adds	r5, #1
 800d66e:	4628      	mov	r0, r5
 800d670:	f7f2 ff60 	bl	8000534 <__aeabi_i2d>
 800d674:	4652      	mov	r2, sl
 800d676:	465b      	mov	r3, fp
 800d678:	f7f2 ffc6 	bl	8000608 <__aeabi_dmul>
 800d67c:	4b82      	ldr	r3, [pc, #520]	; (800d888 <_dtoa_r+0x628>)
 800d67e:	2200      	movs	r2, #0
 800d680:	f7f2 fe0c 	bl	800029c <__adddf3>
 800d684:	46d0      	mov	r8, sl
 800d686:	46d9      	mov	r9, fp
 800d688:	4682      	mov	sl, r0
 800d68a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d68e:	2e00      	cmp	r6, #0
 800d690:	d158      	bne.n	800d744 <_dtoa_r+0x4e4>
 800d692:	4b7e      	ldr	r3, [pc, #504]	; (800d88c <_dtoa_r+0x62c>)
 800d694:	2200      	movs	r2, #0
 800d696:	4640      	mov	r0, r8
 800d698:	4649      	mov	r1, r9
 800d69a:	f7f2 fdfd 	bl	8000298 <__aeabi_dsub>
 800d69e:	4652      	mov	r2, sl
 800d6a0:	465b      	mov	r3, fp
 800d6a2:	4680      	mov	r8, r0
 800d6a4:	4689      	mov	r9, r1
 800d6a6:	f7f3 fa3f 	bl	8000b28 <__aeabi_dcmpgt>
 800d6aa:	2800      	cmp	r0, #0
 800d6ac:	f040 8295 	bne.w	800dbda <_dtoa_r+0x97a>
 800d6b0:	4652      	mov	r2, sl
 800d6b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d6b6:	4640      	mov	r0, r8
 800d6b8:	4649      	mov	r1, r9
 800d6ba:	f7f3 fa17 	bl	8000aec <__aeabi_dcmplt>
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	f040 8289 	bne.w	800dbd6 <_dtoa_r+0x976>
 800d6c4:	ec5b ab19 	vmov	sl, fp, d9
 800d6c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	f2c0 8148 	blt.w	800d960 <_dtoa_r+0x700>
 800d6d0:	9a00      	ldr	r2, [sp, #0]
 800d6d2:	2a0e      	cmp	r2, #14
 800d6d4:	f300 8144 	bgt.w	800d960 <_dtoa_r+0x700>
 800d6d8:	4b67      	ldr	r3, [pc, #412]	; (800d878 <_dtoa_r+0x618>)
 800d6da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d6de:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d6e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	f280 80d5 	bge.w	800d894 <_dtoa_r+0x634>
 800d6ea:	9b03      	ldr	r3, [sp, #12]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	f300 80d1 	bgt.w	800d894 <_dtoa_r+0x634>
 800d6f2:	f040 826f 	bne.w	800dbd4 <_dtoa_r+0x974>
 800d6f6:	4b65      	ldr	r3, [pc, #404]	; (800d88c <_dtoa_r+0x62c>)
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	4640      	mov	r0, r8
 800d6fc:	4649      	mov	r1, r9
 800d6fe:	f7f2 ff83 	bl	8000608 <__aeabi_dmul>
 800d702:	4652      	mov	r2, sl
 800d704:	465b      	mov	r3, fp
 800d706:	f7f3 fa05 	bl	8000b14 <__aeabi_dcmpge>
 800d70a:	9e03      	ldr	r6, [sp, #12]
 800d70c:	4637      	mov	r7, r6
 800d70e:	2800      	cmp	r0, #0
 800d710:	f040 8245 	bne.w	800db9e <_dtoa_r+0x93e>
 800d714:	9d01      	ldr	r5, [sp, #4]
 800d716:	2331      	movs	r3, #49	; 0x31
 800d718:	f805 3b01 	strb.w	r3, [r5], #1
 800d71c:	9b00      	ldr	r3, [sp, #0]
 800d71e:	3301      	adds	r3, #1
 800d720:	9300      	str	r3, [sp, #0]
 800d722:	e240      	b.n	800dba6 <_dtoa_r+0x946>
 800d724:	07f2      	lsls	r2, r6, #31
 800d726:	d505      	bpl.n	800d734 <_dtoa_r+0x4d4>
 800d728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d72c:	f7f2 ff6c 	bl	8000608 <__aeabi_dmul>
 800d730:	3501      	adds	r5, #1
 800d732:	2301      	movs	r3, #1
 800d734:	1076      	asrs	r6, r6, #1
 800d736:	3708      	adds	r7, #8
 800d738:	e777      	b.n	800d62a <_dtoa_r+0x3ca>
 800d73a:	2502      	movs	r5, #2
 800d73c:	e779      	b.n	800d632 <_dtoa_r+0x3d2>
 800d73e:	9f00      	ldr	r7, [sp, #0]
 800d740:	9e03      	ldr	r6, [sp, #12]
 800d742:	e794      	b.n	800d66e <_dtoa_r+0x40e>
 800d744:	9901      	ldr	r1, [sp, #4]
 800d746:	4b4c      	ldr	r3, [pc, #304]	; (800d878 <_dtoa_r+0x618>)
 800d748:	4431      	add	r1, r6
 800d74a:	910d      	str	r1, [sp, #52]	; 0x34
 800d74c:	9908      	ldr	r1, [sp, #32]
 800d74e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d752:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d756:	2900      	cmp	r1, #0
 800d758:	d043      	beq.n	800d7e2 <_dtoa_r+0x582>
 800d75a:	494d      	ldr	r1, [pc, #308]	; (800d890 <_dtoa_r+0x630>)
 800d75c:	2000      	movs	r0, #0
 800d75e:	f7f3 f87d 	bl	800085c <__aeabi_ddiv>
 800d762:	4652      	mov	r2, sl
 800d764:	465b      	mov	r3, fp
 800d766:	f7f2 fd97 	bl	8000298 <__aeabi_dsub>
 800d76a:	9d01      	ldr	r5, [sp, #4]
 800d76c:	4682      	mov	sl, r0
 800d76e:	468b      	mov	fp, r1
 800d770:	4649      	mov	r1, r9
 800d772:	4640      	mov	r0, r8
 800d774:	f7f3 f9f8 	bl	8000b68 <__aeabi_d2iz>
 800d778:	4606      	mov	r6, r0
 800d77a:	f7f2 fedb 	bl	8000534 <__aeabi_i2d>
 800d77e:	4602      	mov	r2, r0
 800d780:	460b      	mov	r3, r1
 800d782:	4640      	mov	r0, r8
 800d784:	4649      	mov	r1, r9
 800d786:	f7f2 fd87 	bl	8000298 <__aeabi_dsub>
 800d78a:	3630      	adds	r6, #48	; 0x30
 800d78c:	f805 6b01 	strb.w	r6, [r5], #1
 800d790:	4652      	mov	r2, sl
 800d792:	465b      	mov	r3, fp
 800d794:	4680      	mov	r8, r0
 800d796:	4689      	mov	r9, r1
 800d798:	f7f3 f9a8 	bl	8000aec <__aeabi_dcmplt>
 800d79c:	2800      	cmp	r0, #0
 800d79e:	d163      	bne.n	800d868 <_dtoa_r+0x608>
 800d7a0:	4642      	mov	r2, r8
 800d7a2:	464b      	mov	r3, r9
 800d7a4:	4936      	ldr	r1, [pc, #216]	; (800d880 <_dtoa_r+0x620>)
 800d7a6:	2000      	movs	r0, #0
 800d7a8:	f7f2 fd76 	bl	8000298 <__aeabi_dsub>
 800d7ac:	4652      	mov	r2, sl
 800d7ae:	465b      	mov	r3, fp
 800d7b0:	f7f3 f99c 	bl	8000aec <__aeabi_dcmplt>
 800d7b4:	2800      	cmp	r0, #0
 800d7b6:	f040 80b5 	bne.w	800d924 <_dtoa_r+0x6c4>
 800d7ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7bc:	429d      	cmp	r5, r3
 800d7be:	d081      	beq.n	800d6c4 <_dtoa_r+0x464>
 800d7c0:	4b30      	ldr	r3, [pc, #192]	; (800d884 <_dtoa_r+0x624>)
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	4650      	mov	r0, sl
 800d7c6:	4659      	mov	r1, fp
 800d7c8:	f7f2 ff1e 	bl	8000608 <__aeabi_dmul>
 800d7cc:	4b2d      	ldr	r3, [pc, #180]	; (800d884 <_dtoa_r+0x624>)
 800d7ce:	4682      	mov	sl, r0
 800d7d0:	468b      	mov	fp, r1
 800d7d2:	4640      	mov	r0, r8
 800d7d4:	4649      	mov	r1, r9
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	f7f2 ff16 	bl	8000608 <__aeabi_dmul>
 800d7dc:	4680      	mov	r8, r0
 800d7de:	4689      	mov	r9, r1
 800d7e0:	e7c6      	b.n	800d770 <_dtoa_r+0x510>
 800d7e2:	4650      	mov	r0, sl
 800d7e4:	4659      	mov	r1, fp
 800d7e6:	f7f2 ff0f 	bl	8000608 <__aeabi_dmul>
 800d7ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7ec:	9d01      	ldr	r5, [sp, #4]
 800d7ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800d7f0:	4682      	mov	sl, r0
 800d7f2:	468b      	mov	fp, r1
 800d7f4:	4649      	mov	r1, r9
 800d7f6:	4640      	mov	r0, r8
 800d7f8:	f7f3 f9b6 	bl	8000b68 <__aeabi_d2iz>
 800d7fc:	4606      	mov	r6, r0
 800d7fe:	f7f2 fe99 	bl	8000534 <__aeabi_i2d>
 800d802:	3630      	adds	r6, #48	; 0x30
 800d804:	4602      	mov	r2, r0
 800d806:	460b      	mov	r3, r1
 800d808:	4640      	mov	r0, r8
 800d80a:	4649      	mov	r1, r9
 800d80c:	f7f2 fd44 	bl	8000298 <__aeabi_dsub>
 800d810:	f805 6b01 	strb.w	r6, [r5], #1
 800d814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d816:	429d      	cmp	r5, r3
 800d818:	4680      	mov	r8, r0
 800d81a:	4689      	mov	r9, r1
 800d81c:	f04f 0200 	mov.w	r2, #0
 800d820:	d124      	bne.n	800d86c <_dtoa_r+0x60c>
 800d822:	4b1b      	ldr	r3, [pc, #108]	; (800d890 <_dtoa_r+0x630>)
 800d824:	4650      	mov	r0, sl
 800d826:	4659      	mov	r1, fp
 800d828:	f7f2 fd38 	bl	800029c <__adddf3>
 800d82c:	4602      	mov	r2, r0
 800d82e:	460b      	mov	r3, r1
 800d830:	4640      	mov	r0, r8
 800d832:	4649      	mov	r1, r9
 800d834:	f7f3 f978 	bl	8000b28 <__aeabi_dcmpgt>
 800d838:	2800      	cmp	r0, #0
 800d83a:	d173      	bne.n	800d924 <_dtoa_r+0x6c4>
 800d83c:	4652      	mov	r2, sl
 800d83e:	465b      	mov	r3, fp
 800d840:	4913      	ldr	r1, [pc, #76]	; (800d890 <_dtoa_r+0x630>)
 800d842:	2000      	movs	r0, #0
 800d844:	f7f2 fd28 	bl	8000298 <__aeabi_dsub>
 800d848:	4602      	mov	r2, r0
 800d84a:	460b      	mov	r3, r1
 800d84c:	4640      	mov	r0, r8
 800d84e:	4649      	mov	r1, r9
 800d850:	f7f3 f94c 	bl	8000aec <__aeabi_dcmplt>
 800d854:	2800      	cmp	r0, #0
 800d856:	f43f af35 	beq.w	800d6c4 <_dtoa_r+0x464>
 800d85a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d85c:	1e6b      	subs	r3, r5, #1
 800d85e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d860:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d864:	2b30      	cmp	r3, #48	; 0x30
 800d866:	d0f8      	beq.n	800d85a <_dtoa_r+0x5fa>
 800d868:	9700      	str	r7, [sp, #0]
 800d86a:	e049      	b.n	800d900 <_dtoa_r+0x6a0>
 800d86c:	4b05      	ldr	r3, [pc, #20]	; (800d884 <_dtoa_r+0x624>)
 800d86e:	f7f2 fecb 	bl	8000608 <__aeabi_dmul>
 800d872:	4680      	mov	r8, r0
 800d874:	4689      	mov	r9, r1
 800d876:	e7bd      	b.n	800d7f4 <_dtoa_r+0x594>
 800d878:	080106c0 	.word	0x080106c0
 800d87c:	08010698 	.word	0x08010698
 800d880:	3ff00000 	.word	0x3ff00000
 800d884:	40240000 	.word	0x40240000
 800d888:	401c0000 	.word	0x401c0000
 800d88c:	40140000 	.word	0x40140000
 800d890:	3fe00000 	.word	0x3fe00000
 800d894:	9d01      	ldr	r5, [sp, #4]
 800d896:	4656      	mov	r6, sl
 800d898:	465f      	mov	r7, fp
 800d89a:	4642      	mov	r2, r8
 800d89c:	464b      	mov	r3, r9
 800d89e:	4630      	mov	r0, r6
 800d8a0:	4639      	mov	r1, r7
 800d8a2:	f7f2 ffdb 	bl	800085c <__aeabi_ddiv>
 800d8a6:	f7f3 f95f 	bl	8000b68 <__aeabi_d2iz>
 800d8aa:	4682      	mov	sl, r0
 800d8ac:	f7f2 fe42 	bl	8000534 <__aeabi_i2d>
 800d8b0:	4642      	mov	r2, r8
 800d8b2:	464b      	mov	r3, r9
 800d8b4:	f7f2 fea8 	bl	8000608 <__aeabi_dmul>
 800d8b8:	4602      	mov	r2, r0
 800d8ba:	460b      	mov	r3, r1
 800d8bc:	4630      	mov	r0, r6
 800d8be:	4639      	mov	r1, r7
 800d8c0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d8c4:	f7f2 fce8 	bl	8000298 <__aeabi_dsub>
 800d8c8:	f805 6b01 	strb.w	r6, [r5], #1
 800d8cc:	9e01      	ldr	r6, [sp, #4]
 800d8ce:	9f03      	ldr	r7, [sp, #12]
 800d8d0:	1bae      	subs	r6, r5, r6
 800d8d2:	42b7      	cmp	r7, r6
 800d8d4:	4602      	mov	r2, r0
 800d8d6:	460b      	mov	r3, r1
 800d8d8:	d135      	bne.n	800d946 <_dtoa_r+0x6e6>
 800d8da:	f7f2 fcdf 	bl	800029c <__adddf3>
 800d8de:	4642      	mov	r2, r8
 800d8e0:	464b      	mov	r3, r9
 800d8e2:	4606      	mov	r6, r0
 800d8e4:	460f      	mov	r7, r1
 800d8e6:	f7f3 f91f 	bl	8000b28 <__aeabi_dcmpgt>
 800d8ea:	b9d0      	cbnz	r0, 800d922 <_dtoa_r+0x6c2>
 800d8ec:	4642      	mov	r2, r8
 800d8ee:	464b      	mov	r3, r9
 800d8f0:	4630      	mov	r0, r6
 800d8f2:	4639      	mov	r1, r7
 800d8f4:	f7f3 f8f0 	bl	8000ad8 <__aeabi_dcmpeq>
 800d8f8:	b110      	cbz	r0, 800d900 <_dtoa_r+0x6a0>
 800d8fa:	f01a 0f01 	tst.w	sl, #1
 800d8fe:	d110      	bne.n	800d922 <_dtoa_r+0x6c2>
 800d900:	4620      	mov	r0, r4
 800d902:	ee18 1a10 	vmov	r1, s16
 800d906:	f000 faf3 	bl	800def0 <_Bfree>
 800d90a:	2300      	movs	r3, #0
 800d90c:	9800      	ldr	r0, [sp, #0]
 800d90e:	702b      	strb	r3, [r5, #0]
 800d910:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d912:	3001      	adds	r0, #1
 800d914:	6018      	str	r0, [r3, #0]
 800d916:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f43f acf1 	beq.w	800d300 <_dtoa_r+0xa0>
 800d91e:	601d      	str	r5, [r3, #0]
 800d920:	e4ee      	b.n	800d300 <_dtoa_r+0xa0>
 800d922:	9f00      	ldr	r7, [sp, #0]
 800d924:	462b      	mov	r3, r5
 800d926:	461d      	mov	r5, r3
 800d928:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d92c:	2a39      	cmp	r2, #57	; 0x39
 800d92e:	d106      	bne.n	800d93e <_dtoa_r+0x6de>
 800d930:	9a01      	ldr	r2, [sp, #4]
 800d932:	429a      	cmp	r2, r3
 800d934:	d1f7      	bne.n	800d926 <_dtoa_r+0x6c6>
 800d936:	9901      	ldr	r1, [sp, #4]
 800d938:	2230      	movs	r2, #48	; 0x30
 800d93a:	3701      	adds	r7, #1
 800d93c:	700a      	strb	r2, [r1, #0]
 800d93e:	781a      	ldrb	r2, [r3, #0]
 800d940:	3201      	adds	r2, #1
 800d942:	701a      	strb	r2, [r3, #0]
 800d944:	e790      	b.n	800d868 <_dtoa_r+0x608>
 800d946:	4ba6      	ldr	r3, [pc, #664]	; (800dbe0 <_dtoa_r+0x980>)
 800d948:	2200      	movs	r2, #0
 800d94a:	f7f2 fe5d 	bl	8000608 <__aeabi_dmul>
 800d94e:	2200      	movs	r2, #0
 800d950:	2300      	movs	r3, #0
 800d952:	4606      	mov	r6, r0
 800d954:	460f      	mov	r7, r1
 800d956:	f7f3 f8bf 	bl	8000ad8 <__aeabi_dcmpeq>
 800d95a:	2800      	cmp	r0, #0
 800d95c:	d09d      	beq.n	800d89a <_dtoa_r+0x63a>
 800d95e:	e7cf      	b.n	800d900 <_dtoa_r+0x6a0>
 800d960:	9a08      	ldr	r2, [sp, #32]
 800d962:	2a00      	cmp	r2, #0
 800d964:	f000 80d7 	beq.w	800db16 <_dtoa_r+0x8b6>
 800d968:	9a06      	ldr	r2, [sp, #24]
 800d96a:	2a01      	cmp	r2, #1
 800d96c:	f300 80ba 	bgt.w	800dae4 <_dtoa_r+0x884>
 800d970:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d972:	2a00      	cmp	r2, #0
 800d974:	f000 80b2 	beq.w	800dadc <_dtoa_r+0x87c>
 800d978:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d97c:	9e07      	ldr	r6, [sp, #28]
 800d97e:	9d04      	ldr	r5, [sp, #16]
 800d980:	9a04      	ldr	r2, [sp, #16]
 800d982:	441a      	add	r2, r3
 800d984:	9204      	str	r2, [sp, #16]
 800d986:	9a05      	ldr	r2, [sp, #20]
 800d988:	2101      	movs	r1, #1
 800d98a:	441a      	add	r2, r3
 800d98c:	4620      	mov	r0, r4
 800d98e:	9205      	str	r2, [sp, #20]
 800d990:	f000 fb66 	bl	800e060 <__i2b>
 800d994:	4607      	mov	r7, r0
 800d996:	2d00      	cmp	r5, #0
 800d998:	dd0c      	ble.n	800d9b4 <_dtoa_r+0x754>
 800d99a:	9b05      	ldr	r3, [sp, #20]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	dd09      	ble.n	800d9b4 <_dtoa_r+0x754>
 800d9a0:	42ab      	cmp	r3, r5
 800d9a2:	9a04      	ldr	r2, [sp, #16]
 800d9a4:	bfa8      	it	ge
 800d9a6:	462b      	movge	r3, r5
 800d9a8:	1ad2      	subs	r2, r2, r3
 800d9aa:	9204      	str	r2, [sp, #16]
 800d9ac:	9a05      	ldr	r2, [sp, #20]
 800d9ae:	1aed      	subs	r5, r5, r3
 800d9b0:	1ad3      	subs	r3, r2, r3
 800d9b2:	9305      	str	r3, [sp, #20]
 800d9b4:	9b07      	ldr	r3, [sp, #28]
 800d9b6:	b31b      	cbz	r3, 800da00 <_dtoa_r+0x7a0>
 800d9b8:	9b08      	ldr	r3, [sp, #32]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f000 80af 	beq.w	800db1e <_dtoa_r+0x8be>
 800d9c0:	2e00      	cmp	r6, #0
 800d9c2:	dd13      	ble.n	800d9ec <_dtoa_r+0x78c>
 800d9c4:	4639      	mov	r1, r7
 800d9c6:	4632      	mov	r2, r6
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	f000 fc09 	bl	800e1e0 <__pow5mult>
 800d9ce:	ee18 2a10 	vmov	r2, s16
 800d9d2:	4601      	mov	r1, r0
 800d9d4:	4607      	mov	r7, r0
 800d9d6:	4620      	mov	r0, r4
 800d9d8:	f000 fb58 	bl	800e08c <__multiply>
 800d9dc:	ee18 1a10 	vmov	r1, s16
 800d9e0:	4680      	mov	r8, r0
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	f000 fa84 	bl	800def0 <_Bfree>
 800d9e8:	ee08 8a10 	vmov	s16, r8
 800d9ec:	9b07      	ldr	r3, [sp, #28]
 800d9ee:	1b9a      	subs	r2, r3, r6
 800d9f0:	d006      	beq.n	800da00 <_dtoa_r+0x7a0>
 800d9f2:	ee18 1a10 	vmov	r1, s16
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	f000 fbf2 	bl	800e1e0 <__pow5mult>
 800d9fc:	ee08 0a10 	vmov	s16, r0
 800da00:	2101      	movs	r1, #1
 800da02:	4620      	mov	r0, r4
 800da04:	f000 fb2c 	bl	800e060 <__i2b>
 800da08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	4606      	mov	r6, r0
 800da0e:	f340 8088 	ble.w	800db22 <_dtoa_r+0x8c2>
 800da12:	461a      	mov	r2, r3
 800da14:	4601      	mov	r1, r0
 800da16:	4620      	mov	r0, r4
 800da18:	f000 fbe2 	bl	800e1e0 <__pow5mult>
 800da1c:	9b06      	ldr	r3, [sp, #24]
 800da1e:	2b01      	cmp	r3, #1
 800da20:	4606      	mov	r6, r0
 800da22:	f340 8081 	ble.w	800db28 <_dtoa_r+0x8c8>
 800da26:	f04f 0800 	mov.w	r8, #0
 800da2a:	6933      	ldr	r3, [r6, #16]
 800da2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800da30:	6918      	ldr	r0, [r3, #16]
 800da32:	f000 fac5 	bl	800dfc0 <__hi0bits>
 800da36:	f1c0 0020 	rsb	r0, r0, #32
 800da3a:	9b05      	ldr	r3, [sp, #20]
 800da3c:	4418      	add	r0, r3
 800da3e:	f010 001f 	ands.w	r0, r0, #31
 800da42:	f000 8092 	beq.w	800db6a <_dtoa_r+0x90a>
 800da46:	f1c0 0320 	rsb	r3, r0, #32
 800da4a:	2b04      	cmp	r3, #4
 800da4c:	f340 808a 	ble.w	800db64 <_dtoa_r+0x904>
 800da50:	f1c0 001c 	rsb	r0, r0, #28
 800da54:	9b04      	ldr	r3, [sp, #16]
 800da56:	4403      	add	r3, r0
 800da58:	9304      	str	r3, [sp, #16]
 800da5a:	9b05      	ldr	r3, [sp, #20]
 800da5c:	4403      	add	r3, r0
 800da5e:	4405      	add	r5, r0
 800da60:	9305      	str	r3, [sp, #20]
 800da62:	9b04      	ldr	r3, [sp, #16]
 800da64:	2b00      	cmp	r3, #0
 800da66:	dd07      	ble.n	800da78 <_dtoa_r+0x818>
 800da68:	ee18 1a10 	vmov	r1, s16
 800da6c:	461a      	mov	r2, r3
 800da6e:	4620      	mov	r0, r4
 800da70:	f000 fc10 	bl	800e294 <__lshift>
 800da74:	ee08 0a10 	vmov	s16, r0
 800da78:	9b05      	ldr	r3, [sp, #20]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	dd05      	ble.n	800da8a <_dtoa_r+0x82a>
 800da7e:	4631      	mov	r1, r6
 800da80:	461a      	mov	r2, r3
 800da82:	4620      	mov	r0, r4
 800da84:	f000 fc06 	bl	800e294 <__lshift>
 800da88:	4606      	mov	r6, r0
 800da8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d06e      	beq.n	800db6e <_dtoa_r+0x90e>
 800da90:	ee18 0a10 	vmov	r0, s16
 800da94:	4631      	mov	r1, r6
 800da96:	f000 fc6d 	bl	800e374 <__mcmp>
 800da9a:	2800      	cmp	r0, #0
 800da9c:	da67      	bge.n	800db6e <_dtoa_r+0x90e>
 800da9e:	9b00      	ldr	r3, [sp, #0]
 800daa0:	3b01      	subs	r3, #1
 800daa2:	ee18 1a10 	vmov	r1, s16
 800daa6:	9300      	str	r3, [sp, #0]
 800daa8:	220a      	movs	r2, #10
 800daaa:	2300      	movs	r3, #0
 800daac:	4620      	mov	r0, r4
 800daae:	f000 fa41 	bl	800df34 <__multadd>
 800dab2:	9b08      	ldr	r3, [sp, #32]
 800dab4:	ee08 0a10 	vmov	s16, r0
 800dab8:	2b00      	cmp	r3, #0
 800daba:	f000 81b1 	beq.w	800de20 <_dtoa_r+0xbc0>
 800dabe:	2300      	movs	r3, #0
 800dac0:	4639      	mov	r1, r7
 800dac2:	220a      	movs	r2, #10
 800dac4:	4620      	mov	r0, r4
 800dac6:	f000 fa35 	bl	800df34 <__multadd>
 800daca:	9b02      	ldr	r3, [sp, #8]
 800dacc:	2b00      	cmp	r3, #0
 800dace:	4607      	mov	r7, r0
 800dad0:	f300 808e 	bgt.w	800dbf0 <_dtoa_r+0x990>
 800dad4:	9b06      	ldr	r3, [sp, #24]
 800dad6:	2b02      	cmp	r3, #2
 800dad8:	dc51      	bgt.n	800db7e <_dtoa_r+0x91e>
 800dada:	e089      	b.n	800dbf0 <_dtoa_r+0x990>
 800dadc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dade:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dae2:	e74b      	b.n	800d97c <_dtoa_r+0x71c>
 800dae4:	9b03      	ldr	r3, [sp, #12]
 800dae6:	1e5e      	subs	r6, r3, #1
 800dae8:	9b07      	ldr	r3, [sp, #28]
 800daea:	42b3      	cmp	r3, r6
 800daec:	bfbf      	itttt	lt
 800daee:	9b07      	ldrlt	r3, [sp, #28]
 800daf0:	9607      	strlt	r6, [sp, #28]
 800daf2:	1af2      	sublt	r2, r6, r3
 800daf4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800daf6:	bfb6      	itet	lt
 800daf8:	189b      	addlt	r3, r3, r2
 800dafa:	1b9e      	subge	r6, r3, r6
 800dafc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dafe:	9b03      	ldr	r3, [sp, #12]
 800db00:	bfb8      	it	lt
 800db02:	2600      	movlt	r6, #0
 800db04:	2b00      	cmp	r3, #0
 800db06:	bfb7      	itett	lt
 800db08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800db0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800db10:	1a9d      	sublt	r5, r3, r2
 800db12:	2300      	movlt	r3, #0
 800db14:	e734      	b.n	800d980 <_dtoa_r+0x720>
 800db16:	9e07      	ldr	r6, [sp, #28]
 800db18:	9d04      	ldr	r5, [sp, #16]
 800db1a:	9f08      	ldr	r7, [sp, #32]
 800db1c:	e73b      	b.n	800d996 <_dtoa_r+0x736>
 800db1e:	9a07      	ldr	r2, [sp, #28]
 800db20:	e767      	b.n	800d9f2 <_dtoa_r+0x792>
 800db22:	9b06      	ldr	r3, [sp, #24]
 800db24:	2b01      	cmp	r3, #1
 800db26:	dc18      	bgt.n	800db5a <_dtoa_r+0x8fa>
 800db28:	f1ba 0f00 	cmp.w	sl, #0
 800db2c:	d115      	bne.n	800db5a <_dtoa_r+0x8fa>
 800db2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db32:	b993      	cbnz	r3, 800db5a <_dtoa_r+0x8fa>
 800db34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db38:	0d1b      	lsrs	r3, r3, #20
 800db3a:	051b      	lsls	r3, r3, #20
 800db3c:	b183      	cbz	r3, 800db60 <_dtoa_r+0x900>
 800db3e:	9b04      	ldr	r3, [sp, #16]
 800db40:	3301      	adds	r3, #1
 800db42:	9304      	str	r3, [sp, #16]
 800db44:	9b05      	ldr	r3, [sp, #20]
 800db46:	3301      	adds	r3, #1
 800db48:	9305      	str	r3, [sp, #20]
 800db4a:	f04f 0801 	mov.w	r8, #1
 800db4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db50:	2b00      	cmp	r3, #0
 800db52:	f47f af6a 	bne.w	800da2a <_dtoa_r+0x7ca>
 800db56:	2001      	movs	r0, #1
 800db58:	e76f      	b.n	800da3a <_dtoa_r+0x7da>
 800db5a:	f04f 0800 	mov.w	r8, #0
 800db5e:	e7f6      	b.n	800db4e <_dtoa_r+0x8ee>
 800db60:	4698      	mov	r8, r3
 800db62:	e7f4      	b.n	800db4e <_dtoa_r+0x8ee>
 800db64:	f43f af7d 	beq.w	800da62 <_dtoa_r+0x802>
 800db68:	4618      	mov	r0, r3
 800db6a:	301c      	adds	r0, #28
 800db6c:	e772      	b.n	800da54 <_dtoa_r+0x7f4>
 800db6e:	9b03      	ldr	r3, [sp, #12]
 800db70:	2b00      	cmp	r3, #0
 800db72:	dc37      	bgt.n	800dbe4 <_dtoa_r+0x984>
 800db74:	9b06      	ldr	r3, [sp, #24]
 800db76:	2b02      	cmp	r3, #2
 800db78:	dd34      	ble.n	800dbe4 <_dtoa_r+0x984>
 800db7a:	9b03      	ldr	r3, [sp, #12]
 800db7c:	9302      	str	r3, [sp, #8]
 800db7e:	9b02      	ldr	r3, [sp, #8]
 800db80:	b96b      	cbnz	r3, 800db9e <_dtoa_r+0x93e>
 800db82:	4631      	mov	r1, r6
 800db84:	2205      	movs	r2, #5
 800db86:	4620      	mov	r0, r4
 800db88:	f000 f9d4 	bl	800df34 <__multadd>
 800db8c:	4601      	mov	r1, r0
 800db8e:	4606      	mov	r6, r0
 800db90:	ee18 0a10 	vmov	r0, s16
 800db94:	f000 fbee 	bl	800e374 <__mcmp>
 800db98:	2800      	cmp	r0, #0
 800db9a:	f73f adbb 	bgt.w	800d714 <_dtoa_r+0x4b4>
 800db9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dba0:	9d01      	ldr	r5, [sp, #4]
 800dba2:	43db      	mvns	r3, r3
 800dba4:	9300      	str	r3, [sp, #0]
 800dba6:	f04f 0800 	mov.w	r8, #0
 800dbaa:	4631      	mov	r1, r6
 800dbac:	4620      	mov	r0, r4
 800dbae:	f000 f99f 	bl	800def0 <_Bfree>
 800dbb2:	2f00      	cmp	r7, #0
 800dbb4:	f43f aea4 	beq.w	800d900 <_dtoa_r+0x6a0>
 800dbb8:	f1b8 0f00 	cmp.w	r8, #0
 800dbbc:	d005      	beq.n	800dbca <_dtoa_r+0x96a>
 800dbbe:	45b8      	cmp	r8, r7
 800dbc0:	d003      	beq.n	800dbca <_dtoa_r+0x96a>
 800dbc2:	4641      	mov	r1, r8
 800dbc4:	4620      	mov	r0, r4
 800dbc6:	f000 f993 	bl	800def0 <_Bfree>
 800dbca:	4639      	mov	r1, r7
 800dbcc:	4620      	mov	r0, r4
 800dbce:	f000 f98f 	bl	800def0 <_Bfree>
 800dbd2:	e695      	b.n	800d900 <_dtoa_r+0x6a0>
 800dbd4:	2600      	movs	r6, #0
 800dbd6:	4637      	mov	r7, r6
 800dbd8:	e7e1      	b.n	800db9e <_dtoa_r+0x93e>
 800dbda:	9700      	str	r7, [sp, #0]
 800dbdc:	4637      	mov	r7, r6
 800dbde:	e599      	b.n	800d714 <_dtoa_r+0x4b4>
 800dbe0:	40240000 	.word	0x40240000
 800dbe4:	9b08      	ldr	r3, [sp, #32]
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	f000 80ca 	beq.w	800dd80 <_dtoa_r+0xb20>
 800dbec:	9b03      	ldr	r3, [sp, #12]
 800dbee:	9302      	str	r3, [sp, #8]
 800dbf0:	2d00      	cmp	r5, #0
 800dbf2:	dd05      	ble.n	800dc00 <_dtoa_r+0x9a0>
 800dbf4:	4639      	mov	r1, r7
 800dbf6:	462a      	mov	r2, r5
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	f000 fb4b 	bl	800e294 <__lshift>
 800dbfe:	4607      	mov	r7, r0
 800dc00:	f1b8 0f00 	cmp.w	r8, #0
 800dc04:	d05b      	beq.n	800dcbe <_dtoa_r+0xa5e>
 800dc06:	6879      	ldr	r1, [r7, #4]
 800dc08:	4620      	mov	r0, r4
 800dc0a:	f000 f931 	bl	800de70 <_Balloc>
 800dc0e:	4605      	mov	r5, r0
 800dc10:	b928      	cbnz	r0, 800dc1e <_dtoa_r+0x9be>
 800dc12:	4b87      	ldr	r3, [pc, #540]	; (800de30 <_dtoa_r+0xbd0>)
 800dc14:	4602      	mov	r2, r0
 800dc16:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dc1a:	f7ff bb3b 	b.w	800d294 <_dtoa_r+0x34>
 800dc1e:	693a      	ldr	r2, [r7, #16]
 800dc20:	3202      	adds	r2, #2
 800dc22:	0092      	lsls	r2, r2, #2
 800dc24:	f107 010c 	add.w	r1, r7, #12
 800dc28:	300c      	adds	r0, #12
 800dc2a:	f000 f913 	bl	800de54 <memcpy>
 800dc2e:	2201      	movs	r2, #1
 800dc30:	4629      	mov	r1, r5
 800dc32:	4620      	mov	r0, r4
 800dc34:	f000 fb2e 	bl	800e294 <__lshift>
 800dc38:	9b01      	ldr	r3, [sp, #4]
 800dc3a:	f103 0901 	add.w	r9, r3, #1
 800dc3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dc42:	4413      	add	r3, r2
 800dc44:	9305      	str	r3, [sp, #20]
 800dc46:	f00a 0301 	and.w	r3, sl, #1
 800dc4a:	46b8      	mov	r8, r7
 800dc4c:	9304      	str	r3, [sp, #16]
 800dc4e:	4607      	mov	r7, r0
 800dc50:	4631      	mov	r1, r6
 800dc52:	ee18 0a10 	vmov	r0, s16
 800dc56:	f7ff fa77 	bl	800d148 <quorem>
 800dc5a:	4641      	mov	r1, r8
 800dc5c:	9002      	str	r0, [sp, #8]
 800dc5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dc62:	ee18 0a10 	vmov	r0, s16
 800dc66:	f000 fb85 	bl	800e374 <__mcmp>
 800dc6a:	463a      	mov	r2, r7
 800dc6c:	9003      	str	r0, [sp, #12]
 800dc6e:	4631      	mov	r1, r6
 800dc70:	4620      	mov	r0, r4
 800dc72:	f000 fb9b 	bl	800e3ac <__mdiff>
 800dc76:	68c2      	ldr	r2, [r0, #12]
 800dc78:	f109 3bff 	add.w	fp, r9, #4294967295
 800dc7c:	4605      	mov	r5, r0
 800dc7e:	bb02      	cbnz	r2, 800dcc2 <_dtoa_r+0xa62>
 800dc80:	4601      	mov	r1, r0
 800dc82:	ee18 0a10 	vmov	r0, s16
 800dc86:	f000 fb75 	bl	800e374 <__mcmp>
 800dc8a:	4602      	mov	r2, r0
 800dc8c:	4629      	mov	r1, r5
 800dc8e:	4620      	mov	r0, r4
 800dc90:	9207      	str	r2, [sp, #28]
 800dc92:	f000 f92d 	bl	800def0 <_Bfree>
 800dc96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800dc9a:	ea43 0102 	orr.w	r1, r3, r2
 800dc9e:	9b04      	ldr	r3, [sp, #16]
 800dca0:	430b      	orrs	r3, r1
 800dca2:	464d      	mov	r5, r9
 800dca4:	d10f      	bne.n	800dcc6 <_dtoa_r+0xa66>
 800dca6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dcaa:	d02a      	beq.n	800dd02 <_dtoa_r+0xaa2>
 800dcac:	9b03      	ldr	r3, [sp, #12]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	dd02      	ble.n	800dcb8 <_dtoa_r+0xa58>
 800dcb2:	9b02      	ldr	r3, [sp, #8]
 800dcb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800dcb8:	f88b a000 	strb.w	sl, [fp]
 800dcbc:	e775      	b.n	800dbaa <_dtoa_r+0x94a>
 800dcbe:	4638      	mov	r0, r7
 800dcc0:	e7ba      	b.n	800dc38 <_dtoa_r+0x9d8>
 800dcc2:	2201      	movs	r2, #1
 800dcc4:	e7e2      	b.n	800dc8c <_dtoa_r+0xa2c>
 800dcc6:	9b03      	ldr	r3, [sp, #12]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	db04      	blt.n	800dcd6 <_dtoa_r+0xa76>
 800dccc:	9906      	ldr	r1, [sp, #24]
 800dcce:	430b      	orrs	r3, r1
 800dcd0:	9904      	ldr	r1, [sp, #16]
 800dcd2:	430b      	orrs	r3, r1
 800dcd4:	d122      	bne.n	800dd1c <_dtoa_r+0xabc>
 800dcd6:	2a00      	cmp	r2, #0
 800dcd8:	ddee      	ble.n	800dcb8 <_dtoa_r+0xa58>
 800dcda:	ee18 1a10 	vmov	r1, s16
 800dcde:	2201      	movs	r2, #1
 800dce0:	4620      	mov	r0, r4
 800dce2:	f000 fad7 	bl	800e294 <__lshift>
 800dce6:	4631      	mov	r1, r6
 800dce8:	ee08 0a10 	vmov	s16, r0
 800dcec:	f000 fb42 	bl	800e374 <__mcmp>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	dc03      	bgt.n	800dcfc <_dtoa_r+0xa9c>
 800dcf4:	d1e0      	bne.n	800dcb8 <_dtoa_r+0xa58>
 800dcf6:	f01a 0f01 	tst.w	sl, #1
 800dcfa:	d0dd      	beq.n	800dcb8 <_dtoa_r+0xa58>
 800dcfc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dd00:	d1d7      	bne.n	800dcb2 <_dtoa_r+0xa52>
 800dd02:	2339      	movs	r3, #57	; 0x39
 800dd04:	f88b 3000 	strb.w	r3, [fp]
 800dd08:	462b      	mov	r3, r5
 800dd0a:	461d      	mov	r5, r3
 800dd0c:	3b01      	subs	r3, #1
 800dd0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800dd12:	2a39      	cmp	r2, #57	; 0x39
 800dd14:	d071      	beq.n	800ddfa <_dtoa_r+0xb9a>
 800dd16:	3201      	adds	r2, #1
 800dd18:	701a      	strb	r2, [r3, #0]
 800dd1a:	e746      	b.n	800dbaa <_dtoa_r+0x94a>
 800dd1c:	2a00      	cmp	r2, #0
 800dd1e:	dd07      	ble.n	800dd30 <_dtoa_r+0xad0>
 800dd20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800dd24:	d0ed      	beq.n	800dd02 <_dtoa_r+0xaa2>
 800dd26:	f10a 0301 	add.w	r3, sl, #1
 800dd2a:	f88b 3000 	strb.w	r3, [fp]
 800dd2e:	e73c      	b.n	800dbaa <_dtoa_r+0x94a>
 800dd30:	9b05      	ldr	r3, [sp, #20]
 800dd32:	f809 ac01 	strb.w	sl, [r9, #-1]
 800dd36:	4599      	cmp	r9, r3
 800dd38:	d047      	beq.n	800ddca <_dtoa_r+0xb6a>
 800dd3a:	ee18 1a10 	vmov	r1, s16
 800dd3e:	2300      	movs	r3, #0
 800dd40:	220a      	movs	r2, #10
 800dd42:	4620      	mov	r0, r4
 800dd44:	f000 f8f6 	bl	800df34 <__multadd>
 800dd48:	45b8      	cmp	r8, r7
 800dd4a:	ee08 0a10 	vmov	s16, r0
 800dd4e:	f04f 0300 	mov.w	r3, #0
 800dd52:	f04f 020a 	mov.w	r2, #10
 800dd56:	4641      	mov	r1, r8
 800dd58:	4620      	mov	r0, r4
 800dd5a:	d106      	bne.n	800dd6a <_dtoa_r+0xb0a>
 800dd5c:	f000 f8ea 	bl	800df34 <__multadd>
 800dd60:	4680      	mov	r8, r0
 800dd62:	4607      	mov	r7, r0
 800dd64:	f109 0901 	add.w	r9, r9, #1
 800dd68:	e772      	b.n	800dc50 <_dtoa_r+0x9f0>
 800dd6a:	f000 f8e3 	bl	800df34 <__multadd>
 800dd6e:	4639      	mov	r1, r7
 800dd70:	4680      	mov	r8, r0
 800dd72:	2300      	movs	r3, #0
 800dd74:	220a      	movs	r2, #10
 800dd76:	4620      	mov	r0, r4
 800dd78:	f000 f8dc 	bl	800df34 <__multadd>
 800dd7c:	4607      	mov	r7, r0
 800dd7e:	e7f1      	b.n	800dd64 <_dtoa_r+0xb04>
 800dd80:	9b03      	ldr	r3, [sp, #12]
 800dd82:	9302      	str	r3, [sp, #8]
 800dd84:	9d01      	ldr	r5, [sp, #4]
 800dd86:	ee18 0a10 	vmov	r0, s16
 800dd8a:	4631      	mov	r1, r6
 800dd8c:	f7ff f9dc 	bl	800d148 <quorem>
 800dd90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dd94:	9b01      	ldr	r3, [sp, #4]
 800dd96:	f805 ab01 	strb.w	sl, [r5], #1
 800dd9a:	1aea      	subs	r2, r5, r3
 800dd9c:	9b02      	ldr	r3, [sp, #8]
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	dd09      	ble.n	800ddb6 <_dtoa_r+0xb56>
 800dda2:	ee18 1a10 	vmov	r1, s16
 800dda6:	2300      	movs	r3, #0
 800dda8:	220a      	movs	r2, #10
 800ddaa:	4620      	mov	r0, r4
 800ddac:	f000 f8c2 	bl	800df34 <__multadd>
 800ddb0:	ee08 0a10 	vmov	s16, r0
 800ddb4:	e7e7      	b.n	800dd86 <_dtoa_r+0xb26>
 800ddb6:	9b02      	ldr	r3, [sp, #8]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	bfc8      	it	gt
 800ddbc:	461d      	movgt	r5, r3
 800ddbe:	9b01      	ldr	r3, [sp, #4]
 800ddc0:	bfd8      	it	le
 800ddc2:	2501      	movle	r5, #1
 800ddc4:	441d      	add	r5, r3
 800ddc6:	f04f 0800 	mov.w	r8, #0
 800ddca:	ee18 1a10 	vmov	r1, s16
 800ddce:	2201      	movs	r2, #1
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	f000 fa5f 	bl	800e294 <__lshift>
 800ddd6:	4631      	mov	r1, r6
 800ddd8:	ee08 0a10 	vmov	s16, r0
 800dddc:	f000 faca 	bl	800e374 <__mcmp>
 800dde0:	2800      	cmp	r0, #0
 800dde2:	dc91      	bgt.n	800dd08 <_dtoa_r+0xaa8>
 800dde4:	d102      	bne.n	800ddec <_dtoa_r+0xb8c>
 800dde6:	f01a 0f01 	tst.w	sl, #1
 800ddea:	d18d      	bne.n	800dd08 <_dtoa_r+0xaa8>
 800ddec:	462b      	mov	r3, r5
 800ddee:	461d      	mov	r5, r3
 800ddf0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddf4:	2a30      	cmp	r2, #48	; 0x30
 800ddf6:	d0fa      	beq.n	800ddee <_dtoa_r+0xb8e>
 800ddf8:	e6d7      	b.n	800dbaa <_dtoa_r+0x94a>
 800ddfa:	9a01      	ldr	r2, [sp, #4]
 800ddfc:	429a      	cmp	r2, r3
 800ddfe:	d184      	bne.n	800dd0a <_dtoa_r+0xaaa>
 800de00:	9b00      	ldr	r3, [sp, #0]
 800de02:	3301      	adds	r3, #1
 800de04:	9300      	str	r3, [sp, #0]
 800de06:	2331      	movs	r3, #49	; 0x31
 800de08:	7013      	strb	r3, [r2, #0]
 800de0a:	e6ce      	b.n	800dbaa <_dtoa_r+0x94a>
 800de0c:	4b09      	ldr	r3, [pc, #36]	; (800de34 <_dtoa_r+0xbd4>)
 800de0e:	f7ff ba95 	b.w	800d33c <_dtoa_r+0xdc>
 800de12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de14:	2b00      	cmp	r3, #0
 800de16:	f47f aa6e 	bne.w	800d2f6 <_dtoa_r+0x96>
 800de1a:	4b07      	ldr	r3, [pc, #28]	; (800de38 <_dtoa_r+0xbd8>)
 800de1c:	f7ff ba8e 	b.w	800d33c <_dtoa_r+0xdc>
 800de20:	9b02      	ldr	r3, [sp, #8]
 800de22:	2b00      	cmp	r3, #0
 800de24:	dcae      	bgt.n	800dd84 <_dtoa_r+0xb24>
 800de26:	9b06      	ldr	r3, [sp, #24]
 800de28:	2b02      	cmp	r3, #2
 800de2a:	f73f aea8 	bgt.w	800db7e <_dtoa_r+0x91e>
 800de2e:	e7a9      	b.n	800dd84 <_dtoa_r+0xb24>
 800de30:	08010627 	.word	0x08010627
 800de34:	08010584 	.word	0x08010584
 800de38:	080105a8 	.word	0x080105a8

0800de3c <_localeconv_r>:
 800de3c:	4800      	ldr	r0, [pc, #0]	; (800de40 <_localeconv_r+0x4>)
 800de3e:	4770      	bx	lr
 800de40:	200003f4 	.word	0x200003f4

0800de44 <malloc>:
 800de44:	4b02      	ldr	r3, [pc, #8]	; (800de50 <malloc+0xc>)
 800de46:	4601      	mov	r1, r0
 800de48:	6818      	ldr	r0, [r3, #0]
 800de4a:	f000 bc17 	b.w	800e67c <_malloc_r>
 800de4e:	bf00      	nop
 800de50:	200002a0 	.word	0x200002a0

0800de54 <memcpy>:
 800de54:	440a      	add	r2, r1
 800de56:	4291      	cmp	r1, r2
 800de58:	f100 33ff 	add.w	r3, r0, #4294967295
 800de5c:	d100      	bne.n	800de60 <memcpy+0xc>
 800de5e:	4770      	bx	lr
 800de60:	b510      	push	{r4, lr}
 800de62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de6a:	4291      	cmp	r1, r2
 800de6c:	d1f9      	bne.n	800de62 <memcpy+0xe>
 800de6e:	bd10      	pop	{r4, pc}

0800de70 <_Balloc>:
 800de70:	b570      	push	{r4, r5, r6, lr}
 800de72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800de74:	4604      	mov	r4, r0
 800de76:	460d      	mov	r5, r1
 800de78:	b976      	cbnz	r6, 800de98 <_Balloc+0x28>
 800de7a:	2010      	movs	r0, #16
 800de7c:	f7ff ffe2 	bl	800de44 <malloc>
 800de80:	4602      	mov	r2, r0
 800de82:	6260      	str	r0, [r4, #36]	; 0x24
 800de84:	b920      	cbnz	r0, 800de90 <_Balloc+0x20>
 800de86:	4b18      	ldr	r3, [pc, #96]	; (800dee8 <_Balloc+0x78>)
 800de88:	4818      	ldr	r0, [pc, #96]	; (800deec <_Balloc+0x7c>)
 800de8a:	2166      	movs	r1, #102	; 0x66
 800de8c:	f000 fdd6 	bl	800ea3c <__assert_func>
 800de90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800de94:	6006      	str	r6, [r0, #0]
 800de96:	60c6      	str	r6, [r0, #12]
 800de98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800de9a:	68f3      	ldr	r3, [r6, #12]
 800de9c:	b183      	cbz	r3, 800dec0 <_Balloc+0x50>
 800de9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dea0:	68db      	ldr	r3, [r3, #12]
 800dea2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dea6:	b9b8      	cbnz	r0, 800ded8 <_Balloc+0x68>
 800dea8:	2101      	movs	r1, #1
 800deaa:	fa01 f605 	lsl.w	r6, r1, r5
 800deae:	1d72      	adds	r2, r6, #5
 800deb0:	0092      	lsls	r2, r2, #2
 800deb2:	4620      	mov	r0, r4
 800deb4:	f000 fb60 	bl	800e578 <_calloc_r>
 800deb8:	b160      	cbz	r0, 800ded4 <_Balloc+0x64>
 800deba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800debe:	e00e      	b.n	800dede <_Balloc+0x6e>
 800dec0:	2221      	movs	r2, #33	; 0x21
 800dec2:	2104      	movs	r1, #4
 800dec4:	4620      	mov	r0, r4
 800dec6:	f000 fb57 	bl	800e578 <_calloc_r>
 800deca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800decc:	60f0      	str	r0, [r6, #12]
 800dece:	68db      	ldr	r3, [r3, #12]
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d1e4      	bne.n	800de9e <_Balloc+0x2e>
 800ded4:	2000      	movs	r0, #0
 800ded6:	bd70      	pop	{r4, r5, r6, pc}
 800ded8:	6802      	ldr	r2, [r0, #0]
 800deda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dede:	2300      	movs	r3, #0
 800dee0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dee4:	e7f7      	b.n	800ded6 <_Balloc+0x66>
 800dee6:	bf00      	nop
 800dee8:	080105b5 	.word	0x080105b5
 800deec:	08010638 	.word	0x08010638

0800def0 <_Bfree>:
 800def0:	b570      	push	{r4, r5, r6, lr}
 800def2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800def4:	4605      	mov	r5, r0
 800def6:	460c      	mov	r4, r1
 800def8:	b976      	cbnz	r6, 800df18 <_Bfree+0x28>
 800defa:	2010      	movs	r0, #16
 800defc:	f7ff ffa2 	bl	800de44 <malloc>
 800df00:	4602      	mov	r2, r0
 800df02:	6268      	str	r0, [r5, #36]	; 0x24
 800df04:	b920      	cbnz	r0, 800df10 <_Bfree+0x20>
 800df06:	4b09      	ldr	r3, [pc, #36]	; (800df2c <_Bfree+0x3c>)
 800df08:	4809      	ldr	r0, [pc, #36]	; (800df30 <_Bfree+0x40>)
 800df0a:	218a      	movs	r1, #138	; 0x8a
 800df0c:	f000 fd96 	bl	800ea3c <__assert_func>
 800df10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800df14:	6006      	str	r6, [r0, #0]
 800df16:	60c6      	str	r6, [r0, #12]
 800df18:	b13c      	cbz	r4, 800df2a <_Bfree+0x3a>
 800df1a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800df1c:	6862      	ldr	r2, [r4, #4]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800df24:	6021      	str	r1, [r4, #0]
 800df26:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800df2a:	bd70      	pop	{r4, r5, r6, pc}
 800df2c:	080105b5 	.word	0x080105b5
 800df30:	08010638 	.word	0x08010638

0800df34 <__multadd>:
 800df34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df38:	690d      	ldr	r5, [r1, #16]
 800df3a:	4607      	mov	r7, r0
 800df3c:	460c      	mov	r4, r1
 800df3e:	461e      	mov	r6, r3
 800df40:	f101 0c14 	add.w	ip, r1, #20
 800df44:	2000      	movs	r0, #0
 800df46:	f8dc 3000 	ldr.w	r3, [ip]
 800df4a:	b299      	uxth	r1, r3
 800df4c:	fb02 6101 	mla	r1, r2, r1, r6
 800df50:	0c1e      	lsrs	r6, r3, #16
 800df52:	0c0b      	lsrs	r3, r1, #16
 800df54:	fb02 3306 	mla	r3, r2, r6, r3
 800df58:	b289      	uxth	r1, r1
 800df5a:	3001      	adds	r0, #1
 800df5c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800df60:	4285      	cmp	r5, r0
 800df62:	f84c 1b04 	str.w	r1, [ip], #4
 800df66:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800df6a:	dcec      	bgt.n	800df46 <__multadd+0x12>
 800df6c:	b30e      	cbz	r6, 800dfb2 <__multadd+0x7e>
 800df6e:	68a3      	ldr	r3, [r4, #8]
 800df70:	42ab      	cmp	r3, r5
 800df72:	dc19      	bgt.n	800dfa8 <__multadd+0x74>
 800df74:	6861      	ldr	r1, [r4, #4]
 800df76:	4638      	mov	r0, r7
 800df78:	3101      	adds	r1, #1
 800df7a:	f7ff ff79 	bl	800de70 <_Balloc>
 800df7e:	4680      	mov	r8, r0
 800df80:	b928      	cbnz	r0, 800df8e <__multadd+0x5a>
 800df82:	4602      	mov	r2, r0
 800df84:	4b0c      	ldr	r3, [pc, #48]	; (800dfb8 <__multadd+0x84>)
 800df86:	480d      	ldr	r0, [pc, #52]	; (800dfbc <__multadd+0x88>)
 800df88:	21b5      	movs	r1, #181	; 0xb5
 800df8a:	f000 fd57 	bl	800ea3c <__assert_func>
 800df8e:	6922      	ldr	r2, [r4, #16]
 800df90:	3202      	adds	r2, #2
 800df92:	f104 010c 	add.w	r1, r4, #12
 800df96:	0092      	lsls	r2, r2, #2
 800df98:	300c      	adds	r0, #12
 800df9a:	f7ff ff5b 	bl	800de54 <memcpy>
 800df9e:	4621      	mov	r1, r4
 800dfa0:	4638      	mov	r0, r7
 800dfa2:	f7ff ffa5 	bl	800def0 <_Bfree>
 800dfa6:	4644      	mov	r4, r8
 800dfa8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dfac:	3501      	adds	r5, #1
 800dfae:	615e      	str	r6, [r3, #20]
 800dfb0:	6125      	str	r5, [r4, #16]
 800dfb2:	4620      	mov	r0, r4
 800dfb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfb8:	08010627 	.word	0x08010627
 800dfbc:	08010638 	.word	0x08010638

0800dfc0 <__hi0bits>:
 800dfc0:	0c03      	lsrs	r3, r0, #16
 800dfc2:	041b      	lsls	r3, r3, #16
 800dfc4:	b9d3      	cbnz	r3, 800dffc <__hi0bits+0x3c>
 800dfc6:	0400      	lsls	r0, r0, #16
 800dfc8:	2310      	movs	r3, #16
 800dfca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dfce:	bf04      	itt	eq
 800dfd0:	0200      	lsleq	r0, r0, #8
 800dfd2:	3308      	addeq	r3, #8
 800dfd4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dfd8:	bf04      	itt	eq
 800dfda:	0100      	lsleq	r0, r0, #4
 800dfdc:	3304      	addeq	r3, #4
 800dfde:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dfe2:	bf04      	itt	eq
 800dfe4:	0080      	lsleq	r0, r0, #2
 800dfe6:	3302      	addeq	r3, #2
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	db05      	blt.n	800dff8 <__hi0bits+0x38>
 800dfec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dff0:	f103 0301 	add.w	r3, r3, #1
 800dff4:	bf08      	it	eq
 800dff6:	2320      	moveq	r3, #32
 800dff8:	4618      	mov	r0, r3
 800dffa:	4770      	bx	lr
 800dffc:	2300      	movs	r3, #0
 800dffe:	e7e4      	b.n	800dfca <__hi0bits+0xa>

0800e000 <__lo0bits>:
 800e000:	6803      	ldr	r3, [r0, #0]
 800e002:	f013 0207 	ands.w	r2, r3, #7
 800e006:	4601      	mov	r1, r0
 800e008:	d00b      	beq.n	800e022 <__lo0bits+0x22>
 800e00a:	07da      	lsls	r2, r3, #31
 800e00c:	d423      	bmi.n	800e056 <__lo0bits+0x56>
 800e00e:	0798      	lsls	r0, r3, #30
 800e010:	bf49      	itett	mi
 800e012:	085b      	lsrmi	r3, r3, #1
 800e014:	089b      	lsrpl	r3, r3, #2
 800e016:	2001      	movmi	r0, #1
 800e018:	600b      	strmi	r3, [r1, #0]
 800e01a:	bf5c      	itt	pl
 800e01c:	600b      	strpl	r3, [r1, #0]
 800e01e:	2002      	movpl	r0, #2
 800e020:	4770      	bx	lr
 800e022:	b298      	uxth	r0, r3
 800e024:	b9a8      	cbnz	r0, 800e052 <__lo0bits+0x52>
 800e026:	0c1b      	lsrs	r3, r3, #16
 800e028:	2010      	movs	r0, #16
 800e02a:	b2da      	uxtb	r2, r3
 800e02c:	b90a      	cbnz	r2, 800e032 <__lo0bits+0x32>
 800e02e:	3008      	adds	r0, #8
 800e030:	0a1b      	lsrs	r3, r3, #8
 800e032:	071a      	lsls	r2, r3, #28
 800e034:	bf04      	itt	eq
 800e036:	091b      	lsreq	r3, r3, #4
 800e038:	3004      	addeq	r0, #4
 800e03a:	079a      	lsls	r2, r3, #30
 800e03c:	bf04      	itt	eq
 800e03e:	089b      	lsreq	r3, r3, #2
 800e040:	3002      	addeq	r0, #2
 800e042:	07da      	lsls	r2, r3, #31
 800e044:	d403      	bmi.n	800e04e <__lo0bits+0x4e>
 800e046:	085b      	lsrs	r3, r3, #1
 800e048:	f100 0001 	add.w	r0, r0, #1
 800e04c:	d005      	beq.n	800e05a <__lo0bits+0x5a>
 800e04e:	600b      	str	r3, [r1, #0]
 800e050:	4770      	bx	lr
 800e052:	4610      	mov	r0, r2
 800e054:	e7e9      	b.n	800e02a <__lo0bits+0x2a>
 800e056:	2000      	movs	r0, #0
 800e058:	4770      	bx	lr
 800e05a:	2020      	movs	r0, #32
 800e05c:	4770      	bx	lr
	...

0800e060 <__i2b>:
 800e060:	b510      	push	{r4, lr}
 800e062:	460c      	mov	r4, r1
 800e064:	2101      	movs	r1, #1
 800e066:	f7ff ff03 	bl	800de70 <_Balloc>
 800e06a:	4602      	mov	r2, r0
 800e06c:	b928      	cbnz	r0, 800e07a <__i2b+0x1a>
 800e06e:	4b05      	ldr	r3, [pc, #20]	; (800e084 <__i2b+0x24>)
 800e070:	4805      	ldr	r0, [pc, #20]	; (800e088 <__i2b+0x28>)
 800e072:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e076:	f000 fce1 	bl	800ea3c <__assert_func>
 800e07a:	2301      	movs	r3, #1
 800e07c:	6144      	str	r4, [r0, #20]
 800e07e:	6103      	str	r3, [r0, #16]
 800e080:	bd10      	pop	{r4, pc}
 800e082:	bf00      	nop
 800e084:	08010627 	.word	0x08010627
 800e088:	08010638 	.word	0x08010638

0800e08c <__multiply>:
 800e08c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e090:	4691      	mov	r9, r2
 800e092:	690a      	ldr	r2, [r1, #16]
 800e094:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e098:	429a      	cmp	r2, r3
 800e09a:	bfb8      	it	lt
 800e09c:	460b      	movlt	r3, r1
 800e09e:	460c      	mov	r4, r1
 800e0a0:	bfbc      	itt	lt
 800e0a2:	464c      	movlt	r4, r9
 800e0a4:	4699      	movlt	r9, r3
 800e0a6:	6927      	ldr	r7, [r4, #16]
 800e0a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e0ac:	68a3      	ldr	r3, [r4, #8]
 800e0ae:	6861      	ldr	r1, [r4, #4]
 800e0b0:	eb07 060a 	add.w	r6, r7, sl
 800e0b4:	42b3      	cmp	r3, r6
 800e0b6:	b085      	sub	sp, #20
 800e0b8:	bfb8      	it	lt
 800e0ba:	3101      	addlt	r1, #1
 800e0bc:	f7ff fed8 	bl	800de70 <_Balloc>
 800e0c0:	b930      	cbnz	r0, 800e0d0 <__multiply+0x44>
 800e0c2:	4602      	mov	r2, r0
 800e0c4:	4b44      	ldr	r3, [pc, #272]	; (800e1d8 <__multiply+0x14c>)
 800e0c6:	4845      	ldr	r0, [pc, #276]	; (800e1dc <__multiply+0x150>)
 800e0c8:	f240 115d 	movw	r1, #349	; 0x15d
 800e0cc:	f000 fcb6 	bl	800ea3c <__assert_func>
 800e0d0:	f100 0514 	add.w	r5, r0, #20
 800e0d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e0d8:	462b      	mov	r3, r5
 800e0da:	2200      	movs	r2, #0
 800e0dc:	4543      	cmp	r3, r8
 800e0de:	d321      	bcc.n	800e124 <__multiply+0x98>
 800e0e0:	f104 0314 	add.w	r3, r4, #20
 800e0e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e0e8:	f109 0314 	add.w	r3, r9, #20
 800e0ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e0f0:	9202      	str	r2, [sp, #8]
 800e0f2:	1b3a      	subs	r2, r7, r4
 800e0f4:	3a15      	subs	r2, #21
 800e0f6:	f022 0203 	bic.w	r2, r2, #3
 800e0fa:	3204      	adds	r2, #4
 800e0fc:	f104 0115 	add.w	r1, r4, #21
 800e100:	428f      	cmp	r7, r1
 800e102:	bf38      	it	cc
 800e104:	2204      	movcc	r2, #4
 800e106:	9201      	str	r2, [sp, #4]
 800e108:	9a02      	ldr	r2, [sp, #8]
 800e10a:	9303      	str	r3, [sp, #12]
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d80c      	bhi.n	800e12a <__multiply+0x9e>
 800e110:	2e00      	cmp	r6, #0
 800e112:	dd03      	ble.n	800e11c <__multiply+0x90>
 800e114:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d05a      	beq.n	800e1d2 <__multiply+0x146>
 800e11c:	6106      	str	r6, [r0, #16]
 800e11e:	b005      	add	sp, #20
 800e120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e124:	f843 2b04 	str.w	r2, [r3], #4
 800e128:	e7d8      	b.n	800e0dc <__multiply+0x50>
 800e12a:	f8b3 a000 	ldrh.w	sl, [r3]
 800e12e:	f1ba 0f00 	cmp.w	sl, #0
 800e132:	d024      	beq.n	800e17e <__multiply+0xf2>
 800e134:	f104 0e14 	add.w	lr, r4, #20
 800e138:	46a9      	mov	r9, r5
 800e13a:	f04f 0c00 	mov.w	ip, #0
 800e13e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e142:	f8d9 1000 	ldr.w	r1, [r9]
 800e146:	fa1f fb82 	uxth.w	fp, r2
 800e14a:	b289      	uxth	r1, r1
 800e14c:	fb0a 110b 	mla	r1, sl, fp, r1
 800e150:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e154:	f8d9 2000 	ldr.w	r2, [r9]
 800e158:	4461      	add	r1, ip
 800e15a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e15e:	fb0a c20b 	mla	r2, sl, fp, ip
 800e162:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e166:	b289      	uxth	r1, r1
 800e168:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e16c:	4577      	cmp	r7, lr
 800e16e:	f849 1b04 	str.w	r1, [r9], #4
 800e172:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e176:	d8e2      	bhi.n	800e13e <__multiply+0xb2>
 800e178:	9a01      	ldr	r2, [sp, #4]
 800e17a:	f845 c002 	str.w	ip, [r5, r2]
 800e17e:	9a03      	ldr	r2, [sp, #12]
 800e180:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e184:	3304      	adds	r3, #4
 800e186:	f1b9 0f00 	cmp.w	r9, #0
 800e18a:	d020      	beq.n	800e1ce <__multiply+0x142>
 800e18c:	6829      	ldr	r1, [r5, #0]
 800e18e:	f104 0c14 	add.w	ip, r4, #20
 800e192:	46ae      	mov	lr, r5
 800e194:	f04f 0a00 	mov.w	sl, #0
 800e198:	f8bc b000 	ldrh.w	fp, [ip]
 800e19c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e1a0:	fb09 220b 	mla	r2, r9, fp, r2
 800e1a4:	4492      	add	sl, r2
 800e1a6:	b289      	uxth	r1, r1
 800e1a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e1ac:	f84e 1b04 	str.w	r1, [lr], #4
 800e1b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e1b4:	f8be 1000 	ldrh.w	r1, [lr]
 800e1b8:	0c12      	lsrs	r2, r2, #16
 800e1ba:	fb09 1102 	mla	r1, r9, r2, r1
 800e1be:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e1c2:	4567      	cmp	r7, ip
 800e1c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e1c8:	d8e6      	bhi.n	800e198 <__multiply+0x10c>
 800e1ca:	9a01      	ldr	r2, [sp, #4]
 800e1cc:	50a9      	str	r1, [r5, r2]
 800e1ce:	3504      	adds	r5, #4
 800e1d0:	e79a      	b.n	800e108 <__multiply+0x7c>
 800e1d2:	3e01      	subs	r6, #1
 800e1d4:	e79c      	b.n	800e110 <__multiply+0x84>
 800e1d6:	bf00      	nop
 800e1d8:	08010627 	.word	0x08010627
 800e1dc:	08010638 	.word	0x08010638

0800e1e0 <__pow5mult>:
 800e1e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1e4:	4615      	mov	r5, r2
 800e1e6:	f012 0203 	ands.w	r2, r2, #3
 800e1ea:	4606      	mov	r6, r0
 800e1ec:	460f      	mov	r7, r1
 800e1ee:	d007      	beq.n	800e200 <__pow5mult+0x20>
 800e1f0:	4c25      	ldr	r4, [pc, #148]	; (800e288 <__pow5mult+0xa8>)
 800e1f2:	3a01      	subs	r2, #1
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e1fa:	f7ff fe9b 	bl	800df34 <__multadd>
 800e1fe:	4607      	mov	r7, r0
 800e200:	10ad      	asrs	r5, r5, #2
 800e202:	d03d      	beq.n	800e280 <__pow5mult+0xa0>
 800e204:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e206:	b97c      	cbnz	r4, 800e228 <__pow5mult+0x48>
 800e208:	2010      	movs	r0, #16
 800e20a:	f7ff fe1b 	bl	800de44 <malloc>
 800e20e:	4602      	mov	r2, r0
 800e210:	6270      	str	r0, [r6, #36]	; 0x24
 800e212:	b928      	cbnz	r0, 800e220 <__pow5mult+0x40>
 800e214:	4b1d      	ldr	r3, [pc, #116]	; (800e28c <__pow5mult+0xac>)
 800e216:	481e      	ldr	r0, [pc, #120]	; (800e290 <__pow5mult+0xb0>)
 800e218:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e21c:	f000 fc0e 	bl	800ea3c <__assert_func>
 800e220:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e224:	6004      	str	r4, [r0, #0]
 800e226:	60c4      	str	r4, [r0, #12]
 800e228:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e22c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e230:	b94c      	cbnz	r4, 800e246 <__pow5mult+0x66>
 800e232:	f240 2171 	movw	r1, #625	; 0x271
 800e236:	4630      	mov	r0, r6
 800e238:	f7ff ff12 	bl	800e060 <__i2b>
 800e23c:	2300      	movs	r3, #0
 800e23e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e242:	4604      	mov	r4, r0
 800e244:	6003      	str	r3, [r0, #0]
 800e246:	f04f 0900 	mov.w	r9, #0
 800e24a:	07eb      	lsls	r3, r5, #31
 800e24c:	d50a      	bpl.n	800e264 <__pow5mult+0x84>
 800e24e:	4639      	mov	r1, r7
 800e250:	4622      	mov	r2, r4
 800e252:	4630      	mov	r0, r6
 800e254:	f7ff ff1a 	bl	800e08c <__multiply>
 800e258:	4639      	mov	r1, r7
 800e25a:	4680      	mov	r8, r0
 800e25c:	4630      	mov	r0, r6
 800e25e:	f7ff fe47 	bl	800def0 <_Bfree>
 800e262:	4647      	mov	r7, r8
 800e264:	106d      	asrs	r5, r5, #1
 800e266:	d00b      	beq.n	800e280 <__pow5mult+0xa0>
 800e268:	6820      	ldr	r0, [r4, #0]
 800e26a:	b938      	cbnz	r0, 800e27c <__pow5mult+0x9c>
 800e26c:	4622      	mov	r2, r4
 800e26e:	4621      	mov	r1, r4
 800e270:	4630      	mov	r0, r6
 800e272:	f7ff ff0b 	bl	800e08c <__multiply>
 800e276:	6020      	str	r0, [r4, #0]
 800e278:	f8c0 9000 	str.w	r9, [r0]
 800e27c:	4604      	mov	r4, r0
 800e27e:	e7e4      	b.n	800e24a <__pow5mult+0x6a>
 800e280:	4638      	mov	r0, r7
 800e282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e286:	bf00      	nop
 800e288:	08010788 	.word	0x08010788
 800e28c:	080105b5 	.word	0x080105b5
 800e290:	08010638 	.word	0x08010638

0800e294 <__lshift>:
 800e294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e298:	460c      	mov	r4, r1
 800e29a:	6849      	ldr	r1, [r1, #4]
 800e29c:	6923      	ldr	r3, [r4, #16]
 800e29e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e2a2:	68a3      	ldr	r3, [r4, #8]
 800e2a4:	4607      	mov	r7, r0
 800e2a6:	4691      	mov	r9, r2
 800e2a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e2ac:	f108 0601 	add.w	r6, r8, #1
 800e2b0:	42b3      	cmp	r3, r6
 800e2b2:	db0b      	blt.n	800e2cc <__lshift+0x38>
 800e2b4:	4638      	mov	r0, r7
 800e2b6:	f7ff fddb 	bl	800de70 <_Balloc>
 800e2ba:	4605      	mov	r5, r0
 800e2bc:	b948      	cbnz	r0, 800e2d2 <__lshift+0x3e>
 800e2be:	4602      	mov	r2, r0
 800e2c0:	4b2a      	ldr	r3, [pc, #168]	; (800e36c <__lshift+0xd8>)
 800e2c2:	482b      	ldr	r0, [pc, #172]	; (800e370 <__lshift+0xdc>)
 800e2c4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e2c8:	f000 fbb8 	bl	800ea3c <__assert_func>
 800e2cc:	3101      	adds	r1, #1
 800e2ce:	005b      	lsls	r3, r3, #1
 800e2d0:	e7ee      	b.n	800e2b0 <__lshift+0x1c>
 800e2d2:	2300      	movs	r3, #0
 800e2d4:	f100 0114 	add.w	r1, r0, #20
 800e2d8:	f100 0210 	add.w	r2, r0, #16
 800e2dc:	4618      	mov	r0, r3
 800e2de:	4553      	cmp	r3, sl
 800e2e0:	db37      	blt.n	800e352 <__lshift+0xbe>
 800e2e2:	6920      	ldr	r0, [r4, #16]
 800e2e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e2e8:	f104 0314 	add.w	r3, r4, #20
 800e2ec:	f019 091f 	ands.w	r9, r9, #31
 800e2f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e2f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e2f8:	d02f      	beq.n	800e35a <__lshift+0xc6>
 800e2fa:	f1c9 0e20 	rsb	lr, r9, #32
 800e2fe:	468a      	mov	sl, r1
 800e300:	f04f 0c00 	mov.w	ip, #0
 800e304:	681a      	ldr	r2, [r3, #0]
 800e306:	fa02 f209 	lsl.w	r2, r2, r9
 800e30a:	ea42 020c 	orr.w	r2, r2, ip
 800e30e:	f84a 2b04 	str.w	r2, [sl], #4
 800e312:	f853 2b04 	ldr.w	r2, [r3], #4
 800e316:	4298      	cmp	r0, r3
 800e318:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e31c:	d8f2      	bhi.n	800e304 <__lshift+0x70>
 800e31e:	1b03      	subs	r3, r0, r4
 800e320:	3b15      	subs	r3, #21
 800e322:	f023 0303 	bic.w	r3, r3, #3
 800e326:	3304      	adds	r3, #4
 800e328:	f104 0215 	add.w	r2, r4, #21
 800e32c:	4290      	cmp	r0, r2
 800e32e:	bf38      	it	cc
 800e330:	2304      	movcc	r3, #4
 800e332:	f841 c003 	str.w	ip, [r1, r3]
 800e336:	f1bc 0f00 	cmp.w	ip, #0
 800e33a:	d001      	beq.n	800e340 <__lshift+0xac>
 800e33c:	f108 0602 	add.w	r6, r8, #2
 800e340:	3e01      	subs	r6, #1
 800e342:	4638      	mov	r0, r7
 800e344:	612e      	str	r6, [r5, #16]
 800e346:	4621      	mov	r1, r4
 800e348:	f7ff fdd2 	bl	800def0 <_Bfree>
 800e34c:	4628      	mov	r0, r5
 800e34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e352:	f842 0f04 	str.w	r0, [r2, #4]!
 800e356:	3301      	adds	r3, #1
 800e358:	e7c1      	b.n	800e2de <__lshift+0x4a>
 800e35a:	3904      	subs	r1, #4
 800e35c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e360:	f841 2f04 	str.w	r2, [r1, #4]!
 800e364:	4298      	cmp	r0, r3
 800e366:	d8f9      	bhi.n	800e35c <__lshift+0xc8>
 800e368:	e7ea      	b.n	800e340 <__lshift+0xac>
 800e36a:	bf00      	nop
 800e36c:	08010627 	.word	0x08010627
 800e370:	08010638 	.word	0x08010638

0800e374 <__mcmp>:
 800e374:	b530      	push	{r4, r5, lr}
 800e376:	6902      	ldr	r2, [r0, #16]
 800e378:	690c      	ldr	r4, [r1, #16]
 800e37a:	1b12      	subs	r2, r2, r4
 800e37c:	d10e      	bne.n	800e39c <__mcmp+0x28>
 800e37e:	f100 0314 	add.w	r3, r0, #20
 800e382:	3114      	adds	r1, #20
 800e384:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e388:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e38c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e390:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e394:	42a5      	cmp	r5, r4
 800e396:	d003      	beq.n	800e3a0 <__mcmp+0x2c>
 800e398:	d305      	bcc.n	800e3a6 <__mcmp+0x32>
 800e39a:	2201      	movs	r2, #1
 800e39c:	4610      	mov	r0, r2
 800e39e:	bd30      	pop	{r4, r5, pc}
 800e3a0:	4283      	cmp	r3, r0
 800e3a2:	d3f3      	bcc.n	800e38c <__mcmp+0x18>
 800e3a4:	e7fa      	b.n	800e39c <__mcmp+0x28>
 800e3a6:	f04f 32ff 	mov.w	r2, #4294967295
 800e3aa:	e7f7      	b.n	800e39c <__mcmp+0x28>

0800e3ac <__mdiff>:
 800e3ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b0:	460c      	mov	r4, r1
 800e3b2:	4606      	mov	r6, r0
 800e3b4:	4611      	mov	r1, r2
 800e3b6:	4620      	mov	r0, r4
 800e3b8:	4690      	mov	r8, r2
 800e3ba:	f7ff ffdb 	bl	800e374 <__mcmp>
 800e3be:	1e05      	subs	r5, r0, #0
 800e3c0:	d110      	bne.n	800e3e4 <__mdiff+0x38>
 800e3c2:	4629      	mov	r1, r5
 800e3c4:	4630      	mov	r0, r6
 800e3c6:	f7ff fd53 	bl	800de70 <_Balloc>
 800e3ca:	b930      	cbnz	r0, 800e3da <__mdiff+0x2e>
 800e3cc:	4b3a      	ldr	r3, [pc, #232]	; (800e4b8 <__mdiff+0x10c>)
 800e3ce:	4602      	mov	r2, r0
 800e3d0:	f240 2132 	movw	r1, #562	; 0x232
 800e3d4:	4839      	ldr	r0, [pc, #228]	; (800e4bc <__mdiff+0x110>)
 800e3d6:	f000 fb31 	bl	800ea3c <__assert_func>
 800e3da:	2301      	movs	r3, #1
 800e3dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e3e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3e4:	bfa4      	itt	ge
 800e3e6:	4643      	movge	r3, r8
 800e3e8:	46a0      	movge	r8, r4
 800e3ea:	4630      	mov	r0, r6
 800e3ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e3f0:	bfa6      	itte	ge
 800e3f2:	461c      	movge	r4, r3
 800e3f4:	2500      	movge	r5, #0
 800e3f6:	2501      	movlt	r5, #1
 800e3f8:	f7ff fd3a 	bl	800de70 <_Balloc>
 800e3fc:	b920      	cbnz	r0, 800e408 <__mdiff+0x5c>
 800e3fe:	4b2e      	ldr	r3, [pc, #184]	; (800e4b8 <__mdiff+0x10c>)
 800e400:	4602      	mov	r2, r0
 800e402:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e406:	e7e5      	b.n	800e3d4 <__mdiff+0x28>
 800e408:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e40c:	6926      	ldr	r6, [r4, #16]
 800e40e:	60c5      	str	r5, [r0, #12]
 800e410:	f104 0914 	add.w	r9, r4, #20
 800e414:	f108 0514 	add.w	r5, r8, #20
 800e418:	f100 0e14 	add.w	lr, r0, #20
 800e41c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e420:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e424:	f108 0210 	add.w	r2, r8, #16
 800e428:	46f2      	mov	sl, lr
 800e42a:	2100      	movs	r1, #0
 800e42c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e430:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e434:	fa1f f883 	uxth.w	r8, r3
 800e438:	fa11 f18b 	uxtah	r1, r1, fp
 800e43c:	0c1b      	lsrs	r3, r3, #16
 800e43e:	eba1 0808 	sub.w	r8, r1, r8
 800e442:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e446:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e44a:	fa1f f888 	uxth.w	r8, r8
 800e44e:	1419      	asrs	r1, r3, #16
 800e450:	454e      	cmp	r6, r9
 800e452:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e456:	f84a 3b04 	str.w	r3, [sl], #4
 800e45a:	d8e7      	bhi.n	800e42c <__mdiff+0x80>
 800e45c:	1b33      	subs	r3, r6, r4
 800e45e:	3b15      	subs	r3, #21
 800e460:	f023 0303 	bic.w	r3, r3, #3
 800e464:	3304      	adds	r3, #4
 800e466:	3415      	adds	r4, #21
 800e468:	42a6      	cmp	r6, r4
 800e46a:	bf38      	it	cc
 800e46c:	2304      	movcc	r3, #4
 800e46e:	441d      	add	r5, r3
 800e470:	4473      	add	r3, lr
 800e472:	469e      	mov	lr, r3
 800e474:	462e      	mov	r6, r5
 800e476:	4566      	cmp	r6, ip
 800e478:	d30e      	bcc.n	800e498 <__mdiff+0xec>
 800e47a:	f10c 0203 	add.w	r2, ip, #3
 800e47e:	1b52      	subs	r2, r2, r5
 800e480:	f022 0203 	bic.w	r2, r2, #3
 800e484:	3d03      	subs	r5, #3
 800e486:	45ac      	cmp	ip, r5
 800e488:	bf38      	it	cc
 800e48a:	2200      	movcc	r2, #0
 800e48c:	441a      	add	r2, r3
 800e48e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e492:	b17b      	cbz	r3, 800e4b4 <__mdiff+0x108>
 800e494:	6107      	str	r7, [r0, #16]
 800e496:	e7a3      	b.n	800e3e0 <__mdiff+0x34>
 800e498:	f856 8b04 	ldr.w	r8, [r6], #4
 800e49c:	fa11 f288 	uxtah	r2, r1, r8
 800e4a0:	1414      	asrs	r4, r2, #16
 800e4a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e4a6:	b292      	uxth	r2, r2
 800e4a8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e4ac:	f84e 2b04 	str.w	r2, [lr], #4
 800e4b0:	1421      	asrs	r1, r4, #16
 800e4b2:	e7e0      	b.n	800e476 <__mdiff+0xca>
 800e4b4:	3f01      	subs	r7, #1
 800e4b6:	e7ea      	b.n	800e48e <__mdiff+0xe2>
 800e4b8:	08010627 	.word	0x08010627
 800e4bc:	08010638 	.word	0x08010638

0800e4c0 <__d2b>:
 800e4c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e4c4:	4689      	mov	r9, r1
 800e4c6:	2101      	movs	r1, #1
 800e4c8:	ec57 6b10 	vmov	r6, r7, d0
 800e4cc:	4690      	mov	r8, r2
 800e4ce:	f7ff fccf 	bl	800de70 <_Balloc>
 800e4d2:	4604      	mov	r4, r0
 800e4d4:	b930      	cbnz	r0, 800e4e4 <__d2b+0x24>
 800e4d6:	4602      	mov	r2, r0
 800e4d8:	4b25      	ldr	r3, [pc, #148]	; (800e570 <__d2b+0xb0>)
 800e4da:	4826      	ldr	r0, [pc, #152]	; (800e574 <__d2b+0xb4>)
 800e4dc:	f240 310a 	movw	r1, #778	; 0x30a
 800e4e0:	f000 faac 	bl	800ea3c <__assert_func>
 800e4e4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e4e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e4ec:	bb35      	cbnz	r5, 800e53c <__d2b+0x7c>
 800e4ee:	2e00      	cmp	r6, #0
 800e4f0:	9301      	str	r3, [sp, #4]
 800e4f2:	d028      	beq.n	800e546 <__d2b+0x86>
 800e4f4:	4668      	mov	r0, sp
 800e4f6:	9600      	str	r6, [sp, #0]
 800e4f8:	f7ff fd82 	bl	800e000 <__lo0bits>
 800e4fc:	9900      	ldr	r1, [sp, #0]
 800e4fe:	b300      	cbz	r0, 800e542 <__d2b+0x82>
 800e500:	9a01      	ldr	r2, [sp, #4]
 800e502:	f1c0 0320 	rsb	r3, r0, #32
 800e506:	fa02 f303 	lsl.w	r3, r2, r3
 800e50a:	430b      	orrs	r3, r1
 800e50c:	40c2      	lsrs	r2, r0
 800e50e:	6163      	str	r3, [r4, #20]
 800e510:	9201      	str	r2, [sp, #4]
 800e512:	9b01      	ldr	r3, [sp, #4]
 800e514:	61a3      	str	r3, [r4, #24]
 800e516:	2b00      	cmp	r3, #0
 800e518:	bf14      	ite	ne
 800e51a:	2202      	movne	r2, #2
 800e51c:	2201      	moveq	r2, #1
 800e51e:	6122      	str	r2, [r4, #16]
 800e520:	b1d5      	cbz	r5, 800e558 <__d2b+0x98>
 800e522:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e526:	4405      	add	r5, r0
 800e528:	f8c9 5000 	str.w	r5, [r9]
 800e52c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e530:	f8c8 0000 	str.w	r0, [r8]
 800e534:	4620      	mov	r0, r4
 800e536:	b003      	add	sp, #12
 800e538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e53c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e540:	e7d5      	b.n	800e4ee <__d2b+0x2e>
 800e542:	6161      	str	r1, [r4, #20]
 800e544:	e7e5      	b.n	800e512 <__d2b+0x52>
 800e546:	a801      	add	r0, sp, #4
 800e548:	f7ff fd5a 	bl	800e000 <__lo0bits>
 800e54c:	9b01      	ldr	r3, [sp, #4]
 800e54e:	6163      	str	r3, [r4, #20]
 800e550:	2201      	movs	r2, #1
 800e552:	6122      	str	r2, [r4, #16]
 800e554:	3020      	adds	r0, #32
 800e556:	e7e3      	b.n	800e520 <__d2b+0x60>
 800e558:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e55c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e560:	f8c9 0000 	str.w	r0, [r9]
 800e564:	6918      	ldr	r0, [r3, #16]
 800e566:	f7ff fd2b 	bl	800dfc0 <__hi0bits>
 800e56a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e56e:	e7df      	b.n	800e530 <__d2b+0x70>
 800e570:	08010627 	.word	0x08010627
 800e574:	08010638 	.word	0x08010638

0800e578 <_calloc_r>:
 800e578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e57a:	fba1 2402 	umull	r2, r4, r1, r2
 800e57e:	b94c      	cbnz	r4, 800e594 <_calloc_r+0x1c>
 800e580:	4611      	mov	r1, r2
 800e582:	9201      	str	r2, [sp, #4]
 800e584:	f000 f87a 	bl	800e67c <_malloc_r>
 800e588:	9a01      	ldr	r2, [sp, #4]
 800e58a:	4605      	mov	r5, r0
 800e58c:	b930      	cbnz	r0, 800e59c <_calloc_r+0x24>
 800e58e:	4628      	mov	r0, r5
 800e590:	b003      	add	sp, #12
 800e592:	bd30      	pop	{r4, r5, pc}
 800e594:	220c      	movs	r2, #12
 800e596:	6002      	str	r2, [r0, #0]
 800e598:	2500      	movs	r5, #0
 800e59a:	e7f8      	b.n	800e58e <_calloc_r+0x16>
 800e59c:	4621      	mov	r1, r4
 800e59e:	f7fe f941 	bl	800c824 <memset>
 800e5a2:	e7f4      	b.n	800e58e <_calloc_r+0x16>

0800e5a4 <_free_r>:
 800e5a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e5a6:	2900      	cmp	r1, #0
 800e5a8:	d044      	beq.n	800e634 <_free_r+0x90>
 800e5aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5ae:	9001      	str	r0, [sp, #4]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	f1a1 0404 	sub.w	r4, r1, #4
 800e5b6:	bfb8      	it	lt
 800e5b8:	18e4      	addlt	r4, r4, r3
 800e5ba:	f000 fa9b 	bl	800eaf4 <__malloc_lock>
 800e5be:	4a1e      	ldr	r2, [pc, #120]	; (800e638 <_free_r+0x94>)
 800e5c0:	9801      	ldr	r0, [sp, #4]
 800e5c2:	6813      	ldr	r3, [r2, #0]
 800e5c4:	b933      	cbnz	r3, 800e5d4 <_free_r+0x30>
 800e5c6:	6063      	str	r3, [r4, #4]
 800e5c8:	6014      	str	r4, [r2, #0]
 800e5ca:	b003      	add	sp, #12
 800e5cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e5d0:	f000 ba96 	b.w	800eb00 <__malloc_unlock>
 800e5d4:	42a3      	cmp	r3, r4
 800e5d6:	d908      	bls.n	800e5ea <_free_r+0x46>
 800e5d8:	6825      	ldr	r5, [r4, #0]
 800e5da:	1961      	adds	r1, r4, r5
 800e5dc:	428b      	cmp	r3, r1
 800e5de:	bf01      	itttt	eq
 800e5e0:	6819      	ldreq	r1, [r3, #0]
 800e5e2:	685b      	ldreq	r3, [r3, #4]
 800e5e4:	1949      	addeq	r1, r1, r5
 800e5e6:	6021      	streq	r1, [r4, #0]
 800e5e8:	e7ed      	b.n	800e5c6 <_free_r+0x22>
 800e5ea:	461a      	mov	r2, r3
 800e5ec:	685b      	ldr	r3, [r3, #4]
 800e5ee:	b10b      	cbz	r3, 800e5f4 <_free_r+0x50>
 800e5f0:	42a3      	cmp	r3, r4
 800e5f2:	d9fa      	bls.n	800e5ea <_free_r+0x46>
 800e5f4:	6811      	ldr	r1, [r2, #0]
 800e5f6:	1855      	adds	r5, r2, r1
 800e5f8:	42a5      	cmp	r5, r4
 800e5fa:	d10b      	bne.n	800e614 <_free_r+0x70>
 800e5fc:	6824      	ldr	r4, [r4, #0]
 800e5fe:	4421      	add	r1, r4
 800e600:	1854      	adds	r4, r2, r1
 800e602:	42a3      	cmp	r3, r4
 800e604:	6011      	str	r1, [r2, #0]
 800e606:	d1e0      	bne.n	800e5ca <_free_r+0x26>
 800e608:	681c      	ldr	r4, [r3, #0]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	6053      	str	r3, [r2, #4]
 800e60e:	4421      	add	r1, r4
 800e610:	6011      	str	r1, [r2, #0]
 800e612:	e7da      	b.n	800e5ca <_free_r+0x26>
 800e614:	d902      	bls.n	800e61c <_free_r+0x78>
 800e616:	230c      	movs	r3, #12
 800e618:	6003      	str	r3, [r0, #0]
 800e61a:	e7d6      	b.n	800e5ca <_free_r+0x26>
 800e61c:	6825      	ldr	r5, [r4, #0]
 800e61e:	1961      	adds	r1, r4, r5
 800e620:	428b      	cmp	r3, r1
 800e622:	bf04      	itt	eq
 800e624:	6819      	ldreq	r1, [r3, #0]
 800e626:	685b      	ldreq	r3, [r3, #4]
 800e628:	6063      	str	r3, [r4, #4]
 800e62a:	bf04      	itt	eq
 800e62c:	1949      	addeq	r1, r1, r5
 800e62e:	6021      	streq	r1, [r4, #0]
 800e630:	6054      	str	r4, [r2, #4]
 800e632:	e7ca      	b.n	800e5ca <_free_r+0x26>
 800e634:	b003      	add	sp, #12
 800e636:	bd30      	pop	{r4, r5, pc}
 800e638:	200036e0 	.word	0x200036e0

0800e63c <sbrk_aligned>:
 800e63c:	b570      	push	{r4, r5, r6, lr}
 800e63e:	4e0e      	ldr	r6, [pc, #56]	; (800e678 <sbrk_aligned+0x3c>)
 800e640:	460c      	mov	r4, r1
 800e642:	6831      	ldr	r1, [r6, #0]
 800e644:	4605      	mov	r5, r0
 800e646:	b911      	cbnz	r1, 800e64e <sbrk_aligned+0x12>
 800e648:	f000 f9e8 	bl	800ea1c <_sbrk_r>
 800e64c:	6030      	str	r0, [r6, #0]
 800e64e:	4621      	mov	r1, r4
 800e650:	4628      	mov	r0, r5
 800e652:	f000 f9e3 	bl	800ea1c <_sbrk_r>
 800e656:	1c43      	adds	r3, r0, #1
 800e658:	d00a      	beq.n	800e670 <sbrk_aligned+0x34>
 800e65a:	1cc4      	adds	r4, r0, #3
 800e65c:	f024 0403 	bic.w	r4, r4, #3
 800e660:	42a0      	cmp	r0, r4
 800e662:	d007      	beq.n	800e674 <sbrk_aligned+0x38>
 800e664:	1a21      	subs	r1, r4, r0
 800e666:	4628      	mov	r0, r5
 800e668:	f000 f9d8 	bl	800ea1c <_sbrk_r>
 800e66c:	3001      	adds	r0, #1
 800e66e:	d101      	bne.n	800e674 <sbrk_aligned+0x38>
 800e670:	f04f 34ff 	mov.w	r4, #4294967295
 800e674:	4620      	mov	r0, r4
 800e676:	bd70      	pop	{r4, r5, r6, pc}
 800e678:	200036e4 	.word	0x200036e4

0800e67c <_malloc_r>:
 800e67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e680:	1ccd      	adds	r5, r1, #3
 800e682:	f025 0503 	bic.w	r5, r5, #3
 800e686:	3508      	adds	r5, #8
 800e688:	2d0c      	cmp	r5, #12
 800e68a:	bf38      	it	cc
 800e68c:	250c      	movcc	r5, #12
 800e68e:	2d00      	cmp	r5, #0
 800e690:	4607      	mov	r7, r0
 800e692:	db01      	blt.n	800e698 <_malloc_r+0x1c>
 800e694:	42a9      	cmp	r1, r5
 800e696:	d905      	bls.n	800e6a4 <_malloc_r+0x28>
 800e698:	230c      	movs	r3, #12
 800e69a:	603b      	str	r3, [r7, #0]
 800e69c:	2600      	movs	r6, #0
 800e69e:	4630      	mov	r0, r6
 800e6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6a4:	4e2e      	ldr	r6, [pc, #184]	; (800e760 <_malloc_r+0xe4>)
 800e6a6:	f000 fa25 	bl	800eaf4 <__malloc_lock>
 800e6aa:	6833      	ldr	r3, [r6, #0]
 800e6ac:	461c      	mov	r4, r3
 800e6ae:	bb34      	cbnz	r4, 800e6fe <_malloc_r+0x82>
 800e6b0:	4629      	mov	r1, r5
 800e6b2:	4638      	mov	r0, r7
 800e6b4:	f7ff ffc2 	bl	800e63c <sbrk_aligned>
 800e6b8:	1c43      	adds	r3, r0, #1
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	d14d      	bne.n	800e75a <_malloc_r+0xde>
 800e6be:	6834      	ldr	r4, [r6, #0]
 800e6c0:	4626      	mov	r6, r4
 800e6c2:	2e00      	cmp	r6, #0
 800e6c4:	d140      	bne.n	800e748 <_malloc_r+0xcc>
 800e6c6:	6823      	ldr	r3, [r4, #0]
 800e6c8:	4631      	mov	r1, r6
 800e6ca:	4638      	mov	r0, r7
 800e6cc:	eb04 0803 	add.w	r8, r4, r3
 800e6d0:	f000 f9a4 	bl	800ea1c <_sbrk_r>
 800e6d4:	4580      	cmp	r8, r0
 800e6d6:	d13a      	bne.n	800e74e <_malloc_r+0xd2>
 800e6d8:	6821      	ldr	r1, [r4, #0]
 800e6da:	3503      	adds	r5, #3
 800e6dc:	1a6d      	subs	r5, r5, r1
 800e6de:	f025 0503 	bic.w	r5, r5, #3
 800e6e2:	3508      	adds	r5, #8
 800e6e4:	2d0c      	cmp	r5, #12
 800e6e6:	bf38      	it	cc
 800e6e8:	250c      	movcc	r5, #12
 800e6ea:	4629      	mov	r1, r5
 800e6ec:	4638      	mov	r0, r7
 800e6ee:	f7ff ffa5 	bl	800e63c <sbrk_aligned>
 800e6f2:	3001      	adds	r0, #1
 800e6f4:	d02b      	beq.n	800e74e <_malloc_r+0xd2>
 800e6f6:	6823      	ldr	r3, [r4, #0]
 800e6f8:	442b      	add	r3, r5
 800e6fa:	6023      	str	r3, [r4, #0]
 800e6fc:	e00e      	b.n	800e71c <_malloc_r+0xa0>
 800e6fe:	6822      	ldr	r2, [r4, #0]
 800e700:	1b52      	subs	r2, r2, r5
 800e702:	d41e      	bmi.n	800e742 <_malloc_r+0xc6>
 800e704:	2a0b      	cmp	r2, #11
 800e706:	d916      	bls.n	800e736 <_malloc_r+0xba>
 800e708:	1961      	adds	r1, r4, r5
 800e70a:	42a3      	cmp	r3, r4
 800e70c:	6025      	str	r5, [r4, #0]
 800e70e:	bf18      	it	ne
 800e710:	6059      	strne	r1, [r3, #4]
 800e712:	6863      	ldr	r3, [r4, #4]
 800e714:	bf08      	it	eq
 800e716:	6031      	streq	r1, [r6, #0]
 800e718:	5162      	str	r2, [r4, r5]
 800e71a:	604b      	str	r3, [r1, #4]
 800e71c:	4638      	mov	r0, r7
 800e71e:	f104 060b 	add.w	r6, r4, #11
 800e722:	f000 f9ed 	bl	800eb00 <__malloc_unlock>
 800e726:	f026 0607 	bic.w	r6, r6, #7
 800e72a:	1d23      	adds	r3, r4, #4
 800e72c:	1af2      	subs	r2, r6, r3
 800e72e:	d0b6      	beq.n	800e69e <_malloc_r+0x22>
 800e730:	1b9b      	subs	r3, r3, r6
 800e732:	50a3      	str	r3, [r4, r2]
 800e734:	e7b3      	b.n	800e69e <_malloc_r+0x22>
 800e736:	6862      	ldr	r2, [r4, #4]
 800e738:	42a3      	cmp	r3, r4
 800e73a:	bf0c      	ite	eq
 800e73c:	6032      	streq	r2, [r6, #0]
 800e73e:	605a      	strne	r2, [r3, #4]
 800e740:	e7ec      	b.n	800e71c <_malloc_r+0xa0>
 800e742:	4623      	mov	r3, r4
 800e744:	6864      	ldr	r4, [r4, #4]
 800e746:	e7b2      	b.n	800e6ae <_malloc_r+0x32>
 800e748:	4634      	mov	r4, r6
 800e74a:	6876      	ldr	r6, [r6, #4]
 800e74c:	e7b9      	b.n	800e6c2 <_malloc_r+0x46>
 800e74e:	230c      	movs	r3, #12
 800e750:	603b      	str	r3, [r7, #0]
 800e752:	4638      	mov	r0, r7
 800e754:	f000 f9d4 	bl	800eb00 <__malloc_unlock>
 800e758:	e7a1      	b.n	800e69e <_malloc_r+0x22>
 800e75a:	6025      	str	r5, [r4, #0]
 800e75c:	e7de      	b.n	800e71c <_malloc_r+0xa0>
 800e75e:	bf00      	nop
 800e760:	200036e0 	.word	0x200036e0

0800e764 <__ssputs_r>:
 800e764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e768:	688e      	ldr	r6, [r1, #8]
 800e76a:	429e      	cmp	r6, r3
 800e76c:	4682      	mov	sl, r0
 800e76e:	460c      	mov	r4, r1
 800e770:	4690      	mov	r8, r2
 800e772:	461f      	mov	r7, r3
 800e774:	d838      	bhi.n	800e7e8 <__ssputs_r+0x84>
 800e776:	898a      	ldrh	r2, [r1, #12]
 800e778:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e77c:	d032      	beq.n	800e7e4 <__ssputs_r+0x80>
 800e77e:	6825      	ldr	r5, [r4, #0]
 800e780:	6909      	ldr	r1, [r1, #16]
 800e782:	eba5 0901 	sub.w	r9, r5, r1
 800e786:	6965      	ldr	r5, [r4, #20]
 800e788:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e78c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e790:	3301      	adds	r3, #1
 800e792:	444b      	add	r3, r9
 800e794:	106d      	asrs	r5, r5, #1
 800e796:	429d      	cmp	r5, r3
 800e798:	bf38      	it	cc
 800e79a:	461d      	movcc	r5, r3
 800e79c:	0553      	lsls	r3, r2, #21
 800e79e:	d531      	bpl.n	800e804 <__ssputs_r+0xa0>
 800e7a0:	4629      	mov	r1, r5
 800e7a2:	f7ff ff6b 	bl	800e67c <_malloc_r>
 800e7a6:	4606      	mov	r6, r0
 800e7a8:	b950      	cbnz	r0, 800e7c0 <__ssputs_r+0x5c>
 800e7aa:	230c      	movs	r3, #12
 800e7ac:	f8ca 3000 	str.w	r3, [sl]
 800e7b0:	89a3      	ldrh	r3, [r4, #12]
 800e7b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7b6:	81a3      	strh	r3, [r4, #12]
 800e7b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e7bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7c0:	6921      	ldr	r1, [r4, #16]
 800e7c2:	464a      	mov	r2, r9
 800e7c4:	f7ff fb46 	bl	800de54 <memcpy>
 800e7c8:	89a3      	ldrh	r3, [r4, #12]
 800e7ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e7ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e7d2:	81a3      	strh	r3, [r4, #12]
 800e7d4:	6126      	str	r6, [r4, #16]
 800e7d6:	6165      	str	r5, [r4, #20]
 800e7d8:	444e      	add	r6, r9
 800e7da:	eba5 0509 	sub.w	r5, r5, r9
 800e7de:	6026      	str	r6, [r4, #0]
 800e7e0:	60a5      	str	r5, [r4, #8]
 800e7e2:	463e      	mov	r6, r7
 800e7e4:	42be      	cmp	r6, r7
 800e7e6:	d900      	bls.n	800e7ea <__ssputs_r+0x86>
 800e7e8:	463e      	mov	r6, r7
 800e7ea:	6820      	ldr	r0, [r4, #0]
 800e7ec:	4632      	mov	r2, r6
 800e7ee:	4641      	mov	r1, r8
 800e7f0:	f000 f966 	bl	800eac0 <memmove>
 800e7f4:	68a3      	ldr	r3, [r4, #8]
 800e7f6:	1b9b      	subs	r3, r3, r6
 800e7f8:	60a3      	str	r3, [r4, #8]
 800e7fa:	6823      	ldr	r3, [r4, #0]
 800e7fc:	4433      	add	r3, r6
 800e7fe:	6023      	str	r3, [r4, #0]
 800e800:	2000      	movs	r0, #0
 800e802:	e7db      	b.n	800e7bc <__ssputs_r+0x58>
 800e804:	462a      	mov	r2, r5
 800e806:	f000 f981 	bl	800eb0c <_realloc_r>
 800e80a:	4606      	mov	r6, r0
 800e80c:	2800      	cmp	r0, #0
 800e80e:	d1e1      	bne.n	800e7d4 <__ssputs_r+0x70>
 800e810:	6921      	ldr	r1, [r4, #16]
 800e812:	4650      	mov	r0, sl
 800e814:	f7ff fec6 	bl	800e5a4 <_free_r>
 800e818:	e7c7      	b.n	800e7aa <__ssputs_r+0x46>
	...

0800e81c <_svfiprintf_r>:
 800e81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e820:	4698      	mov	r8, r3
 800e822:	898b      	ldrh	r3, [r1, #12]
 800e824:	061b      	lsls	r3, r3, #24
 800e826:	b09d      	sub	sp, #116	; 0x74
 800e828:	4607      	mov	r7, r0
 800e82a:	460d      	mov	r5, r1
 800e82c:	4614      	mov	r4, r2
 800e82e:	d50e      	bpl.n	800e84e <_svfiprintf_r+0x32>
 800e830:	690b      	ldr	r3, [r1, #16]
 800e832:	b963      	cbnz	r3, 800e84e <_svfiprintf_r+0x32>
 800e834:	2140      	movs	r1, #64	; 0x40
 800e836:	f7ff ff21 	bl	800e67c <_malloc_r>
 800e83a:	6028      	str	r0, [r5, #0]
 800e83c:	6128      	str	r0, [r5, #16]
 800e83e:	b920      	cbnz	r0, 800e84a <_svfiprintf_r+0x2e>
 800e840:	230c      	movs	r3, #12
 800e842:	603b      	str	r3, [r7, #0]
 800e844:	f04f 30ff 	mov.w	r0, #4294967295
 800e848:	e0d1      	b.n	800e9ee <_svfiprintf_r+0x1d2>
 800e84a:	2340      	movs	r3, #64	; 0x40
 800e84c:	616b      	str	r3, [r5, #20]
 800e84e:	2300      	movs	r3, #0
 800e850:	9309      	str	r3, [sp, #36]	; 0x24
 800e852:	2320      	movs	r3, #32
 800e854:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e858:	f8cd 800c 	str.w	r8, [sp, #12]
 800e85c:	2330      	movs	r3, #48	; 0x30
 800e85e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ea08 <_svfiprintf_r+0x1ec>
 800e862:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e866:	f04f 0901 	mov.w	r9, #1
 800e86a:	4623      	mov	r3, r4
 800e86c:	469a      	mov	sl, r3
 800e86e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e872:	b10a      	cbz	r2, 800e878 <_svfiprintf_r+0x5c>
 800e874:	2a25      	cmp	r2, #37	; 0x25
 800e876:	d1f9      	bne.n	800e86c <_svfiprintf_r+0x50>
 800e878:	ebba 0b04 	subs.w	fp, sl, r4
 800e87c:	d00b      	beq.n	800e896 <_svfiprintf_r+0x7a>
 800e87e:	465b      	mov	r3, fp
 800e880:	4622      	mov	r2, r4
 800e882:	4629      	mov	r1, r5
 800e884:	4638      	mov	r0, r7
 800e886:	f7ff ff6d 	bl	800e764 <__ssputs_r>
 800e88a:	3001      	adds	r0, #1
 800e88c:	f000 80aa 	beq.w	800e9e4 <_svfiprintf_r+0x1c8>
 800e890:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e892:	445a      	add	r2, fp
 800e894:	9209      	str	r2, [sp, #36]	; 0x24
 800e896:	f89a 3000 	ldrb.w	r3, [sl]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	f000 80a2 	beq.w	800e9e4 <_svfiprintf_r+0x1c8>
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800e8a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8aa:	f10a 0a01 	add.w	sl, sl, #1
 800e8ae:	9304      	str	r3, [sp, #16]
 800e8b0:	9307      	str	r3, [sp, #28]
 800e8b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8b6:	931a      	str	r3, [sp, #104]	; 0x68
 800e8b8:	4654      	mov	r4, sl
 800e8ba:	2205      	movs	r2, #5
 800e8bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8c0:	4851      	ldr	r0, [pc, #324]	; (800ea08 <_svfiprintf_r+0x1ec>)
 800e8c2:	f7f1 fc95 	bl	80001f0 <memchr>
 800e8c6:	9a04      	ldr	r2, [sp, #16]
 800e8c8:	b9d8      	cbnz	r0, 800e902 <_svfiprintf_r+0xe6>
 800e8ca:	06d0      	lsls	r0, r2, #27
 800e8cc:	bf44      	itt	mi
 800e8ce:	2320      	movmi	r3, #32
 800e8d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8d4:	0711      	lsls	r1, r2, #28
 800e8d6:	bf44      	itt	mi
 800e8d8:	232b      	movmi	r3, #43	; 0x2b
 800e8da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8de:	f89a 3000 	ldrb.w	r3, [sl]
 800e8e2:	2b2a      	cmp	r3, #42	; 0x2a
 800e8e4:	d015      	beq.n	800e912 <_svfiprintf_r+0xf6>
 800e8e6:	9a07      	ldr	r2, [sp, #28]
 800e8e8:	4654      	mov	r4, sl
 800e8ea:	2000      	movs	r0, #0
 800e8ec:	f04f 0c0a 	mov.w	ip, #10
 800e8f0:	4621      	mov	r1, r4
 800e8f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e8f6:	3b30      	subs	r3, #48	; 0x30
 800e8f8:	2b09      	cmp	r3, #9
 800e8fa:	d94e      	bls.n	800e99a <_svfiprintf_r+0x17e>
 800e8fc:	b1b0      	cbz	r0, 800e92c <_svfiprintf_r+0x110>
 800e8fe:	9207      	str	r2, [sp, #28]
 800e900:	e014      	b.n	800e92c <_svfiprintf_r+0x110>
 800e902:	eba0 0308 	sub.w	r3, r0, r8
 800e906:	fa09 f303 	lsl.w	r3, r9, r3
 800e90a:	4313      	orrs	r3, r2
 800e90c:	9304      	str	r3, [sp, #16]
 800e90e:	46a2      	mov	sl, r4
 800e910:	e7d2      	b.n	800e8b8 <_svfiprintf_r+0x9c>
 800e912:	9b03      	ldr	r3, [sp, #12]
 800e914:	1d19      	adds	r1, r3, #4
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	9103      	str	r1, [sp, #12]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	bfbb      	ittet	lt
 800e91e:	425b      	neglt	r3, r3
 800e920:	f042 0202 	orrlt.w	r2, r2, #2
 800e924:	9307      	strge	r3, [sp, #28]
 800e926:	9307      	strlt	r3, [sp, #28]
 800e928:	bfb8      	it	lt
 800e92a:	9204      	strlt	r2, [sp, #16]
 800e92c:	7823      	ldrb	r3, [r4, #0]
 800e92e:	2b2e      	cmp	r3, #46	; 0x2e
 800e930:	d10c      	bne.n	800e94c <_svfiprintf_r+0x130>
 800e932:	7863      	ldrb	r3, [r4, #1]
 800e934:	2b2a      	cmp	r3, #42	; 0x2a
 800e936:	d135      	bne.n	800e9a4 <_svfiprintf_r+0x188>
 800e938:	9b03      	ldr	r3, [sp, #12]
 800e93a:	1d1a      	adds	r2, r3, #4
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	9203      	str	r2, [sp, #12]
 800e940:	2b00      	cmp	r3, #0
 800e942:	bfb8      	it	lt
 800e944:	f04f 33ff 	movlt.w	r3, #4294967295
 800e948:	3402      	adds	r4, #2
 800e94a:	9305      	str	r3, [sp, #20]
 800e94c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ea18 <_svfiprintf_r+0x1fc>
 800e950:	7821      	ldrb	r1, [r4, #0]
 800e952:	2203      	movs	r2, #3
 800e954:	4650      	mov	r0, sl
 800e956:	f7f1 fc4b 	bl	80001f0 <memchr>
 800e95a:	b140      	cbz	r0, 800e96e <_svfiprintf_r+0x152>
 800e95c:	2340      	movs	r3, #64	; 0x40
 800e95e:	eba0 000a 	sub.w	r0, r0, sl
 800e962:	fa03 f000 	lsl.w	r0, r3, r0
 800e966:	9b04      	ldr	r3, [sp, #16]
 800e968:	4303      	orrs	r3, r0
 800e96a:	3401      	adds	r4, #1
 800e96c:	9304      	str	r3, [sp, #16]
 800e96e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e972:	4826      	ldr	r0, [pc, #152]	; (800ea0c <_svfiprintf_r+0x1f0>)
 800e974:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e978:	2206      	movs	r2, #6
 800e97a:	f7f1 fc39 	bl	80001f0 <memchr>
 800e97e:	2800      	cmp	r0, #0
 800e980:	d038      	beq.n	800e9f4 <_svfiprintf_r+0x1d8>
 800e982:	4b23      	ldr	r3, [pc, #140]	; (800ea10 <_svfiprintf_r+0x1f4>)
 800e984:	bb1b      	cbnz	r3, 800e9ce <_svfiprintf_r+0x1b2>
 800e986:	9b03      	ldr	r3, [sp, #12]
 800e988:	3307      	adds	r3, #7
 800e98a:	f023 0307 	bic.w	r3, r3, #7
 800e98e:	3308      	adds	r3, #8
 800e990:	9303      	str	r3, [sp, #12]
 800e992:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e994:	4433      	add	r3, r6
 800e996:	9309      	str	r3, [sp, #36]	; 0x24
 800e998:	e767      	b.n	800e86a <_svfiprintf_r+0x4e>
 800e99a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e99e:	460c      	mov	r4, r1
 800e9a0:	2001      	movs	r0, #1
 800e9a2:	e7a5      	b.n	800e8f0 <_svfiprintf_r+0xd4>
 800e9a4:	2300      	movs	r3, #0
 800e9a6:	3401      	adds	r4, #1
 800e9a8:	9305      	str	r3, [sp, #20]
 800e9aa:	4619      	mov	r1, r3
 800e9ac:	f04f 0c0a 	mov.w	ip, #10
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9b6:	3a30      	subs	r2, #48	; 0x30
 800e9b8:	2a09      	cmp	r2, #9
 800e9ba:	d903      	bls.n	800e9c4 <_svfiprintf_r+0x1a8>
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d0c5      	beq.n	800e94c <_svfiprintf_r+0x130>
 800e9c0:	9105      	str	r1, [sp, #20]
 800e9c2:	e7c3      	b.n	800e94c <_svfiprintf_r+0x130>
 800e9c4:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9c8:	4604      	mov	r4, r0
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	e7f0      	b.n	800e9b0 <_svfiprintf_r+0x194>
 800e9ce:	ab03      	add	r3, sp, #12
 800e9d0:	9300      	str	r3, [sp, #0]
 800e9d2:	462a      	mov	r2, r5
 800e9d4:	4b0f      	ldr	r3, [pc, #60]	; (800ea14 <_svfiprintf_r+0x1f8>)
 800e9d6:	a904      	add	r1, sp, #16
 800e9d8:	4638      	mov	r0, r7
 800e9da:	f7fd ffcb 	bl	800c974 <_printf_float>
 800e9de:	1c42      	adds	r2, r0, #1
 800e9e0:	4606      	mov	r6, r0
 800e9e2:	d1d6      	bne.n	800e992 <_svfiprintf_r+0x176>
 800e9e4:	89ab      	ldrh	r3, [r5, #12]
 800e9e6:	065b      	lsls	r3, r3, #25
 800e9e8:	f53f af2c 	bmi.w	800e844 <_svfiprintf_r+0x28>
 800e9ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e9ee:	b01d      	add	sp, #116	; 0x74
 800e9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9f4:	ab03      	add	r3, sp, #12
 800e9f6:	9300      	str	r3, [sp, #0]
 800e9f8:	462a      	mov	r2, r5
 800e9fa:	4b06      	ldr	r3, [pc, #24]	; (800ea14 <_svfiprintf_r+0x1f8>)
 800e9fc:	a904      	add	r1, sp, #16
 800e9fe:	4638      	mov	r0, r7
 800ea00:	f7fe fa5c 	bl	800cebc <_printf_i>
 800ea04:	e7eb      	b.n	800e9de <_svfiprintf_r+0x1c2>
 800ea06:	bf00      	nop
 800ea08:	08010794 	.word	0x08010794
 800ea0c:	0801079e 	.word	0x0801079e
 800ea10:	0800c975 	.word	0x0800c975
 800ea14:	0800e765 	.word	0x0800e765
 800ea18:	0801079a 	.word	0x0801079a

0800ea1c <_sbrk_r>:
 800ea1c:	b538      	push	{r3, r4, r5, lr}
 800ea1e:	4d06      	ldr	r5, [pc, #24]	; (800ea38 <_sbrk_r+0x1c>)
 800ea20:	2300      	movs	r3, #0
 800ea22:	4604      	mov	r4, r0
 800ea24:	4608      	mov	r0, r1
 800ea26:	602b      	str	r3, [r5, #0]
 800ea28:	f7f5 ff64 	bl	80048f4 <_sbrk>
 800ea2c:	1c43      	adds	r3, r0, #1
 800ea2e:	d102      	bne.n	800ea36 <_sbrk_r+0x1a>
 800ea30:	682b      	ldr	r3, [r5, #0]
 800ea32:	b103      	cbz	r3, 800ea36 <_sbrk_r+0x1a>
 800ea34:	6023      	str	r3, [r4, #0]
 800ea36:	bd38      	pop	{r3, r4, r5, pc}
 800ea38:	200036e8 	.word	0x200036e8

0800ea3c <__assert_func>:
 800ea3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ea3e:	4614      	mov	r4, r2
 800ea40:	461a      	mov	r2, r3
 800ea42:	4b09      	ldr	r3, [pc, #36]	; (800ea68 <__assert_func+0x2c>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	4605      	mov	r5, r0
 800ea48:	68d8      	ldr	r0, [r3, #12]
 800ea4a:	b14c      	cbz	r4, 800ea60 <__assert_func+0x24>
 800ea4c:	4b07      	ldr	r3, [pc, #28]	; (800ea6c <__assert_func+0x30>)
 800ea4e:	9100      	str	r1, [sp, #0]
 800ea50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ea54:	4906      	ldr	r1, [pc, #24]	; (800ea70 <__assert_func+0x34>)
 800ea56:	462b      	mov	r3, r5
 800ea58:	f000 f80e 	bl	800ea78 <fiprintf>
 800ea5c:	f000 faac 	bl	800efb8 <abort>
 800ea60:	4b04      	ldr	r3, [pc, #16]	; (800ea74 <__assert_func+0x38>)
 800ea62:	461c      	mov	r4, r3
 800ea64:	e7f3      	b.n	800ea4e <__assert_func+0x12>
 800ea66:	bf00      	nop
 800ea68:	200002a0 	.word	0x200002a0
 800ea6c:	080107a5 	.word	0x080107a5
 800ea70:	080107b2 	.word	0x080107b2
 800ea74:	080107e0 	.word	0x080107e0

0800ea78 <fiprintf>:
 800ea78:	b40e      	push	{r1, r2, r3}
 800ea7a:	b503      	push	{r0, r1, lr}
 800ea7c:	4601      	mov	r1, r0
 800ea7e:	ab03      	add	r3, sp, #12
 800ea80:	4805      	ldr	r0, [pc, #20]	; (800ea98 <fiprintf+0x20>)
 800ea82:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea86:	6800      	ldr	r0, [r0, #0]
 800ea88:	9301      	str	r3, [sp, #4]
 800ea8a:	f000 f897 	bl	800ebbc <_vfiprintf_r>
 800ea8e:	b002      	add	sp, #8
 800ea90:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea94:	b003      	add	sp, #12
 800ea96:	4770      	bx	lr
 800ea98:	200002a0 	.word	0x200002a0

0800ea9c <__ascii_mbtowc>:
 800ea9c:	b082      	sub	sp, #8
 800ea9e:	b901      	cbnz	r1, 800eaa2 <__ascii_mbtowc+0x6>
 800eaa0:	a901      	add	r1, sp, #4
 800eaa2:	b142      	cbz	r2, 800eab6 <__ascii_mbtowc+0x1a>
 800eaa4:	b14b      	cbz	r3, 800eaba <__ascii_mbtowc+0x1e>
 800eaa6:	7813      	ldrb	r3, [r2, #0]
 800eaa8:	600b      	str	r3, [r1, #0]
 800eaaa:	7812      	ldrb	r2, [r2, #0]
 800eaac:	1e10      	subs	r0, r2, #0
 800eaae:	bf18      	it	ne
 800eab0:	2001      	movne	r0, #1
 800eab2:	b002      	add	sp, #8
 800eab4:	4770      	bx	lr
 800eab6:	4610      	mov	r0, r2
 800eab8:	e7fb      	b.n	800eab2 <__ascii_mbtowc+0x16>
 800eaba:	f06f 0001 	mvn.w	r0, #1
 800eabe:	e7f8      	b.n	800eab2 <__ascii_mbtowc+0x16>

0800eac0 <memmove>:
 800eac0:	4288      	cmp	r0, r1
 800eac2:	b510      	push	{r4, lr}
 800eac4:	eb01 0402 	add.w	r4, r1, r2
 800eac8:	d902      	bls.n	800ead0 <memmove+0x10>
 800eaca:	4284      	cmp	r4, r0
 800eacc:	4623      	mov	r3, r4
 800eace:	d807      	bhi.n	800eae0 <memmove+0x20>
 800ead0:	1e43      	subs	r3, r0, #1
 800ead2:	42a1      	cmp	r1, r4
 800ead4:	d008      	beq.n	800eae8 <memmove+0x28>
 800ead6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eada:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eade:	e7f8      	b.n	800ead2 <memmove+0x12>
 800eae0:	4402      	add	r2, r0
 800eae2:	4601      	mov	r1, r0
 800eae4:	428a      	cmp	r2, r1
 800eae6:	d100      	bne.n	800eaea <memmove+0x2a>
 800eae8:	bd10      	pop	{r4, pc}
 800eaea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eaee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eaf2:	e7f7      	b.n	800eae4 <memmove+0x24>

0800eaf4 <__malloc_lock>:
 800eaf4:	4801      	ldr	r0, [pc, #4]	; (800eafc <__malloc_lock+0x8>)
 800eaf6:	f000 bc1f 	b.w	800f338 <__retarget_lock_acquire_recursive>
 800eafa:	bf00      	nop
 800eafc:	200036ec 	.word	0x200036ec

0800eb00 <__malloc_unlock>:
 800eb00:	4801      	ldr	r0, [pc, #4]	; (800eb08 <__malloc_unlock+0x8>)
 800eb02:	f000 bc1a 	b.w	800f33a <__retarget_lock_release_recursive>
 800eb06:	bf00      	nop
 800eb08:	200036ec 	.word	0x200036ec

0800eb0c <_realloc_r>:
 800eb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb10:	4680      	mov	r8, r0
 800eb12:	4614      	mov	r4, r2
 800eb14:	460e      	mov	r6, r1
 800eb16:	b921      	cbnz	r1, 800eb22 <_realloc_r+0x16>
 800eb18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb1c:	4611      	mov	r1, r2
 800eb1e:	f7ff bdad 	b.w	800e67c <_malloc_r>
 800eb22:	b92a      	cbnz	r2, 800eb30 <_realloc_r+0x24>
 800eb24:	f7ff fd3e 	bl	800e5a4 <_free_r>
 800eb28:	4625      	mov	r5, r4
 800eb2a:	4628      	mov	r0, r5
 800eb2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb30:	f000 fc6a 	bl	800f408 <_malloc_usable_size_r>
 800eb34:	4284      	cmp	r4, r0
 800eb36:	4607      	mov	r7, r0
 800eb38:	d802      	bhi.n	800eb40 <_realloc_r+0x34>
 800eb3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800eb3e:	d812      	bhi.n	800eb66 <_realloc_r+0x5a>
 800eb40:	4621      	mov	r1, r4
 800eb42:	4640      	mov	r0, r8
 800eb44:	f7ff fd9a 	bl	800e67c <_malloc_r>
 800eb48:	4605      	mov	r5, r0
 800eb4a:	2800      	cmp	r0, #0
 800eb4c:	d0ed      	beq.n	800eb2a <_realloc_r+0x1e>
 800eb4e:	42bc      	cmp	r4, r7
 800eb50:	4622      	mov	r2, r4
 800eb52:	4631      	mov	r1, r6
 800eb54:	bf28      	it	cs
 800eb56:	463a      	movcs	r2, r7
 800eb58:	f7ff f97c 	bl	800de54 <memcpy>
 800eb5c:	4631      	mov	r1, r6
 800eb5e:	4640      	mov	r0, r8
 800eb60:	f7ff fd20 	bl	800e5a4 <_free_r>
 800eb64:	e7e1      	b.n	800eb2a <_realloc_r+0x1e>
 800eb66:	4635      	mov	r5, r6
 800eb68:	e7df      	b.n	800eb2a <_realloc_r+0x1e>

0800eb6a <__sfputc_r>:
 800eb6a:	6893      	ldr	r3, [r2, #8]
 800eb6c:	3b01      	subs	r3, #1
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	b410      	push	{r4}
 800eb72:	6093      	str	r3, [r2, #8]
 800eb74:	da08      	bge.n	800eb88 <__sfputc_r+0x1e>
 800eb76:	6994      	ldr	r4, [r2, #24]
 800eb78:	42a3      	cmp	r3, r4
 800eb7a:	db01      	blt.n	800eb80 <__sfputc_r+0x16>
 800eb7c:	290a      	cmp	r1, #10
 800eb7e:	d103      	bne.n	800eb88 <__sfputc_r+0x1e>
 800eb80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb84:	f000 b94a 	b.w	800ee1c <__swbuf_r>
 800eb88:	6813      	ldr	r3, [r2, #0]
 800eb8a:	1c58      	adds	r0, r3, #1
 800eb8c:	6010      	str	r0, [r2, #0]
 800eb8e:	7019      	strb	r1, [r3, #0]
 800eb90:	4608      	mov	r0, r1
 800eb92:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb96:	4770      	bx	lr

0800eb98 <__sfputs_r>:
 800eb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb9a:	4606      	mov	r6, r0
 800eb9c:	460f      	mov	r7, r1
 800eb9e:	4614      	mov	r4, r2
 800eba0:	18d5      	adds	r5, r2, r3
 800eba2:	42ac      	cmp	r4, r5
 800eba4:	d101      	bne.n	800ebaa <__sfputs_r+0x12>
 800eba6:	2000      	movs	r0, #0
 800eba8:	e007      	b.n	800ebba <__sfputs_r+0x22>
 800ebaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebae:	463a      	mov	r2, r7
 800ebb0:	4630      	mov	r0, r6
 800ebb2:	f7ff ffda 	bl	800eb6a <__sfputc_r>
 800ebb6:	1c43      	adds	r3, r0, #1
 800ebb8:	d1f3      	bne.n	800eba2 <__sfputs_r+0xa>
 800ebba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ebbc <_vfiprintf_r>:
 800ebbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc0:	460d      	mov	r5, r1
 800ebc2:	b09d      	sub	sp, #116	; 0x74
 800ebc4:	4614      	mov	r4, r2
 800ebc6:	4698      	mov	r8, r3
 800ebc8:	4606      	mov	r6, r0
 800ebca:	b118      	cbz	r0, 800ebd4 <_vfiprintf_r+0x18>
 800ebcc:	6983      	ldr	r3, [r0, #24]
 800ebce:	b90b      	cbnz	r3, 800ebd4 <_vfiprintf_r+0x18>
 800ebd0:	f000 fb14 	bl	800f1fc <__sinit>
 800ebd4:	4b89      	ldr	r3, [pc, #548]	; (800edfc <_vfiprintf_r+0x240>)
 800ebd6:	429d      	cmp	r5, r3
 800ebd8:	d11b      	bne.n	800ec12 <_vfiprintf_r+0x56>
 800ebda:	6875      	ldr	r5, [r6, #4]
 800ebdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebde:	07d9      	lsls	r1, r3, #31
 800ebe0:	d405      	bmi.n	800ebee <_vfiprintf_r+0x32>
 800ebe2:	89ab      	ldrh	r3, [r5, #12]
 800ebe4:	059a      	lsls	r2, r3, #22
 800ebe6:	d402      	bmi.n	800ebee <_vfiprintf_r+0x32>
 800ebe8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebea:	f000 fba5 	bl	800f338 <__retarget_lock_acquire_recursive>
 800ebee:	89ab      	ldrh	r3, [r5, #12]
 800ebf0:	071b      	lsls	r3, r3, #28
 800ebf2:	d501      	bpl.n	800ebf8 <_vfiprintf_r+0x3c>
 800ebf4:	692b      	ldr	r3, [r5, #16]
 800ebf6:	b9eb      	cbnz	r3, 800ec34 <_vfiprintf_r+0x78>
 800ebf8:	4629      	mov	r1, r5
 800ebfa:	4630      	mov	r0, r6
 800ebfc:	f000 f96e 	bl	800eedc <__swsetup_r>
 800ec00:	b1c0      	cbz	r0, 800ec34 <_vfiprintf_r+0x78>
 800ec02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec04:	07dc      	lsls	r4, r3, #31
 800ec06:	d50e      	bpl.n	800ec26 <_vfiprintf_r+0x6a>
 800ec08:	f04f 30ff 	mov.w	r0, #4294967295
 800ec0c:	b01d      	add	sp, #116	; 0x74
 800ec0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec12:	4b7b      	ldr	r3, [pc, #492]	; (800ee00 <_vfiprintf_r+0x244>)
 800ec14:	429d      	cmp	r5, r3
 800ec16:	d101      	bne.n	800ec1c <_vfiprintf_r+0x60>
 800ec18:	68b5      	ldr	r5, [r6, #8]
 800ec1a:	e7df      	b.n	800ebdc <_vfiprintf_r+0x20>
 800ec1c:	4b79      	ldr	r3, [pc, #484]	; (800ee04 <_vfiprintf_r+0x248>)
 800ec1e:	429d      	cmp	r5, r3
 800ec20:	bf08      	it	eq
 800ec22:	68f5      	ldreq	r5, [r6, #12]
 800ec24:	e7da      	b.n	800ebdc <_vfiprintf_r+0x20>
 800ec26:	89ab      	ldrh	r3, [r5, #12]
 800ec28:	0598      	lsls	r0, r3, #22
 800ec2a:	d4ed      	bmi.n	800ec08 <_vfiprintf_r+0x4c>
 800ec2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec2e:	f000 fb84 	bl	800f33a <__retarget_lock_release_recursive>
 800ec32:	e7e9      	b.n	800ec08 <_vfiprintf_r+0x4c>
 800ec34:	2300      	movs	r3, #0
 800ec36:	9309      	str	r3, [sp, #36]	; 0x24
 800ec38:	2320      	movs	r3, #32
 800ec3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec3e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec42:	2330      	movs	r3, #48	; 0x30
 800ec44:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ee08 <_vfiprintf_r+0x24c>
 800ec48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec4c:	f04f 0901 	mov.w	r9, #1
 800ec50:	4623      	mov	r3, r4
 800ec52:	469a      	mov	sl, r3
 800ec54:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec58:	b10a      	cbz	r2, 800ec5e <_vfiprintf_r+0xa2>
 800ec5a:	2a25      	cmp	r2, #37	; 0x25
 800ec5c:	d1f9      	bne.n	800ec52 <_vfiprintf_r+0x96>
 800ec5e:	ebba 0b04 	subs.w	fp, sl, r4
 800ec62:	d00b      	beq.n	800ec7c <_vfiprintf_r+0xc0>
 800ec64:	465b      	mov	r3, fp
 800ec66:	4622      	mov	r2, r4
 800ec68:	4629      	mov	r1, r5
 800ec6a:	4630      	mov	r0, r6
 800ec6c:	f7ff ff94 	bl	800eb98 <__sfputs_r>
 800ec70:	3001      	adds	r0, #1
 800ec72:	f000 80aa 	beq.w	800edca <_vfiprintf_r+0x20e>
 800ec76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec78:	445a      	add	r2, fp
 800ec7a:	9209      	str	r2, [sp, #36]	; 0x24
 800ec7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	f000 80a2 	beq.w	800edca <_vfiprintf_r+0x20e>
 800ec86:	2300      	movs	r3, #0
 800ec88:	f04f 32ff 	mov.w	r2, #4294967295
 800ec8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec90:	f10a 0a01 	add.w	sl, sl, #1
 800ec94:	9304      	str	r3, [sp, #16]
 800ec96:	9307      	str	r3, [sp, #28]
 800ec98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec9c:	931a      	str	r3, [sp, #104]	; 0x68
 800ec9e:	4654      	mov	r4, sl
 800eca0:	2205      	movs	r2, #5
 800eca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eca6:	4858      	ldr	r0, [pc, #352]	; (800ee08 <_vfiprintf_r+0x24c>)
 800eca8:	f7f1 faa2 	bl	80001f0 <memchr>
 800ecac:	9a04      	ldr	r2, [sp, #16]
 800ecae:	b9d8      	cbnz	r0, 800ece8 <_vfiprintf_r+0x12c>
 800ecb0:	06d1      	lsls	r1, r2, #27
 800ecb2:	bf44      	itt	mi
 800ecb4:	2320      	movmi	r3, #32
 800ecb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecba:	0713      	lsls	r3, r2, #28
 800ecbc:	bf44      	itt	mi
 800ecbe:	232b      	movmi	r3, #43	; 0x2b
 800ecc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecc4:	f89a 3000 	ldrb.w	r3, [sl]
 800ecc8:	2b2a      	cmp	r3, #42	; 0x2a
 800ecca:	d015      	beq.n	800ecf8 <_vfiprintf_r+0x13c>
 800eccc:	9a07      	ldr	r2, [sp, #28]
 800ecce:	4654      	mov	r4, sl
 800ecd0:	2000      	movs	r0, #0
 800ecd2:	f04f 0c0a 	mov.w	ip, #10
 800ecd6:	4621      	mov	r1, r4
 800ecd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecdc:	3b30      	subs	r3, #48	; 0x30
 800ecde:	2b09      	cmp	r3, #9
 800ece0:	d94e      	bls.n	800ed80 <_vfiprintf_r+0x1c4>
 800ece2:	b1b0      	cbz	r0, 800ed12 <_vfiprintf_r+0x156>
 800ece4:	9207      	str	r2, [sp, #28]
 800ece6:	e014      	b.n	800ed12 <_vfiprintf_r+0x156>
 800ece8:	eba0 0308 	sub.w	r3, r0, r8
 800ecec:	fa09 f303 	lsl.w	r3, r9, r3
 800ecf0:	4313      	orrs	r3, r2
 800ecf2:	9304      	str	r3, [sp, #16]
 800ecf4:	46a2      	mov	sl, r4
 800ecf6:	e7d2      	b.n	800ec9e <_vfiprintf_r+0xe2>
 800ecf8:	9b03      	ldr	r3, [sp, #12]
 800ecfa:	1d19      	adds	r1, r3, #4
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	9103      	str	r1, [sp, #12]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	bfbb      	ittet	lt
 800ed04:	425b      	neglt	r3, r3
 800ed06:	f042 0202 	orrlt.w	r2, r2, #2
 800ed0a:	9307      	strge	r3, [sp, #28]
 800ed0c:	9307      	strlt	r3, [sp, #28]
 800ed0e:	bfb8      	it	lt
 800ed10:	9204      	strlt	r2, [sp, #16]
 800ed12:	7823      	ldrb	r3, [r4, #0]
 800ed14:	2b2e      	cmp	r3, #46	; 0x2e
 800ed16:	d10c      	bne.n	800ed32 <_vfiprintf_r+0x176>
 800ed18:	7863      	ldrb	r3, [r4, #1]
 800ed1a:	2b2a      	cmp	r3, #42	; 0x2a
 800ed1c:	d135      	bne.n	800ed8a <_vfiprintf_r+0x1ce>
 800ed1e:	9b03      	ldr	r3, [sp, #12]
 800ed20:	1d1a      	adds	r2, r3, #4
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	9203      	str	r2, [sp, #12]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	bfb8      	it	lt
 800ed2a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed2e:	3402      	adds	r4, #2
 800ed30:	9305      	str	r3, [sp, #20]
 800ed32:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ee18 <_vfiprintf_r+0x25c>
 800ed36:	7821      	ldrb	r1, [r4, #0]
 800ed38:	2203      	movs	r2, #3
 800ed3a:	4650      	mov	r0, sl
 800ed3c:	f7f1 fa58 	bl	80001f0 <memchr>
 800ed40:	b140      	cbz	r0, 800ed54 <_vfiprintf_r+0x198>
 800ed42:	2340      	movs	r3, #64	; 0x40
 800ed44:	eba0 000a 	sub.w	r0, r0, sl
 800ed48:	fa03 f000 	lsl.w	r0, r3, r0
 800ed4c:	9b04      	ldr	r3, [sp, #16]
 800ed4e:	4303      	orrs	r3, r0
 800ed50:	3401      	adds	r4, #1
 800ed52:	9304      	str	r3, [sp, #16]
 800ed54:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed58:	482c      	ldr	r0, [pc, #176]	; (800ee0c <_vfiprintf_r+0x250>)
 800ed5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed5e:	2206      	movs	r2, #6
 800ed60:	f7f1 fa46 	bl	80001f0 <memchr>
 800ed64:	2800      	cmp	r0, #0
 800ed66:	d03f      	beq.n	800ede8 <_vfiprintf_r+0x22c>
 800ed68:	4b29      	ldr	r3, [pc, #164]	; (800ee10 <_vfiprintf_r+0x254>)
 800ed6a:	bb1b      	cbnz	r3, 800edb4 <_vfiprintf_r+0x1f8>
 800ed6c:	9b03      	ldr	r3, [sp, #12]
 800ed6e:	3307      	adds	r3, #7
 800ed70:	f023 0307 	bic.w	r3, r3, #7
 800ed74:	3308      	adds	r3, #8
 800ed76:	9303      	str	r3, [sp, #12]
 800ed78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed7a:	443b      	add	r3, r7
 800ed7c:	9309      	str	r3, [sp, #36]	; 0x24
 800ed7e:	e767      	b.n	800ec50 <_vfiprintf_r+0x94>
 800ed80:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed84:	460c      	mov	r4, r1
 800ed86:	2001      	movs	r0, #1
 800ed88:	e7a5      	b.n	800ecd6 <_vfiprintf_r+0x11a>
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	3401      	adds	r4, #1
 800ed8e:	9305      	str	r3, [sp, #20]
 800ed90:	4619      	mov	r1, r3
 800ed92:	f04f 0c0a 	mov.w	ip, #10
 800ed96:	4620      	mov	r0, r4
 800ed98:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed9c:	3a30      	subs	r2, #48	; 0x30
 800ed9e:	2a09      	cmp	r2, #9
 800eda0:	d903      	bls.n	800edaa <_vfiprintf_r+0x1ee>
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d0c5      	beq.n	800ed32 <_vfiprintf_r+0x176>
 800eda6:	9105      	str	r1, [sp, #20]
 800eda8:	e7c3      	b.n	800ed32 <_vfiprintf_r+0x176>
 800edaa:	fb0c 2101 	mla	r1, ip, r1, r2
 800edae:	4604      	mov	r4, r0
 800edb0:	2301      	movs	r3, #1
 800edb2:	e7f0      	b.n	800ed96 <_vfiprintf_r+0x1da>
 800edb4:	ab03      	add	r3, sp, #12
 800edb6:	9300      	str	r3, [sp, #0]
 800edb8:	462a      	mov	r2, r5
 800edba:	4b16      	ldr	r3, [pc, #88]	; (800ee14 <_vfiprintf_r+0x258>)
 800edbc:	a904      	add	r1, sp, #16
 800edbe:	4630      	mov	r0, r6
 800edc0:	f7fd fdd8 	bl	800c974 <_printf_float>
 800edc4:	4607      	mov	r7, r0
 800edc6:	1c78      	adds	r0, r7, #1
 800edc8:	d1d6      	bne.n	800ed78 <_vfiprintf_r+0x1bc>
 800edca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edcc:	07d9      	lsls	r1, r3, #31
 800edce:	d405      	bmi.n	800eddc <_vfiprintf_r+0x220>
 800edd0:	89ab      	ldrh	r3, [r5, #12]
 800edd2:	059a      	lsls	r2, r3, #22
 800edd4:	d402      	bmi.n	800eddc <_vfiprintf_r+0x220>
 800edd6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edd8:	f000 faaf 	bl	800f33a <__retarget_lock_release_recursive>
 800eddc:	89ab      	ldrh	r3, [r5, #12]
 800edde:	065b      	lsls	r3, r3, #25
 800ede0:	f53f af12 	bmi.w	800ec08 <_vfiprintf_r+0x4c>
 800ede4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ede6:	e711      	b.n	800ec0c <_vfiprintf_r+0x50>
 800ede8:	ab03      	add	r3, sp, #12
 800edea:	9300      	str	r3, [sp, #0]
 800edec:	462a      	mov	r2, r5
 800edee:	4b09      	ldr	r3, [pc, #36]	; (800ee14 <_vfiprintf_r+0x258>)
 800edf0:	a904      	add	r1, sp, #16
 800edf2:	4630      	mov	r0, r6
 800edf4:	f7fe f862 	bl	800cebc <_printf_i>
 800edf8:	e7e4      	b.n	800edc4 <_vfiprintf_r+0x208>
 800edfa:	bf00      	nop
 800edfc:	0801090c 	.word	0x0801090c
 800ee00:	0801092c 	.word	0x0801092c
 800ee04:	080108ec 	.word	0x080108ec
 800ee08:	08010794 	.word	0x08010794
 800ee0c:	0801079e 	.word	0x0801079e
 800ee10:	0800c975 	.word	0x0800c975
 800ee14:	0800eb99 	.word	0x0800eb99
 800ee18:	0801079a 	.word	0x0801079a

0800ee1c <__swbuf_r>:
 800ee1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee1e:	460e      	mov	r6, r1
 800ee20:	4614      	mov	r4, r2
 800ee22:	4605      	mov	r5, r0
 800ee24:	b118      	cbz	r0, 800ee2e <__swbuf_r+0x12>
 800ee26:	6983      	ldr	r3, [r0, #24]
 800ee28:	b90b      	cbnz	r3, 800ee2e <__swbuf_r+0x12>
 800ee2a:	f000 f9e7 	bl	800f1fc <__sinit>
 800ee2e:	4b21      	ldr	r3, [pc, #132]	; (800eeb4 <__swbuf_r+0x98>)
 800ee30:	429c      	cmp	r4, r3
 800ee32:	d12b      	bne.n	800ee8c <__swbuf_r+0x70>
 800ee34:	686c      	ldr	r4, [r5, #4]
 800ee36:	69a3      	ldr	r3, [r4, #24]
 800ee38:	60a3      	str	r3, [r4, #8]
 800ee3a:	89a3      	ldrh	r3, [r4, #12]
 800ee3c:	071a      	lsls	r2, r3, #28
 800ee3e:	d52f      	bpl.n	800eea0 <__swbuf_r+0x84>
 800ee40:	6923      	ldr	r3, [r4, #16]
 800ee42:	b36b      	cbz	r3, 800eea0 <__swbuf_r+0x84>
 800ee44:	6923      	ldr	r3, [r4, #16]
 800ee46:	6820      	ldr	r0, [r4, #0]
 800ee48:	1ac0      	subs	r0, r0, r3
 800ee4a:	6963      	ldr	r3, [r4, #20]
 800ee4c:	b2f6      	uxtb	r6, r6
 800ee4e:	4283      	cmp	r3, r0
 800ee50:	4637      	mov	r7, r6
 800ee52:	dc04      	bgt.n	800ee5e <__swbuf_r+0x42>
 800ee54:	4621      	mov	r1, r4
 800ee56:	4628      	mov	r0, r5
 800ee58:	f000 f93c 	bl	800f0d4 <_fflush_r>
 800ee5c:	bb30      	cbnz	r0, 800eeac <__swbuf_r+0x90>
 800ee5e:	68a3      	ldr	r3, [r4, #8]
 800ee60:	3b01      	subs	r3, #1
 800ee62:	60a3      	str	r3, [r4, #8]
 800ee64:	6823      	ldr	r3, [r4, #0]
 800ee66:	1c5a      	adds	r2, r3, #1
 800ee68:	6022      	str	r2, [r4, #0]
 800ee6a:	701e      	strb	r6, [r3, #0]
 800ee6c:	6963      	ldr	r3, [r4, #20]
 800ee6e:	3001      	adds	r0, #1
 800ee70:	4283      	cmp	r3, r0
 800ee72:	d004      	beq.n	800ee7e <__swbuf_r+0x62>
 800ee74:	89a3      	ldrh	r3, [r4, #12]
 800ee76:	07db      	lsls	r3, r3, #31
 800ee78:	d506      	bpl.n	800ee88 <__swbuf_r+0x6c>
 800ee7a:	2e0a      	cmp	r6, #10
 800ee7c:	d104      	bne.n	800ee88 <__swbuf_r+0x6c>
 800ee7e:	4621      	mov	r1, r4
 800ee80:	4628      	mov	r0, r5
 800ee82:	f000 f927 	bl	800f0d4 <_fflush_r>
 800ee86:	b988      	cbnz	r0, 800eeac <__swbuf_r+0x90>
 800ee88:	4638      	mov	r0, r7
 800ee8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee8c:	4b0a      	ldr	r3, [pc, #40]	; (800eeb8 <__swbuf_r+0x9c>)
 800ee8e:	429c      	cmp	r4, r3
 800ee90:	d101      	bne.n	800ee96 <__swbuf_r+0x7a>
 800ee92:	68ac      	ldr	r4, [r5, #8]
 800ee94:	e7cf      	b.n	800ee36 <__swbuf_r+0x1a>
 800ee96:	4b09      	ldr	r3, [pc, #36]	; (800eebc <__swbuf_r+0xa0>)
 800ee98:	429c      	cmp	r4, r3
 800ee9a:	bf08      	it	eq
 800ee9c:	68ec      	ldreq	r4, [r5, #12]
 800ee9e:	e7ca      	b.n	800ee36 <__swbuf_r+0x1a>
 800eea0:	4621      	mov	r1, r4
 800eea2:	4628      	mov	r0, r5
 800eea4:	f000 f81a 	bl	800eedc <__swsetup_r>
 800eea8:	2800      	cmp	r0, #0
 800eeaa:	d0cb      	beq.n	800ee44 <__swbuf_r+0x28>
 800eeac:	f04f 37ff 	mov.w	r7, #4294967295
 800eeb0:	e7ea      	b.n	800ee88 <__swbuf_r+0x6c>
 800eeb2:	bf00      	nop
 800eeb4:	0801090c 	.word	0x0801090c
 800eeb8:	0801092c 	.word	0x0801092c
 800eebc:	080108ec 	.word	0x080108ec

0800eec0 <__ascii_wctomb>:
 800eec0:	b149      	cbz	r1, 800eed6 <__ascii_wctomb+0x16>
 800eec2:	2aff      	cmp	r2, #255	; 0xff
 800eec4:	bf85      	ittet	hi
 800eec6:	238a      	movhi	r3, #138	; 0x8a
 800eec8:	6003      	strhi	r3, [r0, #0]
 800eeca:	700a      	strbls	r2, [r1, #0]
 800eecc:	f04f 30ff 	movhi.w	r0, #4294967295
 800eed0:	bf98      	it	ls
 800eed2:	2001      	movls	r0, #1
 800eed4:	4770      	bx	lr
 800eed6:	4608      	mov	r0, r1
 800eed8:	4770      	bx	lr
	...

0800eedc <__swsetup_r>:
 800eedc:	4b32      	ldr	r3, [pc, #200]	; (800efa8 <__swsetup_r+0xcc>)
 800eede:	b570      	push	{r4, r5, r6, lr}
 800eee0:	681d      	ldr	r5, [r3, #0]
 800eee2:	4606      	mov	r6, r0
 800eee4:	460c      	mov	r4, r1
 800eee6:	b125      	cbz	r5, 800eef2 <__swsetup_r+0x16>
 800eee8:	69ab      	ldr	r3, [r5, #24]
 800eeea:	b913      	cbnz	r3, 800eef2 <__swsetup_r+0x16>
 800eeec:	4628      	mov	r0, r5
 800eeee:	f000 f985 	bl	800f1fc <__sinit>
 800eef2:	4b2e      	ldr	r3, [pc, #184]	; (800efac <__swsetup_r+0xd0>)
 800eef4:	429c      	cmp	r4, r3
 800eef6:	d10f      	bne.n	800ef18 <__swsetup_r+0x3c>
 800eef8:	686c      	ldr	r4, [r5, #4]
 800eefa:	89a3      	ldrh	r3, [r4, #12]
 800eefc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef00:	0719      	lsls	r1, r3, #28
 800ef02:	d42c      	bmi.n	800ef5e <__swsetup_r+0x82>
 800ef04:	06dd      	lsls	r5, r3, #27
 800ef06:	d411      	bmi.n	800ef2c <__swsetup_r+0x50>
 800ef08:	2309      	movs	r3, #9
 800ef0a:	6033      	str	r3, [r6, #0]
 800ef0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ef10:	81a3      	strh	r3, [r4, #12]
 800ef12:	f04f 30ff 	mov.w	r0, #4294967295
 800ef16:	e03e      	b.n	800ef96 <__swsetup_r+0xba>
 800ef18:	4b25      	ldr	r3, [pc, #148]	; (800efb0 <__swsetup_r+0xd4>)
 800ef1a:	429c      	cmp	r4, r3
 800ef1c:	d101      	bne.n	800ef22 <__swsetup_r+0x46>
 800ef1e:	68ac      	ldr	r4, [r5, #8]
 800ef20:	e7eb      	b.n	800eefa <__swsetup_r+0x1e>
 800ef22:	4b24      	ldr	r3, [pc, #144]	; (800efb4 <__swsetup_r+0xd8>)
 800ef24:	429c      	cmp	r4, r3
 800ef26:	bf08      	it	eq
 800ef28:	68ec      	ldreq	r4, [r5, #12]
 800ef2a:	e7e6      	b.n	800eefa <__swsetup_r+0x1e>
 800ef2c:	0758      	lsls	r0, r3, #29
 800ef2e:	d512      	bpl.n	800ef56 <__swsetup_r+0x7a>
 800ef30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef32:	b141      	cbz	r1, 800ef46 <__swsetup_r+0x6a>
 800ef34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef38:	4299      	cmp	r1, r3
 800ef3a:	d002      	beq.n	800ef42 <__swsetup_r+0x66>
 800ef3c:	4630      	mov	r0, r6
 800ef3e:	f7ff fb31 	bl	800e5a4 <_free_r>
 800ef42:	2300      	movs	r3, #0
 800ef44:	6363      	str	r3, [r4, #52]	; 0x34
 800ef46:	89a3      	ldrh	r3, [r4, #12]
 800ef48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef4c:	81a3      	strh	r3, [r4, #12]
 800ef4e:	2300      	movs	r3, #0
 800ef50:	6063      	str	r3, [r4, #4]
 800ef52:	6923      	ldr	r3, [r4, #16]
 800ef54:	6023      	str	r3, [r4, #0]
 800ef56:	89a3      	ldrh	r3, [r4, #12]
 800ef58:	f043 0308 	orr.w	r3, r3, #8
 800ef5c:	81a3      	strh	r3, [r4, #12]
 800ef5e:	6923      	ldr	r3, [r4, #16]
 800ef60:	b94b      	cbnz	r3, 800ef76 <__swsetup_r+0x9a>
 800ef62:	89a3      	ldrh	r3, [r4, #12]
 800ef64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef6c:	d003      	beq.n	800ef76 <__swsetup_r+0x9a>
 800ef6e:	4621      	mov	r1, r4
 800ef70:	4630      	mov	r0, r6
 800ef72:	f000 fa09 	bl	800f388 <__smakebuf_r>
 800ef76:	89a0      	ldrh	r0, [r4, #12]
 800ef78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef7c:	f010 0301 	ands.w	r3, r0, #1
 800ef80:	d00a      	beq.n	800ef98 <__swsetup_r+0xbc>
 800ef82:	2300      	movs	r3, #0
 800ef84:	60a3      	str	r3, [r4, #8]
 800ef86:	6963      	ldr	r3, [r4, #20]
 800ef88:	425b      	negs	r3, r3
 800ef8a:	61a3      	str	r3, [r4, #24]
 800ef8c:	6923      	ldr	r3, [r4, #16]
 800ef8e:	b943      	cbnz	r3, 800efa2 <__swsetup_r+0xc6>
 800ef90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef94:	d1ba      	bne.n	800ef0c <__swsetup_r+0x30>
 800ef96:	bd70      	pop	{r4, r5, r6, pc}
 800ef98:	0781      	lsls	r1, r0, #30
 800ef9a:	bf58      	it	pl
 800ef9c:	6963      	ldrpl	r3, [r4, #20]
 800ef9e:	60a3      	str	r3, [r4, #8]
 800efa0:	e7f4      	b.n	800ef8c <__swsetup_r+0xb0>
 800efa2:	2000      	movs	r0, #0
 800efa4:	e7f7      	b.n	800ef96 <__swsetup_r+0xba>
 800efa6:	bf00      	nop
 800efa8:	200002a0 	.word	0x200002a0
 800efac:	0801090c 	.word	0x0801090c
 800efb0:	0801092c 	.word	0x0801092c
 800efb4:	080108ec 	.word	0x080108ec

0800efb8 <abort>:
 800efb8:	b508      	push	{r3, lr}
 800efba:	2006      	movs	r0, #6
 800efbc:	f000 fa54 	bl	800f468 <raise>
 800efc0:	2001      	movs	r0, #1
 800efc2:	f7f5 fc1f 	bl	8004804 <_exit>
	...

0800efc8 <__sflush_r>:
 800efc8:	898a      	ldrh	r2, [r1, #12]
 800efca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efce:	4605      	mov	r5, r0
 800efd0:	0710      	lsls	r0, r2, #28
 800efd2:	460c      	mov	r4, r1
 800efd4:	d458      	bmi.n	800f088 <__sflush_r+0xc0>
 800efd6:	684b      	ldr	r3, [r1, #4]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	dc05      	bgt.n	800efe8 <__sflush_r+0x20>
 800efdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800efde:	2b00      	cmp	r3, #0
 800efe0:	dc02      	bgt.n	800efe8 <__sflush_r+0x20>
 800efe2:	2000      	movs	r0, #0
 800efe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efea:	2e00      	cmp	r6, #0
 800efec:	d0f9      	beq.n	800efe2 <__sflush_r+0x1a>
 800efee:	2300      	movs	r3, #0
 800eff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eff4:	682f      	ldr	r7, [r5, #0]
 800eff6:	602b      	str	r3, [r5, #0]
 800eff8:	d032      	beq.n	800f060 <__sflush_r+0x98>
 800effa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800effc:	89a3      	ldrh	r3, [r4, #12]
 800effe:	075a      	lsls	r2, r3, #29
 800f000:	d505      	bpl.n	800f00e <__sflush_r+0x46>
 800f002:	6863      	ldr	r3, [r4, #4]
 800f004:	1ac0      	subs	r0, r0, r3
 800f006:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f008:	b10b      	cbz	r3, 800f00e <__sflush_r+0x46>
 800f00a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f00c:	1ac0      	subs	r0, r0, r3
 800f00e:	2300      	movs	r3, #0
 800f010:	4602      	mov	r2, r0
 800f012:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f014:	6a21      	ldr	r1, [r4, #32]
 800f016:	4628      	mov	r0, r5
 800f018:	47b0      	blx	r6
 800f01a:	1c43      	adds	r3, r0, #1
 800f01c:	89a3      	ldrh	r3, [r4, #12]
 800f01e:	d106      	bne.n	800f02e <__sflush_r+0x66>
 800f020:	6829      	ldr	r1, [r5, #0]
 800f022:	291d      	cmp	r1, #29
 800f024:	d82c      	bhi.n	800f080 <__sflush_r+0xb8>
 800f026:	4a2a      	ldr	r2, [pc, #168]	; (800f0d0 <__sflush_r+0x108>)
 800f028:	40ca      	lsrs	r2, r1
 800f02a:	07d6      	lsls	r6, r2, #31
 800f02c:	d528      	bpl.n	800f080 <__sflush_r+0xb8>
 800f02e:	2200      	movs	r2, #0
 800f030:	6062      	str	r2, [r4, #4]
 800f032:	04d9      	lsls	r1, r3, #19
 800f034:	6922      	ldr	r2, [r4, #16]
 800f036:	6022      	str	r2, [r4, #0]
 800f038:	d504      	bpl.n	800f044 <__sflush_r+0x7c>
 800f03a:	1c42      	adds	r2, r0, #1
 800f03c:	d101      	bne.n	800f042 <__sflush_r+0x7a>
 800f03e:	682b      	ldr	r3, [r5, #0]
 800f040:	b903      	cbnz	r3, 800f044 <__sflush_r+0x7c>
 800f042:	6560      	str	r0, [r4, #84]	; 0x54
 800f044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f046:	602f      	str	r7, [r5, #0]
 800f048:	2900      	cmp	r1, #0
 800f04a:	d0ca      	beq.n	800efe2 <__sflush_r+0x1a>
 800f04c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f050:	4299      	cmp	r1, r3
 800f052:	d002      	beq.n	800f05a <__sflush_r+0x92>
 800f054:	4628      	mov	r0, r5
 800f056:	f7ff faa5 	bl	800e5a4 <_free_r>
 800f05a:	2000      	movs	r0, #0
 800f05c:	6360      	str	r0, [r4, #52]	; 0x34
 800f05e:	e7c1      	b.n	800efe4 <__sflush_r+0x1c>
 800f060:	6a21      	ldr	r1, [r4, #32]
 800f062:	2301      	movs	r3, #1
 800f064:	4628      	mov	r0, r5
 800f066:	47b0      	blx	r6
 800f068:	1c41      	adds	r1, r0, #1
 800f06a:	d1c7      	bne.n	800effc <__sflush_r+0x34>
 800f06c:	682b      	ldr	r3, [r5, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d0c4      	beq.n	800effc <__sflush_r+0x34>
 800f072:	2b1d      	cmp	r3, #29
 800f074:	d001      	beq.n	800f07a <__sflush_r+0xb2>
 800f076:	2b16      	cmp	r3, #22
 800f078:	d101      	bne.n	800f07e <__sflush_r+0xb6>
 800f07a:	602f      	str	r7, [r5, #0]
 800f07c:	e7b1      	b.n	800efe2 <__sflush_r+0x1a>
 800f07e:	89a3      	ldrh	r3, [r4, #12]
 800f080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f084:	81a3      	strh	r3, [r4, #12]
 800f086:	e7ad      	b.n	800efe4 <__sflush_r+0x1c>
 800f088:	690f      	ldr	r7, [r1, #16]
 800f08a:	2f00      	cmp	r7, #0
 800f08c:	d0a9      	beq.n	800efe2 <__sflush_r+0x1a>
 800f08e:	0793      	lsls	r3, r2, #30
 800f090:	680e      	ldr	r6, [r1, #0]
 800f092:	bf08      	it	eq
 800f094:	694b      	ldreq	r3, [r1, #20]
 800f096:	600f      	str	r7, [r1, #0]
 800f098:	bf18      	it	ne
 800f09a:	2300      	movne	r3, #0
 800f09c:	eba6 0807 	sub.w	r8, r6, r7
 800f0a0:	608b      	str	r3, [r1, #8]
 800f0a2:	f1b8 0f00 	cmp.w	r8, #0
 800f0a6:	dd9c      	ble.n	800efe2 <__sflush_r+0x1a>
 800f0a8:	6a21      	ldr	r1, [r4, #32]
 800f0aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f0ac:	4643      	mov	r3, r8
 800f0ae:	463a      	mov	r2, r7
 800f0b0:	4628      	mov	r0, r5
 800f0b2:	47b0      	blx	r6
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	dc06      	bgt.n	800f0c6 <__sflush_r+0xfe>
 800f0b8:	89a3      	ldrh	r3, [r4, #12]
 800f0ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0be:	81a3      	strh	r3, [r4, #12]
 800f0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c4:	e78e      	b.n	800efe4 <__sflush_r+0x1c>
 800f0c6:	4407      	add	r7, r0
 800f0c8:	eba8 0800 	sub.w	r8, r8, r0
 800f0cc:	e7e9      	b.n	800f0a2 <__sflush_r+0xda>
 800f0ce:	bf00      	nop
 800f0d0:	20400001 	.word	0x20400001

0800f0d4 <_fflush_r>:
 800f0d4:	b538      	push	{r3, r4, r5, lr}
 800f0d6:	690b      	ldr	r3, [r1, #16]
 800f0d8:	4605      	mov	r5, r0
 800f0da:	460c      	mov	r4, r1
 800f0dc:	b913      	cbnz	r3, 800f0e4 <_fflush_r+0x10>
 800f0de:	2500      	movs	r5, #0
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	bd38      	pop	{r3, r4, r5, pc}
 800f0e4:	b118      	cbz	r0, 800f0ee <_fflush_r+0x1a>
 800f0e6:	6983      	ldr	r3, [r0, #24]
 800f0e8:	b90b      	cbnz	r3, 800f0ee <_fflush_r+0x1a>
 800f0ea:	f000 f887 	bl	800f1fc <__sinit>
 800f0ee:	4b14      	ldr	r3, [pc, #80]	; (800f140 <_fflush_r+0x6c>)
 800f0f0:	429c      	cmp	r4, r3
 800f0f2:	d11b      	bne.n	800f12c <_fflush_r+0x58>
 800f0f4:	686c      	ldr	r4, [r5, #4]
 800f0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d0ef      	beq.n	800f0de <_fflush_r+0xa>
 800f0fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f100:	07d0      	lsls	r0, r2, #31
 800f102:	d404      	bmi.n	800f10e <_fflush_r+0x3a>
 800f104:	0599      	lsls	r1, r3, #22
 800f106:	d402      	bmi.n	800f10e <_fflush_r+0x3a>
 800f108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f10a:	f000 f915 	bl	800f338 <__retarget_lock_acquire_recursive>
 800f10e:	4628      	mov	r0, r5
 800f110:	4621      	mov	r1, r4
 800f112:	f7ff ff59 	bl	800efc8 <__sflush_r>
 800f116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f118:	07da      	lsls	r2, r3, #31
 800f11a:	4605      	mov	r5, r0
 800f11c:	d4e0      	bmi.n	800f0e0 <_fflush_r+0xc>
 800f11e:	89a3      	ldrh	r3, [r4, #12]
 800f120:	059b      	lsls	r3, r3, #22
 800f122:	d4dd      	bmi.n	800f0e0 <_fflush_r+0xc>
 800f124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f126:	f000 f908 	bl	800f33a <__retarget_lock_release_recursive>
 800f12a:	e7d9      	b.n	800f0e0 <_fflush_r+0xc>
 800f12c:	4b05      	ldr	r3, [pc, #20]	; (800f144 <_fflush_r+0x70>)
 800f12e:	429c      	cmp	r4, r3
 800f130:	d101      	bne.n	800f136 <_fflush_r+0x62>
 800f132:	68ac      	ldr	r4, [r5, #8]
 800f134:	e7df      	b.n	800f0f6 <_fflush_r+0x22>
 800f136:	4b04      	ldr	r3, [pc, #16]	; (800f148 <_fflush_r+0x74>)
 800f138:	429c      	cmp	r4, r3
 800f13a:	bf08      	it	eq
 800f13c:	68ec      	ldreq	r4, [r5, #12]
 800f13e:	e7da      	b.n	800f0f6 <_fflush_r+0x22>
 800f140:	0801090c 	.word	0x0801090c
 800f144:	0801092c 	.word	0x0801092c
 800f148:	080108ec 	.word	0x080108ec

0800f14c <std>:
 800f14c:	2300      	movs	r3, #0
 800f14e:	b510      	push	{r4, lr}
 800f150:	4604      	mov	r4, r0
 800f152:	e9c0 3300 	strd	r3, r3, [r0]
 800f156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f15a:	6083      	str	r3, [r0, #8]
 800f15c:	8181      	strh	r1, [r0, #12]
 800f15e:	6643      	str	r3, [r0, #100]	; 0x64
 800f160:	81c2      	strh	r2, [r0, #14]
 800f162:	6183      	str	r3, [r0, #24]
 800f164:	4619      	mov	r1, r3
 800f166:	2208      	movs	r2, #8
 800f168:	305c      	adds	r0, #92	; 0x5c
 800f16a:	f7fd fb5b 	bl	800c824 <memset>
 800f16e:	4b05      	ldr	r3, [pc, #20]	; (800f184 <std+0x38>)
 800f170:	6263      	str	r3, [r4, #36]	; 0x24
 800f172:	4b05      	ldr	r3, [pc, #20]	; (800f188 <std+0x3c>)
 800f174:	62a3      	str	r3, [r4, #40]	; 0x28
 800f176:	4b05      	ldr	r3, [pc, #20]	; (800f18c <std+0x40>)
 800f178:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f17a:	4b05      	ldr	r3, [pc, #20]	; (800f190 <std+0x44>)
 800f17c:	6224      	str	r4, [r4, #32]
 800f17e:	6323      	str	r3, [r4, #48]	; 0x30
 800f180:	bd10      	pop	{r4, pc}
 800f182:	bf00      	nop
 800f184:	0800f4a1 	.word	0x0800f4a1
 800f188:	0800f4c3 	.word	0x0800f4c3
 800f18c:	0800f4fb 	.word	0x0800f4fb
 800f190:	0800f51f 	.word	0x0800f51f

0800f194 <_cleanup_r>:
 800f194:	4901      	ldr	r1, [pc, #4]	; (800f19c <_cleanup_r+0x8>)
 800f196:	f000 b8af 	b.w	800f2f8 <_fwalk_reent>
 800f19a:	bf00      	nop
 800f19c:	0800f0d5 	.word	0x0800f0d5

0800f1a0 <__sfmoreglue>:
 800f1a0:	b570      	push	{r4, r5, r6, lr}
 800f1a2:	2268      	movs	r2, #104	; 0x68
 800f1a4:	1e4d      	subs	r5, r1, #1
 800f1a6:	4355      	muls	r5, r2
 800f1a8:	460e      	mov	r6, r1
 800f1aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f1ae:	f7ff fa65 	bl	800e67c <_malloc_r>
 800f1b2:	4604      	mov	r4, r0
 800f1b4:	b140      	cbz	r0, 800f1c8 <__sfmoreglue+0x28>
 800f1b6:	2100      	movs	r1, #0
 800f1b8:	e9c0 1600 	strd	r1, r6, [r0]
 800f1bc:	300c      	adds	r0, #12
 800f1be:	60a0      	str	r0, [r4, #8]
 800f1c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f1c4:	f7fd fb2e 	bl	800c824 <memset>
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	bd70      	pop	{r4, r5, r6, pc}

0800f1cc <__sfp_lock_acquire>:
 800f1cc:	4801      	ldr	r0, [pc, #4]	; (800f1d4 <__sfp_lock_acquire+0x8>)
 800f1ce:	f000 b8b3 	b.w	800f338 <__retarget_lock_acquire_recursive>
 800f1d2:	bf00      	nop
 800f1d4:	200036ed 	.word	0x200036ed

0800f1d8 <__sfp_lock_release>:
 800f1d8:	4801      	ldr	r0, [pc, #4]	; (800f1e0 <__sfp_lock_release+0x8>)
 800f1da:	f000 b8ae 	b.w	800f33a <__retarget_lock_release_recursive>
 800f1de:	bf00      	nop
 800f1e0:	200036ed 	.word	0x200036ed

0800f1e4 <__sinit_lock_acquire>:
 800f1e4:	4801      	ldr	r0, [pc, #4]	; (800f1ec <__sinit_lock_acquire+0x8>)
 800f1e6:	f000 b8a7 	b.w	800f338 <__retarget_lock_acquire_recursive>
 800f1ea:	bf00      	nop
 800f1ec:	200036ee 	.word	0x200036ee

0800f1f0 <__sinit_lock_release>:
 800f1f0:	4801      	ldr	r0, [pc, #4]	; (800f1f8 <__sinit_lock_release+0x8>)
 800f1f2:	f000 b8a2 	b.w	800f33a <__retarget_lock_release_recursive>
 800f1f6:	bf00      	nop
 800f1f8:	200036ee 	.word	0x200036ee

0800f1fc <__sinit>:
 800f1fc:	b510      	push	{r4, lr}
 800f1fe:	4604      	mov	r4, r0
 800f200:	f7ff fff0 	bl	800f1e4 <__sinit_lock_acquire>
 800f204:	69a3      	ldr	r3, [r4, #24]
 800f206:	b11b      	cbz	r3, 800f210 <__sinit+0x14>
 800f208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f20c:	f7ff bff0 	b.w	800f1f0 <__sinit_lock_release>
 800f210:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f214:	6523      	str	r3, [r4, #80]	; 0x50
 800f216:	4b13      	ldr	r3, [pc, #76]	; (800f264 <__sinit+0x68>)
 800f218:	4a13      	ldr	r2, [pc, #76]	; (800f268 <__sinit+0x6c>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f21e:	42a3      	cmp	r3, r4
 800f220:	bf04      	itt	eq
 800f222:	2301      	moveq	r3, #1
 800f224:	61a3      	streq	r3, [r4, #24]
 800f226:	4620      	mov	r0, r4
 800f228:	f000 f820 	bl	800f26c <__sfp>
 800f22c:	6060      	str	r0, [r4, #4]
 800f22e:	4620      	mov	r0, r4
 800f230:	f000 f81c 	bl	800f26c <__sfp>
 800f234:	60a0      	str	r0, [r4, #8]
 800f236:	4620      	mov	r0, r4
 800f238:	f000 f818 	bl	800f26c <__sfp>
 800f23c:	2200      	movs	r2, #0
 800f23e:	60e0      	str	r0, [r4, #12]
 800f240:	2104      	movs	r1, #4
 800f242:	6860      	ldr	r0, [r4, #4]
 800f244:	f7ff ff82 	bl	800f14c <std>
 800f248:	68a0      	ldr	r0, [r4, #8]
 800f24a:	2201      	movs	r2, #1
 800f24c:	2109      	movs	r1, #9
 800f24e:	f7ff ff7d 	bl	800f14c <std>
 800f252:	68e0      	ldr	r0, [r4, #12]
 800f254:	2202      	movs	r2, #2
 800f256:	2112      	movs	r1, #18
 800f258:	f7ff ff78 	bl	800f14c <std>
 800f25c:	2301      	movs	r3, #1
 800f25e:	61a3      	str	r3, [r4, #24]
 800f260:	e7d2      	b.n	800f208 <__sinit+0xc>
 800f262:	bf00      	nop
 800f264:	08010570 	.word	0x08010570
 800f268:	0800f195 	.word	0x0800f195

0800f26c <__sfp>:
 800f26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f26e:	4607      	mov	r7, r0
 800f270:	f7ff ffac 	bl	800f1cc <__sfp_lock_acquire>
 800f274:	4b1e      	ldr	r3, [pc, #120]	; (800f2f0 <__sfp+0x84>)
 800f276:	681e      	ldr	r6, [r3, #0]
 800f278:	69b3      	ldr	r3, [r6, #24]
 800f27a:	b913      	cbnz	r3, 800f282 <__sfp+0x16>
 800f27c:	4630      	mov	r0, r6
 800f27e:	f7ff ffbd 	bl	800f1fc <__sinit>
 800f282:	3648      	adds	r6, #72	; 0x48
 800f284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f288:	3b01      	subs	r3, #1
 800f28a:	d503      	bpl.n	800f294 <__sfp+0x28>
 800f28c:	6833      	ldr	r3, [r6, #0]
 800f28e:	b30b      	cbz	r3, 800f2d4 <__sfp+0x68>
 800f290:	6836      	ldr	r6, [r6, #0]
 800f292:	e7f7      	b.n	800f284 <__sfp+0x18>
 800f294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f298:	b9d5      	cbnz	r5, 800f2d0 <__sfp+0x64>
 800f29a:	4b16      	ldr	r3, [pc, #88]	; (800f2f4 <__sfp+0x88>)
 800f29c:	60e3      	str	r3, [r4, #12]
 800f29e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f2a2:	6665      	str	r5, [r4, #100]	; 0x64
 800f2a4:	f000 f847 	bl	800f336 <__retarget_lock_init_recursive>
 800f2a8:	f7ff ff96 	bl	800f1d8 <__sfp_lock_release>
 800f2ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f2b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f2b4:	6025      	str	r5, [r4, #0]
 800f2b6:	61a5      	str	r5, [r4, #24]
 800f2b8:	2208      	movs	r2, #8
 800f2ba:	4629      	mov	r1, r5
 800f2bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f2c0:	f7fd fab0 	bl	800c824 <memset>
 800f2c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f2c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2d0:	3468      	adds	r4, #104	; 0x68
 800f2d2:	e7d9      	b.n	800f288 <__sfp+0x1c>
 800f2d4:	2104      	movs	r1, #4
 800f2d6:	4638      	mov	r0, r7
 800f2d8:	f7ff ff62 	bl	800f1a0 <__sfmoreglue>
 800f2dc:	4604      	mov	r4, r0
 800f2de:	6030      	str	r0, [r6, #0]
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d1d5      	bne.n	800f290 <__sfp+0x24>
 800f2e4:	f7ff ff78 	bl	800f1d8 <__sfp_lock_release>
 800f2e8:	230c      	movs	r3, #12
 800f2ea:	603b      	str	r3, [r7, #0]
 800f2ec:	e7ee      	b.n	800f2cc <__sfp+0x60>
 800f2ee:	bf00      	nop
 800f2f0:	08010570 	.word	0x08010570
 800f2f4:	ffff0001 	.word	0xffff0001

0800f2f8 <_fwalk_reent>:
 800f2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2fc:	4606      	mov	r6, r0
 800f2fe:	4688      	mov	r8, r1
 800f300:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f304:	2700      	movs	r7, #0
 800f306:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f30a:	f1b9 0901 	subs.w	r9, r9, #1
 800f30e:	d505      	bpl.n	800f31c <_fwalk_reent+0x24>
 800f310:	6824      	ldr	r4, [r4, #0]
 800f312:	2c00      	cmp	r4, #0
 800f314:	d1f7      	bne.n	800f306 <_fwalk_reent+0xe>
 800f316:	4638      	mov	r0, r7
 800f318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f31c:	89ab      	ldrh	r3, [r5, #12]
 800f31e:	2b01      	cmp	r3, #1
 800f320:	d907      	bls.n	800f332 <_fwalk_reent+0x3a>
 800f322:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f326:	3301      	adds	r3, #1
 800f328:	d003      	beq.n	800f332 <_fwalk_reent+0x3a>
 800f32a:	4629      	mov	r1, r5
 800f32c:	4630      	mov	r0, r6
 800f32e:	47c0      	blx	r8
 800f330:	4307      	orrs	r7, r0
 800f332:	3568      	adds	r5, #104	; 0x68
 800f334:	e7e9      	b.n	800f30a <_fwalk_reent+0x12>

0800f336 <__retarget_lock_init_recursive>:
 800f336:	4770      	bx	lr

0800f338 <__retarget_lock_acquire_recursive>:
 800f338:	4770      	bx	lr

0800f33a <__retarget_lock_release_recursive>:
 800f33a:	4770      	bx	lr

0800f33c <__swhatbuf_r>:
 800f33c:	b570      	push	{r4, r5, r6, lr}
 800f33e:	460e      	mov	r6, r1
 800f340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f344:	2900      	cmp	r1, #0
 800f346:	b096      	sub	sp, #88	; 0x58
 800f348:	4614      	mov	r4, r2
 800f34a:	461d      	mov	r5, r3
 800f34c:	da08      	bge.n	800f360 <__swhatbuf_r+0x24>
 800f34e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f352:	2200      	movs	r2, #0
 800f354:	602a      	str	r2, [r5, #0]
 800f356:	061a      	lsls	r2, r3, #24
 800f358:	d410      	bmi.n	800f37c <__swhatbuf_r+0x40>
 800f35a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f35e:	e00e      	b.n	800f37e <__swhatbuf_r+0x42>
 800f360:	466a      	mov	r2, sp
 800f362:	f000 f903 	bl	800f56c <_fstat_r>
 800f366:	2800      	cmp	r0, #0
 800f368:	dbf1      	blt.n	800f34e <__swhatbuf_r+0x12>
 800f36a:	9a01      	ldr	r2, [sp, #4]
 800f36c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f370:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f374:	425a      	negs	r2, r3
 800f376:	415a      	adcs	r2, r3
 800f378:	602a      	str	r2, [r5, #0]
 800f37a:	e7ee      	b.n	800f35a <__swhatbuf_r+0x1e>
 800f37c:	2340      	movs	r3, #64	; 0x40
 800f37e:	2000      	movs	r0, #0
 800f380:	6023      	str	r3, [r4, #0]
 800f382:	b016      	add	sp, #88	; 0x58
 800f384:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f388 <__smakebuf_r>:
 800f388:	898b      	ldrh	r3, [r1, #12]
 800f38a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f38c:	079d      	lsls	r5, r3, #30
 800f38e:	4606      	mov	r6, r0
 800f390:	460c      	mov	r4, r1
 800f392:	d507      	bpl.n	800f3a4 <__smakebuf_r+0x1c>
 800f394:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f398:	6023      	str	r3, [r4, #0]
 800f39a:	6123      	str	r3, [r4, #16]
 800f39c:	2301      	movs	r3, #1
 800f39e:	6163      	str	r3, [r4, #20]
 800f3a0:	b002      	add	sp, #8
 800f3a2:	bd70      	pop	{r4, r5, r6, pc}
 800f3a4:	ab01      	add	r3, sp, #4
 800f3a6:	466a      	mov	r2, sp
 800f3a8:	f7ff ffc8 	bl	800f33c <__swhatbuf_r>
 800f3ac:	9900      	ldr	r1, [sp, #0]
 800f3ae:	4605      	mov	r5, r0
 800f3b0:	4630      	mov	r0, r6
 800f3b2:	f7ff f963 	bl	800e67c <_malloc_r>
 800f3b6:	b948      	cbnz	r0, 800f3cc <__smakebuf_r+0x44>
 800f3b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3bc:	059a      	lsls	r2, r3, #22
 800f3be:	d4ef      	bmi.n	800f3a0 <__smakebuf_r+0x18>
 800f3c0:	f023 0303 	bic.w	r3, r3, #3
 800f3c4:	f043 0302 	orr.w	r3, r3, #2
 800f3c8:	81a3      	strh	r3, [r4, #12]
 800f3ca:	e7e3      	b.n	800f394 <__smakebuf_r+0xc>
 800f3cc:	4b0d      	ldr	r3, [pc, #52]	; (800f404 <__smakebuf_r+0x7c>)
 800f3ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800f3d0:	89a3      	ldrh	r3, [r4, #12]
 800f3d2:	6020      	str	r0, [r4, #0]
 800f3d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3d8:	81a3      	strh	r3, [r4, #12]
 800f3da:	9b00      	ldr	r3, [sp, #0]
 800f3dc:	6163      	str	r3, [r4, #20]
 800f3de:	9b01      	ldr	r3, [sp, #4]
 800f3e0:	6120      	str	r0, [r4, #16]
 800f3e2:	b15b      	cbz	r3, 800f3fc <__smakebuf_r+0x74>
 800f3e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3e8:	4630      	mov	r0, r6
 800f3ea:	f000 f8d1 	bl	800f590 <_isatty_r>
 800f3ee:	b128      	cbz	r0, 800f3fc <__smakebuf_r+0x74>
 800f3f0:	89a3      	ldrh	r3, [r4, #12]
 800f3f2:	f023 0303 	bic.w	r3, r3, #3
 800f3f6:	f043 0301 	orr.w	r3, r3, #1
 800f3fa:	81a3      	strh	r3, [r4, #12]
 800f3fc:	89a0      	ldrh	r0, [r4, #12]
 800f3fe:	4305      	orrs	r5, r0
 800f400:	81a5      	strh	r5, [r4, #12]
 800f402:	e7cd      	b.n	800f3a0 <__smakebuf_r+0x18>
 800f404:	0800f195 	.word	0x0800f195

0800f408 <_malloc_usable_size_r>:
 800f408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f40c:	1f18      	subs	r0, r3, #4
 800f40e:	2b00      	cmp	r3, #0
 800f410:	bfbc      	itt	lt
 800f412:	580b      	ldrlt	r3, [r1, r0]
 800f414:	18c0      	addlt	r0, r0, r3
 800f416:	4770      	bx	lr

0800f418 <_raise_r>:
 800f418:	291f      	cmp	r1, #31
 800f41a:	b538      	push	{r3, r4, r5, lr}
 800f41c:	4604      	mov	r4, r0
 800f41e:	460d      	mov	r5, r1
 800f420:	d904      	bls.n	800f42c <_raise_r+0x14>
 800f422:	2316      	movs	r3, #22
 800f424:	6003      	str	r3, [r0, #0]
 800f426:	f04f 30ff 	mov.w	r0, #4294967295
 800f42a:	bd38      	pop	{r3, r4, r5, pc}
 800f42c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f42e:	b112      	cbz	r2, 800f436 <_raise_r+0x1e>
 800f430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f434:	b94b      	cbnz	r3, 800f44a <_raise_r+0x32>
 800f436:	4620      	mov	r0, r4
 800f438:	f000 f830 	bl	800f49c <_getpid_r>
 800f43c:	462a      	mov	r2, r5
 800f43e:	4601      	mov	r1, r0
 800f440:	4620      	mov	r0, r4
 800f442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f446:	f000 b817 	b.w	800f478 <_kill_r>
 800f44a:	2b01      	cmp	r3, #1
 800f44c:	d00a      	beq.n	800f464 <_raise_r+0x4c>
 800f44e:	1c59      	adds	r1, r3, #1
 800f450:	d103      	bne.n	800f45a <_raise_r+0x42>
 800f452:	2316      	movs	r3, #22
 800f454:	6003      	str	r3, [r0, #0]
 800f456:	2001      	movs	r0, #1
 800f458:	e7e7      	b.n	800f42a <_raise_r+0x12>
 800f45a:	2400      	movs	r4, #0
 800f45c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f460:	4628      	mov	r0, r5
 800f462:	4798      	blx	r3
 800f464:	2000      	movs	r0, #0
 800f466:	e7e0      	b.n	800f42a <_raise_r+0x12>

0800f468 <raise>:
 800f468:	4b02      	ldr	r3, [pc, #8]	; (800f474 <raise+0xc>)
 800f46a:	4601      	mov	r1, r0
 800f46c:	6818      	ldr	r0, [r3, #0]
 800f46e:	f7ff bfd3 	b.w	800f418 <_raise_r>
 800f472:	bf00      	nop
 800f474:	200002a0 	.word	0x200002a0

0800f478 <_kill_r>:
 800f478:	b538      	push	{r3, r4, r5, lr}
 800f47a:	4d07      	ldr	r5, [pc, #28]	; (800f498 <_kill_r+0x20>)
 800f47c:	2300      	movs	r3, #0
 800f47e:	4604      	mov	r4, r0
 800f480:	4608      	mov	r0, r1
 800f482:	4611      	mov	r1, r2
 800f484:	602b      	str	r3, [r5, #0]
 800f486:	f7f5 f9ad 	bl	80047e4 <_kill>
 800f48a:	1c43      	adds	r3, r0, #1
 800f48c:	d102      	bne.n	800f494 <_kill_r+0x1c>
 800f48e:	682b      	ldr	r3, [r5, #0]
 800f490:	b103      	cbz	r3, 800f494 <_kill_r+0x1c>
 800f492:	6023      	str	r3, [r4, #0]
 800f494:	bd38      	pop	{r3, r4, r5, pc}
 800f496:	bf00      	nop
 800f498:	200036e8 	.word	0x200036e8

0800f49c <_getpid_r>:
 800f49c:	f7f5 b99a 	b.w	80047d4 <_getpid>

0800f4a0 <__sread>:
 800f4a0:	b510      	push	{r4, lr}
 800f4a2:	460c      	mov	r4, r1
 800f4a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4a8:	f000 f894 	bl	800f5d4 <_read_r>
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	bfab      	itete	ge
 800f4b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f4b2:	89a3      	ldrhlt	r3, [r4, #12]
 800f4b4:	181b      	addge	r3, r3, r0
 800f4b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f4ba:	bfac      	ite	ge
 800f4bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800f4be:	81a3      	strhlt	r3, [r4, #12]
 800f4c0:	bd10      	pop	{r4, pc}

0800f4c2 <__swrite>:
 800f4c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4c6:	461f      	mov	r7, r3
 800f4c8:	898b      	ldrh	r3, [r1, #12]
 800f4ca:	05db      	lsls	r3, r3, #23
 800f4cc:	4605      	mov	r5, r0
 800f4ce:	460c      	mov	r4, r1
 800f4d0:	4616      	mov	r6, r2
 800f4d2:	d505      	bpl.n	800f4e0 <__swrite+0x1e>
 800f4d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4d8:	2302      	movs	r3, #2
 800f4da:	2200      	movs	r2, #0
 800f4dc:	f000 f868 	bl	800f5b0 <_lseek_r>
 800f4e0:	89a3      	ldrh	r3, [r4, #12]
 800f4e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f4e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f4ea:	81a3      	strh	r3, [r4, #12]
 800f4ec:	4632      	mov	r2, r6
 800f4ee:	463b      	mov	r3, r7
 800f4f0:	4628      	mov	r0, r5
 800f4f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f4f6:	f000 b817 	b.w	800f528 <_write_r>

0800f4fa <__sseek>:
 800f4fa:	b510      	push	{r4, lr}
 800f4fc:	460c      	mov	r4, r1
 800f4fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f502:	f000 f855 	bl	800f5b0 <_lseek_r>
 800f506:	1c43      	adds	r3, r0, #1
 800f508:	89a3      	ldrh	r3, [r4, #12]
 800f50a:	bf15      	itete	ne
 800f50c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f50e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f512:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f516:	81a3      	strheq	r3, [r4, #12]
 800f518:	bf18      	it	ne
 800f51a:	81a3      	strhne	r3, [r4, #12]
 800f51c:	bd10      	pop	{r4, pc}

0800f51e <__sclose>:
 800f51e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f522:	f000 b813 	b.w	800f54c <_close_r>
	...

0800f528 <_write_r>:
 800f528:	b538      	push	{r3, r4, r5, lr}
 800f52a:	4d07      	ldr	r5, [pc, #28]	; (800f548 <_write_r+0x20>)
 800f52c:	4604      	mov	r4, r0
 800f52e:	4608      	mov	r0, r1
 800f530:	4611      	mov	r1, r2
 800f532:	2200      	movs	r2, #0
 800f534:	602a      	str	r2, [r5, #0]
 800f536:	461a      	mov	r2, r3
 800f538:	f7f5 f98b 	bl	8004852 <_write>
 800f53c:	1c43      	adds	r3, r0, #1
 800f53e:	d102      	bne.n	800f546 <_write_r+0x1e>
 800f540:	682b      	ldr	r3, [r5, #0]
 800f542:	b103      	cbz	r3, 800f546 <_write_r+0x1e>
 800f544:	6023      	str	r3, [r4, #0]
 800f546:	bd38      	pop	{r3, r4, r5, pc}
 800f548:	200036e8 	.word	0x200036e8

0800f54c <_close_r>:
 800f54c:	b538      	push	{r3, r4, r5, lr}
 800f54e:	4d06      	ldr	r5, [pc, #24]	; (800f568 <_close_r+0x1c>)
 800f550:	2300      	movs	r3, #0
 800f552:	4604      	mov	r4, r0
 800f554:	4608      	mov	r0, r1
 800f556:	602b      	str	r3, [r5, #0]
 800f558:	f7f5 f997 	bl	800488a <_close>
 800f55c:	1c43      	adds	r3, r0, #1
 800f55e:	d102      	bne.n	800f566 <_close_r+0x1a>
 800f560:	682b      	ldr	r3, [r5, #0]
 800f562:	b103      	cbz	r3, 800f566 <_close_r+0x1a>
 800f564:	6023      	str	r3, [r4, #0]
 800f566:	bd38      	pop	{r3, r4, r5, pc}
 800f568:	200036e8 	.word	0x200036e8

0800f56c <_fstat_r>:
 800f56c:	b538      	push	{r3, r4, r5, lr}
 800f56e:	4d07      	ldr	r5, [pc, #28]	; (800f58c <_fstat_r+0x20>)
 800f570:	2300      	movs	r3, #0
 800f572:	4604      	mov	r4, r0
 800f574:	4608      	mov	r0, r1
 800f576:	4611      	mov	r1, r2
 800f578:	602b      	str	r3, [r5, #0]
 800f57a:	f7f5 f992 	bl	80048a2 <_fstat>
 800f57e:	1c43      	adds	r3, r0, #1
 800f580:	d102      	bne.n	800f588 <_fstat_r+0x1c>
 800f582:	682b      	ldr	r3, [r5, #0]
 800f584:	b103      	cbz	r3, 800f588 <_fstat_r+0x1c>
 800f586:	6023      	str	r3, [r4, #0]
 800f588:	bd38      	pop	{r3, r4, r5, pc}
 800f58a:	bf00      	nop
 800f58c:	200036e8 	.word	0x200036e8

0800f590 <_isatty_r>:
 800f590:	b538      	push	{r3, r4, r5, lr}
 800f592:	4d06      	ldr	r5, [pc, #24]	; (800f5ac <_isatty_r+0x1c>)
 800f594:	2300      	movs	r3, #0
 800f596:	4604      	mov	r4, r0
 800f598:	4608      	mov	r0, r1
 800f59a:	602b      	str	r3, [r5, #0]
 800f59c:	f7f5 f991 	bl	80048c2 <_isatty>
 800f5a0:	1c43      	adds	r3, r0, #1
 800f5a2:	d102      	bne.n	800f5aa <_isatty_r+0x1a>
 800f5a4:	682b      	ldr	r3, [r5, #0]
 800f5a6:	b103      	cbz	r3, 800f5aa <_isatty_r+0x1a>
 800f5a8:	6023      	str	r3, [r4, #0]
 800f5aa:	bd38      	pop	{r3, r4, r5, pc}
 800f5ac:	200036e8 	.word	0x200036e8

0800f5b0 <_lseek_r>:
 800f5b0:	b538      	push	{r3, r4, r5, lr}
 800f5b2:	4d07      	ldr	r5, [pc, #28]	; (800f5d0 <_lseek_r+0x20>)
 800f5b4:	4604      	mov	r4, r0
 800f5b6:	4608      	mov	r0, r1
 800f5b8:	4611      	mov	r1, r2
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	602a      	str	r2, [r5, #0]
 800f5be:	461a      	mov	r2, r3
 800f5c0:	f7f5 f98a 	bl	80048d8 <_lseek>
 800f5c4:	1c43      	adds	r3, r0, #1
 800f5c6:	d102      	bne.n	800f5ce <_lseek_r+0x1e>
 800f5c8:	682b      	ldr	r3, [r5, #0]
 800f5ca:	b103      	cbz	r3, 800f5ce <_lseek_r+0x1e>
 800f5cc:	6023      	str	r3, [r4, #0]
 800f5ce:	bd38      	pop	{r3, r4, r5, pc}
 800f5d0:	200036e8 	.word	0x200036e8

0800f5d4 <_read_r>:
 800f5d4:	b538      	push	{r3, r4, r5, lr}
 800f5d6:	4d07      	ldr	r5, [pc, #28]	; (800f5f4 <_read_r+0x20>)
 800f5d8:	4604      	mov	r4, r0
 800f5da:	4608      	mov	r0, r1
 800f5dc:	4611      	mov	r1, r2
 800f5de:	2200      	movs	r2, #0
 800f5e0:	602a      	str	r2, [r5, #0]
 800f5e2:	461a      	mov	r2, r3
 800f5e4:	f7f5 f918 	bl	8004818 <_read>
 800f5e8:	1c43      	adds	r3, r0, #1
 800f5ea:	d102      	bne.n	800f5f2 <_read_r+0x1e>
 800f5ec:	682b      	ldr	r3, [r5, #0]
 800f5ee:	b103      	cbz	r3, 800f5f2 <_read_r+0x1e>
 800f5f0:	6023      	str	r3, [r4, #0]
 800f5f2:	bd38      	pop	{r3, r4, r5, pc}
 800f5f4:	200036e8 	.word	0x200036e8

0800f5f8 <_init>:
 800f5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5fa:	bf00      	nop
 800f5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5fe:	bc08      	pop	{r3}
 800f600:	469e      	mov	lr, r3
 800f602:	4770      	bx	lr

0800f604 <_fini>:
 800f604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f606:	bf00      	nop
 800f608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f60a:	bc08      	pop	{r3}
 800f60c:	469e      	mov	lr, r3
 800f60e:	4770      	bx	lr
